package edu.mayo.informatics.lexgrid.convert.directConversions.medDRA;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import static org.junit.Assert.fail;import java.io.File;import org.LexGrid.LexBIG.DataModel.InterfaceElements.ProcessStatus;import org.LexGrid.LexBIG.Impl.loaders.MessageDirector;import org.LexGrid.LexBIG.Utility.logging.LgMessageDirectorIF;import org.LexGrid.codingSchemes.CodingScheme;import org.LexGrid.commonTypes.Property;import org.LexGrid.concepts.Entities;import org.LexGrid.concepts.Entity;import org.LexGrid.concepts.Presentation;import org.LexGrid.relations.AssociationPredicate;import org.LexGrid.relations.AssociationSource;import org.junit.After;import org.junit.Before;import org.junit.Test;public class MedDRAToLexGridTest {	File accessPath = new File("resources/testData/medDRA");	CodingScheme codingScheme = null;		enum RecordType{		OS,		HG,		HT,		PT,		LT,		SMQ;	}	@Before	public void setUp() {		try {			MedDRA2LGMain loader = new MedDRA2LGMain();			LgMessageDirectorIF messages = 				new MessageDirector(this.getClass().getName(), new ProcessStatus());					codingScheme = loader.map(null, accessPath.toURI(), messages);		}		catch (Exception e) {			fail("Unable to connect to the MedDRA Directory.");		}	}		@After	public void tearDown() {		codingScheme = null;	}		@Test	public void testSOCDetails() {		Entities entities = codingScheme.getEntities();				for(int i=0; i < entities.getEntityCount(); i++){			Entity entity = entities.getEntity(i);			if(entity.getEntityCode().equals("10005329")){				Presentation[] presentations = entity.getPresentation();				assertEquals(1, presentations.length);				assertEquals("T-1", presentations[0].getPropertyName());				assertEquals("Blood and lymphatic system disorders", presentations[0].getValue().getContent());				assertEquals("OS", presentations[0].getRepresentationalForm());				assertTrue(presentations[0].getIsPreferred());				assertEquals("Blood and lymphatic system disorders", entity.getEntityDescription().getContent());								Property[] properties = entity.getProperty();				assertEquals(2, properties.length);				assertEquals("P-1", properties[0].getPropertyName());				assertEquals("3", properties[0].getValue().getContent());				assertEquals("P-2", properties[1].getPropertyName());				assertEquals("Blood", properties[1].getValue().getContent());											}		}			}										@Test	public void testEntityCounts() {		Entities entities = codingScheme.getEntities();		int socCount = 0;		int hlgtCount = 0;		int hltCount = 0;		int ptCount = 0;		int lltCount = 0;		int smqCount = 0;				for(int i=0; i < entities.getEntityCount(); i++){			Entity entity = entities.getEntity(i);			Presentation[] presentations = entity.getPresentation();			for(int j=0; j < presentations.length; j++){				if(presentations[j].isIsPreferred() && presentations[j].getPropertyName().equals("T-1")){					String pName = presentations[j].getRepresentationalForm();					switch (RecordType.valueOf(pName)) {						case OS: 							socCount++;							break;						case HG:							hlgtCount++;							break;						case HT:							hltCount++;							break;						case PT:							ptCount++;							break;						case LT:							lltCount++;							break;						case SMQ:							smqCount++;							break;						default:							break;					}				}								}			}				assertEquals(2, socCount);		assertEquals(27, hlgtCount);		assertEquals(123, hltCount);		assertEquals(1414, ptCount);		assertEquals(4632, lltCount);		assertEquals(91, smqCount);					}		@Test	public void testRelations() {//		Entities entities = codingScheme.getEntities();//		Relations [] relations = codingScheme.getRelations();//		//		System.out.println(entities.getEntityCount());//		System.out.println(relations.length);		int count;		int sourceCount = 0;		int targetCount = 0;				for (AssociationPredicate ap : codingScheme.getRelations()[0].getAssociationPredicate()) {			sourceCount += ap.getSourceCount();			for (AssociationSource source : ap.getSource()) {				if (source.getSourceEntityCode().equals("10005329")){					count = source.getTargetCount();					assertEquals(17, count);				}			    targetCount += source.getTargetCount();			}		}								assertEquals(1208, sourceCount);		assertEquals(14906, targetCount);	}}