<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL MAP 2.0//EN" 
	"http://www.ibatis.com/dtd/sql-map-2.dtd">
<sqlMap namespace="Association">

	<typeAlias alias="node" type="org.lexevs.dao.database.access.association.model.Node"/>
	<typeAlias alias="triple" type="org.lexevs.dao.database.access.association.model.Triple"/>
	<typeAlias alias="graphdbTriple" type="org.lexevs.dao.database.access.association.model.graphdb.GraphDbTriple"/>
	<typeAlias alias="associatedConcept" type="org.lexevs.dao.database.ibatis.codednodegraph.model.EntityReferencingAssociatedConcept"/>
	<typeAlias alias="associationQualification" type="org.LexGrid.LexBIG.DataModel.Core.NameAndValue"/>
	<typeAlias alias="associationTarget" type="org.lexevs.dao.database.ibatis.association.parameter.InsertOrUpdateAssociationTargetBean"/>
	<typeAlias alias="countConceptReference" type="org.lexevs.dao.database.service.codednodegraph.model.CountConceptReference"/>
	<typeAlias alias="mappingTriple" type="org.lexevs.dao.database.ibatis.codednodegraph.model.TripleUidReferencingResolvedConceptReference"/>
	<typeAlias alias="vsEntity" type="org.lexevs.dao.database.ibatis.entity.model.IdableEntity"/>
	<typeAlias alias="vsProperty" type="org.LexGrid.commonTypes.Property"/>
	
	<resultMap id="countConceptReferenceResult" class="countConceptReference">
		<result property="code" column="entityCode" />
		<result property="codeNamespace" column="entityCodeNamespace" />
		<result property="childCount" column="relationshipsCount" />
	</resultMap>
	
	<resultMap id="nodeResult" class="node">
		<result property="entityCode" column="entityCode" />
		<result property="entityCodeNamespace" column="entityCodeNamespace" />
	</resultMap>
	
	<resultMap id="countResult" class="java.util.HashMap">
		<result property="key" column="associationName" />
		<result property="value" column="relationshipsCount" javaType="int" />
	</resultMap>
	
	<resultMap id="tripleResult" class="triple" groupBy="tripleGuid">
		<result property="sourceEntityCode" column="sourceEntityCode" />
		<result property="sourceEntityNamespace" column="sourceEntityCodeNamespace" />
		<result property="targetEntityCode" column="targetEntityCode" />
		<result property="targetEntityNamespace" column="targetEntityCodeNamespace" />
		<result property="associationPredicateId" column="associationPredicateGuid" />
	</resultMap>
	
	<resultMap id="graphdbTripleResult" class="graphdbTriple" groupBy="tripleGuid">
		<result property="sourceEntityCode" column="sourceEntityCode" />
		<result property="sourceEntityNamespace" column="sourceEntityCodeNamespace" />
		<result property="targetEntityCode" column="targetEntityCode" />
		<result property="targetEntityNamespace" column="targetEntityCodeNamespace" />
		<result property="associationPredicateId" column="associationPredicateGuid" />
 		<result property="entityAssnsGuid" column="entityAssnsGuid" />
		<result property="associationInstanceId" column="associationInstanceId" /> 
		<result property="associationName"	column="associationName" />
		<result property="sourceDescription" column="sd" nullValue="Description Missing"/>
		<result property="targetDescription" column="td" nullValue="Description Missing"/>
	</resultMap>
	
	<resultMap id="graphdbTripleTrResult" class="graphdbTriple" groupBy="tripleGuid">
		<result property="sourceEntityCode" column="sourceEntityCode" />
		<result property="sourceEntityNamespace" column="sourceEntityCodeNamespace" />
		<result property="targetEntityCode" column="targetEntityCode" />
		<result property="targetEntityNamespace" column="targetEntityCodeNamespace" />
		<result property="associationPredicateId" column="associationPredicateGuid" />
 		<result property="entityAssnsGuid" column="entityAssnsTrGuid" />
		<result property="associationName"	column="associationName" />
		<result property="sourceDescription" column="sd" nullValue="Description Missing"/>
		<result property="targetDescription" column="td" nullValue="Description Missing"/>
	</resultMap>
	
	<resultMap id="associatedConceptResult" class="associatedConcept" groupBy="guid">
		<result property="guid" column="entityAssnsGuid" typeHandler="variablePrimaryKeyTypeHandler"/>
		<result property="entityGuid" column="entityGuid" typeHandler="variablePrimaryKeyTypeHandler"/>
		<result property="code" column="entityCode" />
		<result property="codeNamespace" column="entityCodeNamespace" />
		<result property="entityDescription.content" column="description" />
		<result property="associationQualification" resultMap="Association.associationQualificationResult"/>
	</resultMap>
	
	<resultMap id="mappingTripleSubjectResult" class="mappingTriple" groupBy="tripleUid">
		<result property="tripleUid" column="tripleUid" typeHandler="variablePrimaryKeyTypeHandler"/>
		<result property="code" column="sourceEntityCode" />
		<result property="codeNamespace" column="sourceEntityCodeNamespace" />
		<result property="entityDescription.content" column="sourceEntityDescription" />
		<result property="_sourceOf._associationList" resultMap="Association.mappingTripleAssociationResult" />
	</resultMap>
	
	<resultMap id="mappingTripleAssociationResult" class="org.LexGrid.LexBIG.DataModel.Core.Association" groupBy="associationName">
		<result property="associationName" column="associationName"/>
		<result property="_associatedConcepts._associatedConceptList" resultMap="Association.mappingTripleObjectResult"/>
	</resultMap>
	
	<resultMap id="mappingTripleObjectResult" class="org.LexGrid.LexBIG.DataModel.Core.AssociatedConcept" groupBy="code,namespace">
		<result property="code" column="targetEntityCode" />
		<result property="codeNamespace" column="targetEntityCodeNamespace" />
		<result property="entityDescription.content" column="targetEntityDescription"/>
		<result property="_associationQualifiers._nameAndValueList" resultMap="Association.associationQualificationResult"/>
	</resultMap>

	<resultMap id="associationQualificationResult" class="associationQualification" groupBy="name,content">
		<result property="name" column="qualifierName" />
		<result property="content" column="qualifierValue" />
	</resultMap>
	
	<resultMap id="associationTargetEntry" class="associationTarget" groupBy="uid">
		<result property="uid" column="entityAssnsGuid" typeHandler="variablePrimaryKeyTypeHandler"/>
		<result property="associationPredicateUId" column="associationPredicateGuid" />
		<result property="associationSource.sourceEntityCode" column="sourceEntityCode" />
		<result property="associationSource.sourceEntityCodeNamespace" column="sourceEntityCodeNamespace" />
		<result property="associationTarget.targetEntityCode" column="targetEntityCode" />
		<result property="associationTarget.targetEntityCodeNamespace" column="targetEntityCodeNamespace" />
		<result property="associationTarget.associationInstanceId" column="associationInstanceId" />
		<result property="associationTarget.isDefining" column="isDefining" typeHandler="numericBooleanTypeHandler"/>
		<result property="associationTarget.isInferred" column="isInferred" typeHandler="numericBooleanTypeHandler"/>
		<result property="associationTarget.isActive" column="isActive" typeHandler="numericBooleanTypeHandler"/>
		<result property="associationTarget.owner" column="owner" />
		<result property="associationTarget.status" column="status" />
		<result property="associationTarget.effectiveDate" column="effectiveDate" />
		<result property="associationTarget.expirationDate" column="expirationDate" />
		<result property="entryStateUId" column="entryStateGuid" typeHandler="variablePrimaryKeyTypeHandler"/>
		<result property="assnQualsAndUsageContextList" resultMap="Association.qualContextResult"/>
	</resultMap>
	
	<resultMap id="associationSourceTripleEntry" class="org.LexGrid.relations.AssociationSource" 
		groupBy="sourceEntityCode,sourceEntityCodeNamespace">
		<result property="sourceEntityCode" column="sourceEntityCode" />
		<result property="sourceEntityCodeNamespace" column="sourceEntityCodeNamespace" />
		<result property="_targetList" resultMap="Association.associationTargetTripleEntry"/>
	</resultMap>
	
	<resultMap id="associationTargetTripleEntry" class="org.LexGrid.relations.AssociationTarget" groupBy="associationInstanceId">
		<result property="targetEntityCode" column="targetEntityCode" />
		<result property="targetEntityCodeNamespace" column="targetEntityCodeNamespace" />
		<result property="associationInstanceId" column="associationInstanceId" />
		<result property="isDefining" column="isDefining" typeHandler="numericBooleanTypeHandler"/>
		<result property="isInferred" column="isInferred" typeHandler="numericBooleanTypeHandler"/>
		<result property="isActive" column="isActive" typeHandler="numericBooleanTypeHandler"/>
		<result property="owner" column="owner" />
		<result property="status" column="status" />
		<result property="effectiveDate" column="effectiveDate" />
		<result property="expirationDate" column="expirationDate" />
	</resultMap>
	
	<resultMap id="valueSetHierarchyRootNodeResolution" class="org.lexevs.dao.database.access.association.model.VSHierarchyNode" groupBy="description, publish, source">
		<result property="entityCode" column="entityCode" />
		<result property="namespace" column="namespace" />
		<result property="description" column="description" />
		<result property="source" column="source"/>
	</resultMap>
	
	<resultMap id="definedNodeResolution" class="org.lexevs.dao.database.access.association.model.DefinedNode" groupBy="description, publish, source">
		<result property="entityCode" column="entityCode" />
		<result property="entityCodeNamespace" column="namespace" />
		<result property="description" column="description" />
	</resultMap>
	
	<resultMap id="vsEntityResult" class="vsEntity" groupBy="entityCode,entityCodeNamespace">
		<result property="id" column="entityGuid" typeHandler="variablePrimaryKeyTypeHandler"/>
		<result property="entityCode" column="entityCode" />
		<result property="entityCodeNamespace" column="entityCodeNamespace" />
		<result property="isDefined" column="isDefined" typeHandler="numericBooleanTypeHandler"/>
		<result property="isAnonymous" column="isAnonymous" typeHandler="numericBooleanTypeHandler"/>
		<result property="entityDescription.content" column="description" />
		<result property="isActive" column="isActive" typeHandler="numericBooleanTypeHandler"/>
		<result property="owner" column="owner" />
		<result property="status" column="status" />
		<result property="effectiveDate" column="effectiveDate" />
		<result property="expirationDate" column="expirationDate" />
	</resultMap>
	
	<resultMap id="vsEntityResultWithProperties" class="vsEntity" groupBy="entityCode,entityCodeNamespace">
		<result property="id" column="entityGuid" typeHandler="variablePrimaryKeyTypeHandler"/>
		<result property="entityCode" column="entityCode" />
		<result property="entityCodeNamespace" column="entityCodeNamespace" />
		<result property="isDefined" column="isDefined" typeHandler="numericBooleanTypeHandler"/>
		<result property="isAnonymous" column="isAnonymous" typeHandler="numericBooleanTypeHandler"/>
		<result property="entityDescription.content" column="description" />
		<result property="isActive" column="isActive" typeHandler="numericBooleanTypeHandler"/>
		<result property="owner" column="owner" />
		<result property="status" column="status" />
		<result property="effectiveDate" column="effectiveDate" />
		<result property="expirationDate" column="expirationDate" />
		<result property="_propertyList" resultMap="Association.vsPropertyResult"/>
	</resultMap>
	
	<resultMap id="vsPropertyResult" class="vsProperty" groupBy="propertyName, propertyValue">
		<result property="propertyName" column="propertyName"/>
		<result property="value.content" column="propertyValue"/>
	</resultMap>
	
	<resultMap id="vsEntityCount" class="string">
		<result property="java.util.String" column="vsEntityCount" />
	</resultMap>
	
	<resultMap id="instanceToGuidMapResult" class="org.lexevs.dao.database.access.association.model.InstanceToGuid" >
		<result property="instance" column="instance" />
		<result property="value" column="value" />
	</resultMap>

	<select id="getConceptReferenceFromEntityAssnsToEntityUid" 
		parameterClass="org.lexevs.dao.database.ibatis.parameter.SequentialMappedParameterBean"
		remapResults="true" 
		resultMap="Entity.conceptReferenceResult">
		SELECT

			<isEqual property="param1" compareValue="SUBJECT">
				eate.sourceEntityCode as entityCode,
				eate.sourceEntityCodeNamespace as entityCodeNamespace
			</isEqual>
			<isEqual property="param1" compareValue="OBJECT">
				eate.targetEntityCode as entityCode,
				eate.targetEntityCodeNamespace as entityCodeNamespace
			</isEqual>
			
		entityType.entityType
			
		FROM
			$prefix$entityAssnsToEntity eate
		LEFT JOIN
			$prefix$entity entity
		ON
			entityCode = entity.entityCode	
		LEFT JOIN
			$prefix$entityType entityType
		ON
			entity.entityGuid =
			entityType.entityGuid	
		
		WHERE
			eate.entityAssnsGuid IN ( <iterate property="param2" conjunction=",">#param2[],handler=variablePrimaryKeyTypeHandler#</iterate> )
	</select>
	
	<select id="getNodesPath"
		parameterClass="org.lexevs.dao.database.ibatis.association.parameter.GetNodesPathBean"
		remapResults="true" resultClass="string">
		SELECT 
			tr.path
		FROM 
			$prefix$entityAssnsToEntityTr tr
		WHERE
			tr.sourceEntityCode = #sourceEntityCode# 
			AND 
			tr.sourceEntityCodeNamespace = #sourceEntityCodeNamespace# 
			AND
			tr.targetEntityCode = #targetEntityCode# 
			AND
			tr.targetEntityCodeNamespace = #targetEntityCodeNamespace#
			<isNotNull property="associationPredicateUId">
			AND
			tr.associationPredicateGuid = #associationPredicateUId# 
			</isNotNull>
	</select>
	
	
	<select id="getAssociatedConcpetFromEntityAssnsToEntityUid" 
		parameterClass="org.lexevs.dao.database.ibatis.parameter.SequentialMappedParameterBean"
		remapResults="true" resultMap="Association.associatedConceptResult">
		SELECT
			eate.entityAssnsGuid,
			entity.entityGuid,
			entity.description,
			
			<isEqual property="param1" compareValue="SUBJECT">
				eate.sourceEntityCode as entityCode,
				eate.sourceEntityCodeNamespace as entityCodeNamespace,
			</isEqual>
			<isEqual property="param1" compareValue="OBJECT">
				eate.targetEntityCode as entityCode,
				eate.targetEntityCodeNamespace as entityCodeNamespace,
			</isEqual>
			quals.qualifierName,
			quals.qualifierValue
		FROM
			$prefix$entityAssnsToEntity eate
			
		LEFT JOIN
			$prefix$entityAssnQuals quals
		ON (eate.entityAssnsGuid = quals.referenceGuid)
		
		LEFT JOIN
			$prefix$entity entity
		ON (
			<isEqual property="param1" compareValue="SUBJECT">
				eate.sourceEntityCode = entity.entityCode
				AND
				eate.sourceEntityCodeNamespace = entity.entityCodeNamespace
			</isEqual>
			<isEqual property="param1" compareValue="OBJECT">
				eate.targetEntityCode = entity.entityCode
				AND
				eate.targetEntityCodeNamespace = entity.entityCodeNamespace
			</isEqual>
				AND
				entity.codingSchemeGuid = #param4#
			)
		
		WHERE
			eate.entityAssnsGuid IN ( <iterate property="param2" conjunction=",">#param2[],handler=variablePrimaryKeyTypeHandler#</iterate> )
			
		<isNotEmpty property="param3">
			ORDER BY
			<iterate property="param3" conjunction=",">
				<isEqual property="param1" compareValue="SUBJECT">
					$param3[].columnSortType.objectColumn$
				</isEqual>
				<isEqual property="param1" compareValue="OBJECT">
					$param3[].columnSortType.subjectColumn$
				</isEqual>
				$param3[].order$
			</iterate>
		</isNotEmpty>
	</select>

	<select id="getAccociationInstanceKey" 
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple"
		remapResults="true" 
		resultMap="Common.uidResult">
		SELECT
			eae.entityAssnsGuid AS uidKey
		FROM 
			$prefix$entityAssnsToEntity eae
		INNER JOIN
			$prefix$associationPredicate ap
		ON 
			eae.associationPredicateGuid =
			ap.associationPredicateGuid
		INNER JOIN
			$prefix$relation rel
		ON
			ap.relationGuid =
			rel.relationGuid
		WHERE
			rel.codingSchemeGuid = 
			#param1,handler=variablePrimaryKeyTypeHandler#
		AND
			eae.associationInstanceId = 
			#param2#
	</select>
	
	<select id="getAssociationInstanceUIDFromInstanceIdOnly" 
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter"
		remapResults="true" 
		resultMap="Common.uidResult">
		
		SELECT
			eae.entityAssnsGuid AS uidKey
		FROM 
			$prefix$entityAssnsToEntity eae
		WHERE
			eae.associationInstanceId = #param1#
	</select>	
	
	<select id="getAllTriplesOfCodingScheme" remapResults="true"
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple" resultMap="Association.tripleResult">
		SELECT
			eae.sourceEntityCode,
			eae.sourceEntityCodeNamespace,
			eae.targetEntityCode,
			eae.targetEntityCodeNamespace,
			eae.associationPredicateGuid
		FROM 
			$prefix$entityAssnsToEntity eae
		INNER JOIN
			$prefix$associationPredicate ap
		ON 
			eae.associationPredicateGuid =
			ap.associationPredicateGuid
		INNER JOIN
			$prefix$relation rel
		ON
			ap.relationGuid =
			rel.relationGuid
		WHERE
			rel.codingSchemeGuid = 
			#param1,handler=variablePrimaryKeyTypeHandler#
		<isNotNull property="param2">
		AND
			eae.associationPredicateGuid =
			#param2,handler=variablePrimaryKeyTypeHandler#	
		</isNotNull>
	</select>
	
	<select id="getAllTriplesOfCodingSchemeForGraphDbLoad" remapResults="true"
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple" resultMap="Association.graphdbTripleResult">
		SELECT
			eae.sourceEntityCode,
			eae.sourceEntityCodeNamespace,
			eae.targetEntityCode,
			eae.targetEntityCodeNamespace,
			eae.associationPredicateGuid,
 			eae.entityAssnsGuid,
			eae.associationInstanceId, 
<!--  			aq.qualifierName,
			aq.qualifierValue, -->
 			ap.associationName,
 			source.description as sd,
 			target.description as td
 		FROM
			$prefix$entityAssnsToEntity eae
		INNER JOIN
			$prefix$associationPredicate ap
		ON 
			eae.associationPredicateGuid =
			ap.associationPredicateGuid
		INNER JOIN
			$prefix$relation rel
		ON
			ap.relationGuid =
			rel.relationGuid
		LEFT JOIN
			$prefix$entity source
		ON
			source.entityCode = eae.sourceEntityCode 
		LEFT JOIN
			$prefix$entity target
		ON 
			target.entityCode = eae.targetEntityCode
<!--  		LEFT JOIN 
			$prefix$entityassnquals aq 
		ON 
			aq.referenceGuid =
			eae.entityAssnsGuid -->
		WHERE
			rel.codingSchemeGuid = 
			#param1,handler=variablePrimaryKeyTypeHandler#
		<isNotNull property="param2">
		AND
			eae.associationPredicateGuid =
			#param2,handler=variablePrimaryKeyTypeHandler#	
		</isNotNull>
	</select>
	
     <insert id="insertEntityAssnsToEntity" parameterClass="org.lexevs.dao.database.ibatis.association.parameter.InsertOrUpdateAssociationTargetBean">
		INSERT INTO $prefix$entityAssnsToEntity (
			entityAssnsGuid,
			associationPredicateGuid,
			sourceEntityCode,
			sourceEntityCodeNamespace,
			targetEntityCode,
			targetEntityCodeNamespace,
			associationInstanceId,
			isDefining,
			isInferred,
			isActive,
			owner,
			status,
			effectiveDate,
			expirationDate,
			entryStateGuid
		) VALUES (
			#uid,handler=variablePrimaryKeyTypeHandler#, 
			#associationPredicateUId,handler=variablePrimaryKeyTypeHandler#,
			#associationSource.sourceEntityCode#, 
			#associationSource.sourceEntityCodeNamespace#, 
			#associationTarget.targetEntityCode#, 
			#associationTarget.targetEntityCodeNamespace#, 
			#associationTarget.associationInstanceId:VARCHAR#, 
			#associationTarget.isDefining,handler=numericBooleanTypeHandler#,
			#associationTarget.isInferred,handler=numericBooleanTypeHandler#,
			#associationTarget.isActive,handler=numericBooleanTypeHandler#,
			#associationTarget.owner:VARCHAR#,
			#associationTarget.status:VARCHAR#,
			#associationTarget.effectiveDate:TIMESTAMP#,
			#associationTarget.expirationDate:TIMESTAMP#,
			#entryStateUId,handler=variablePrimaryKeyTypeHandler#
		)
  </insert>
  
  <select id="getTransitiveTableCount" remapResults="true"
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter" resultClass="int">
		SELECT
			COUNT(*)
		FROM 
			$prefix$entityAssnsToEntityTr eaetr
		INNER JOIN
			$prefix$associationPredicate ap
		ON 
			eaetr.associationPredicateGuid =
			ap.associationPredicateGuid
		INNER JOIN
			$prefix$relation rel
		ON
			ap.relationGuid =
			rel.relationGuid
		WHERE
			rel.codingSchemeGuid = 
			#param1,handler=variablePrimaryKeyTypeHandler#
  </select>
  
   <delete id="deleteFromTransitiveTableByCodingSchemeUid"
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter">
		DELETE
			$prefix$entityAssnsToEntityTr
		FROM 
			$prefix$entityAssnsToEntityTr
		INNER JOIN
			$prefix$associationPredicate
		ON 
			$prefix$entityAssnsToEntityTr.associationPredicateGuid =
			$prefix$associationPredicate.associationPredicateGuid
		INNER JOIN
			$prefix$relation
		ON
			$prefix$associationPredicate.relationGuid =
			$prefix$relation.relationGuid
		WHERE
			$prefix$relation.codingSchemeGuid = 
			#param1,handler=variablePrimaryKeyTypeHandler#
  </delete>
  
   <insert id="insertTransitiveClosure" parameterClass="org.lexevs.dao.database.ibatis.association.parameter.InsertTransitiveClosureBean">
		INSERT INTO $prefix$entityAssnsToEntityTr (
			entityAssnsTrGuid,
			associationPredicateGuid,
			sourceEntityCode,
			sourceEntityCodeNamespace,
			targetEntityCode,
			targetEntityCodeNamespace,
			path
		) VALUES (
			#uid,handler=variablePrimaryKeyTypeHandler#, 
			#associationPredicateUId,handler=variablePrimaryKeyTypeHandler#,
			#sourceEntityCode#, 
			#sourceEntityCodeNamespace#, 
			#targetEntityCode#, 
			#targetEntityCodeNamespace#,
			#path#
		)
  </insert>

	<sql id="getEntityAssnsToEntityUidsFragment">
		FROM
			$prefix$entityAssnsToEntity eate
		INNER JOIN
			$prefix$associationPredicate ap
		ON
			(ap.associationPredicateGuid = eate.associationPredicateGuid)
		INNER JOIN
			$prefix$relation rel
		ON
			(rel.relationGuid = ap.relationGuid)
		LEFT JOIN
			$prefix$entityAssnQuals quals
		ON
			(eate.entityAssnsGuid = quals.referenceGuid)
			
		<isEqual property="needsEntityJoin" compareValue="true">
		LEFT JOIN
			$prefix$entity entity
		ON
			(
			<isEqual property="tripleNode" compareValue="SUBJECT">
				eate.targetEntityCode = entity.entityCode
				AND
				eate.targetEntityCodeNamespace = entity.entityCodeNamespace
			</isEqual>
			<isEqual property="tripleNode" compareValue="OBJECT">
				eate.sourceEntityCode = entity.entityCode
				AND
				eate.sourceEntityCodeNamespace = entity.entityCodeNamespace
			</isEqual>
			)
		LEFT JOIN
			$prefix$entityType entityType
		ON
			(entity.entityGuid = entityType.entityGuid)
		</isEqual>
			
		WHERE
			rel.codingSchemeGuid = #codingSchemeUid,handler=variablePrimaryKeyTypeHandler#
			
		<isPropertyAvailable property="relationsContainerName" prepend="AND">
			<isNotNull property="relationsContainerName">
			rel.containerName = #relationsContainerName#
			</isNotNull>
		</isPropertyAvailable>

		<isPropertyAvailable property="associationPredicateUid">
			<isNotNull property="associationPredicateUid" prepend="AND">
			ap.associationPredicateGuid = #associationPredicateUid,handler=variablePrimaryKeyTypeHandler#
			</isNotNull>
		</isPropertyAvailable>

		<isNotEmpty property="associationQualifiers" prepend="AND">
			(
			<iterate property="associationQualifiers" conjunction="AND">
				(
				quals.qualifierName = #associationQualifiers[].qualifierName#
				<isNotEmpty property="associationQualifiers[].qualifierValue">
					AND
					quals.qualifierValue = #associationQualifiers[].qualifierValue#
			</isNotEmpty>
				)
			</iterate>
			)
		</isNotEmpty>

		<isNotEmpty property="associations" prepend="AND">
			(
			<iterate property="associations" conjunction="OR">
				ap.associationName = #associations[]#
			</iterate>
			)
		</isNotEmpty>

		<isNotEmpty property="mustHaveCodes" prepend="AND">
			(
			<iterate property="mustHaveCodes" conjunction="OR">
				<isEqual property="tripleNode" compareValue="SUBJECT">
					(
					eate.targetEntityCode = #mustHaveCodes[].code#
					<isNotNull property="mustHaveCodes[].namespace" prepend="AND">
						eate.targetEntityCodeNamespace = #mustHaveCodes[].namespace#
					</isNotNull>
					)
				</isEqual>
				<isEqual property="tripleNode" compareValue="OBJECT">
					(
					eate.sourceEntityCode = #mustHaveCodes[].code#
					<isNotNull property="mustHaveCodes[].namespace" prepend="AND">
						eate.sourceEntityCodeNamespace = #mustHaveCodes[].namespace#
					</isNotNull>
					)
				</isEqual>
			</iterate>
			)
		</isNotEmpty>
		<isNotEmpty property="mustHaveNamespaces" prepend="AND">
			(
			<iterate property="mustHaveNamespaces" conjunction="OR">
				<isEqual property="tripleNode" compareValue="SUBJECT">
					(
					eate.targetEntityCodeNamespace = #mustHaveNamespaces[]#
					)
				</isEqual>
				<isEqual property="tripleNode" compareValue="OBJECT">
					(
					eate.sourceEntityCodeNamespace = #mustHaveNamespaces[]#
					)
				</isEqual>
			</iterate>
			)
		</isNotEmpty>
		<isNotEmpty property="mustHaveEntityTypes" prepend="AND">
		(
			(
			<iterate property="mustHaveEntityTypes" conjunction="OR">
				entityType.entityType = #mustHaveEntityTypes[]#
			</iterate>
			)
			OR
			(
				entityType.entityType IS NULL
			)
		)
		</isNotEmpty>
		<isNotNull property="restrictToAnonymous" prepend="AND">
		(
			entity.isAnonymous = #restrictToAnonymous,handler=numericBooleanTypeHandler#
			OR
			entity.isAnonymous IS NULL
		)
		</isNotNull>
	</sql>
	
	<sql id="restrictEntityAssnsToEntityUidsBySingleCodeFragment">
		
		<isEqual property="tripleNode" compareValue="SUBJECT" prepend="AND">
			eate.sourceEntityCode = #entityCode#
			<isNotNull property="entityCodeNamespace" prepend="AND">
				eate.sourceEntityCodeNamespace = #entityCodeNamespace#
			</isNotNull>
		</isEqual>
		<isEqual property="tripleNode" compareValue="OBJECT" prepend="AND">
			eate.targetEntityCode = #entityCode#
			<isNotNull property="entityCodeNamespace" prepend="AND">
				eate.targetEntityCodeNamespace = #entityCodeNamespace#
			</isNotNull>
		</isEqual>
		
	</sql>
	
	<sql id="restrictEntityAssnsToEntityUidsByMultipleCodesFragment">
	
		<isEqual property="tripleNode" compareValue="SUBJECT" prepend="AND">
			(
			<iterate property="conceptReferences" conjunction="OR">
				(	
				eate.sourceEntityCode = #conceptReferences[].code#
				<isNotNull property="conceptReferences[].codeNamespace" prepend="AND">
					eate.sourceEntityCodeNamespace = #conceptReferences[].codeNamespace#
				</isNotNull>
				)
			</iterate>
			)
		</isEqual>
		<isEqual property="tripleNode" compareValue="OBJECT" prepend="AND">
			(
			<iterate property="conceptReferences" conjunction="OR">
				(
				eate.targetEntityCode = #conceptReferences[].code#
				<isNotNull property="conceptReferences[].codeNamespace" prepend="AND">
					eate.targetEntityCodeNamespace = #conceptReferences[].codeNamespace#
				</isNotNull>
				)
			</iterate>
			)
		</isEqual>
	
	</sql>
	
	<sql id="getRelationshipsFragment">
		INNER JOIN
			$prefix$associationPredicate ap
		ON
			(ap.associationPredicateGuid = eate.associationPredicateGuid)
		INNER JOIN
			$prefix$relation rel
		ON
			(rel.relationGuid = ap.relationGuid)
			
		<isEqual property="needsEntityJoin" compareValue="true">
		LEFT JOIN
			$prefix$entity sourceEntity
		ON
			(
				eate.sourceEntityCode = sourceEntity.entityCode
				AND
				eate.sourceEntityCodeNamespace = sourceEntity.entityCodeNamespace
			)
		LEFT JOIN
			$prefix$entityType sourceEntityType
		ON
			(sourceEntity.entityGuid = sourceEntityType.entityGuid)

		LEFT JOIN
			$prefix$entity targetEntity
		ON
			(
				eate.targetEntityCode = targetEntity.entityCode
				AND
				eate.targetEntityCodeNamespace = targetEntity.entityCodeNamespace
			)
		LEFT JOIN
			$prefix$entityType targetEntityType
		ON
			(targetEntity.entityGuid = targetEntityType.entityGuid)
		</isEqual>
		
		WHERE
			rel.codingSchemeGuid = #codingSchemeUid,handler=variablePrimaryKeyTypeHandler#

		<isNotNull property="relationsContainerName" prepend="AND">
			rel.containerName = #relationsContainerName#
		</isNotNull>
		
		<isNotEmpty property="associations" prepend="AND">
			(
			<iterate property="associations" conjunction="OR">
				ap.associationName = #associations[]#
			</iterate>
			)
		</isNotEmpty>

		<isNotNull property="sourceCode" prepend="AND">
			eate.sourceEntityCode = #sourceCode#
		</isNotNull>
		<isNotNull property="sourceNamespace" prepend="AND">
			eate.sourceEntityCodeNamespace = #sourceNamespace#
		</isNotNull>
		<isNotNull property="targetCode" prepend="AND">
			eate.targetEntityCode = #targetCode#
		</isNotNull>
		<isNotNull property="targetNamespace" prepend="AND">
			eate.targetEntityCodeNamespace = #targetNamespace#
		</isNotNull>
		
		<isNotEmpty property="mustHaveSourceCodes" prepend="AND">
			(
			<iterate property="mustHaveSourceCodes" conjunction="OR">
				(
					eate.sourceEntityCode = #mustHaveSourceCodes[].code#
					<isNotEmpty property="mustHaveSourceCodes[].namespace" prepend="AND">
						eate.sourceEntityCodeNamespace = #mustHaveSourceCodes[].namespace#
					</isNotEmpty>
				)
			</iterate>
			)
		</isNotEmpty>
		
		<isNotEmpty property="mustHaveTargetCodes" prepend="AND">
			(
			<iterate property="mustHaveTargetCodes" conjunction="OR">
				(
					eate.targetEntityCode = #mustHaveTargetCodes[].code#
					<isNotEmpty property="mustHaveTargetCodes[].namespace" prepend="AND">
						eate.targetEntityCodeNamespace = #mustHaveTargetCodes[].namespace#
					</isNotEmpty>
				)
			</iterate>
			)
		</isNotEmpty>
		<isNotEmpty property="mustHaveSourceNamespaces" prepend="AND">
			(
			<iterate property="mustHaveSourceNamespaces" conjunction="OR">
					(
					eate.sourceEntityCodeNamespace = #mustHaveSourceNamespaces[]#
					)
			</iterate>
			)
		</isNotEmpty>
		<isNotEmpty property="mustHaveTargetNamespaces" prepend="AND">
			(
			<iterate property="mustHaveTargetNamespaces" conjunction="OR">
					(
					eate.targetEntityCodeNamespace = #mustHaveTargetNamespaces[]#
					)
			</iterate>
			)
		</isNotEmpty>
		
		<isNotEmpty property="mustHaveEntityTypes" prepend="AND">
			(
				(
					(
					<iterate property="mustHaveEntityTypes" conjunction="OR">
						sourceEntityType.entityType = #mustHaveEntityTypes[]#
					</iterate>
					)
					OR
					(
						sourceEntityType.entityType IS NULL
					)
				)
				AND
				(
					(
					<iterate property="mustHaveEntityTypes" conjunction="OR">
						targetEntityType.entityType = #mustHaveEntityTypes[]#
					</iterate>
					)
					OR
					(
						targetEntityType.entityType IS NULL
					)
				)	
			)
		</isNotEmpty>
	
		<isNotNull property="restrictToAnonymous" prepend="AND">
			(
				(
				sourceEntity.isAnonymous = #restrictToAnonymous,handler=numericBooleanTypeHandler#
				OR
				sourceEntity.isAnonymous IS NULL
				)
			AND
				(
				targetEntity.isAnonymous = #restrictToAnonymous,handler=numericBooleanTypeHandler#
				OR
				targetEntity.isAnonymous IS NULL
				)
			)
		</isNotNull>
	</sql>
	
	<sql id="getEntityAssnsToEntityRelationships">
		SELECT DISTINCT
			eate.associationPredicateGuid
		FROM
			$prefix$entityAssnsToEntity eate
		LEFT JOIN
			$prefix$entityAssnQuals quals
		ON
			(eate.entityAssnsGuid = quals.referenceGuid)
		<include refid="getRelationshipsFragment"/>
	
		<isNotEmpty property="associationQualifiers" prepend="AND">
			(
			<iterate property="associationQualifiers" conjunction="AND">
				(
				quals.qualifierName = #associationQualifiers[].qualifierName#
				<isNotEmpty property="associationQualifiers[].qualifierValue">
					AND
					quals.qualifierValue = #associationQualifiers[].qualifierValue#
			</isNotEmpty>
				)
			</iterate>
			)
		</isNotEmpty>

	</sql>
	
	<sql id="getEntityAssnsToEntityTrRelationships">
		SELECT DISTINCT
			eate.associationPredicateGuid
		FROM
			$prefix$entityAssnsToEntityTr eate
		<include refid="getRelationshipsFragment"/>
	</sql>
	
	<select id="getCodeRelationships"
				parameterClass="org.lexevs.dao.database.ibatis.association.parameter.GetCodeRelationshipsBean"
				remapResults="true"
				resultClass="string">
		<include refid="getEntityAssnsToEntityRelationships"/>
	
		<isEqual property="useTransitive" compareValue="true">
			UNION
			<include refid="getEntityAssnsToEntityTrRelationships"/>
		</isEqual>
	</select>
	
	<select id="getAssociationPredicateNameForAssociationInstanceId"
				parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter"
				remapResults="true"
				resultClass="string">
			SELECT 
				ap.associationName
			FROM
				$prefix$entityAssnsToEntity eate
			INNER JOIN
				$prefix$associationPredicate ap
			ON
				eate.associationPredicateGuid = ap.associationPredicateGuid
			WHERE
				eate.associationInstanceId = #param1#
				
			UNION 
			
			SELECT 
				ap.associationName
			FROM
				$prefix$entityAssnsToData eatd
			INNER JOIN
				$prefix$associationPredicate ap
			ON
				eatd.associationPredicateGuid = ap.associationPredicateGuid
			WHERE
				eatd.associationInstanceId = #param1#
	</select>
	
	<select id="getRelationContainerNameForAssociationInstanceId"
				parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter"
				remapResults="true"
				resultClass="string">
			SELECT 
				rel.containerName
			FROM
				$prefix$entityAssnsToEntity eate
			INNER JOIN
				$prefix$associationPredicate ap
			ON
				eate.associationPredicateGuid = ap.associationPredicateGuid
			INNER JOIN 
				$prefix$relation rel
			ON
				ap.relationGuid = rel.relationGuid
			WHERE
				eate.associationInstanceId = #param1#
				
			UNION 
			
			SELECT 
				rel.containerName
			FROM
				$prefix$entityAssnsToData eatd
			INNER JOIN
				$prefix$associationPredicate ap
			ON
				eatd.associationPredicateGuid = ap.associationPredicateGuid
			INNER JOIN 
				$prefix$relation rel
			ON
				ap.relationGuid = rel.relationGuid
			WHERE
				eatd.associationInstanceId = #param1#
	</select>
	
	<select id="getRootEntityAssnsToEntityUids"
				parameterClass="org.lexevs.dao.database.ibatis.parameter.SequentialMappedParameterBean"
				remapResults="true"
				resultMap="Entity.noEntityTypeConceptReferenceResult">
		SELECT DISTINCT
			eate1.sourceEntityCode AS entityCode,
			eate1.sourceEntityCodeNamespace AS entityCodeNamespace
			
		<isNotEmpty property="param6" prepend=",">
			<iterate property="param6" conjunction=",">
				$param6[].columnSortType.rootColumn$
				$param6[].order$
			</iterate>
		</isNotEmpty>
		FROM
			$prefix$entityAssnsToEntity eate1

		LEFT JOIN
			<isNotEmpty property="param3">
			(
			</isNotEmpty>
			$prefix$entityAssnsToEntity eate2
			<isNotEmpty property="param3">
			LEFT JOIN 
				$prefix$entityAssnQuals eaq2
			ON
				(eaq2.referenceGuid = eate2.entityAssnsGuid)
			)
			</isNotEmpty>
		ON (
			eate1.sourceEntityCode = eate2.targetEntityCode

			AND
			eate1.sourceEntityCodeNamespace = eate2.targetEntityCodeNamespace

			<isEqual property="param1" compareValue="INDIVIDUALLY">
			AND
			eate1.associationPredicateGuid = eate2.associationPredicateGuid
			</isEqual>
			
			<isEqual property="param1" compareValue="TOGETHER">
			
				<isNotEmpty property="param2" prepend="AND">
				(
					 <iterate property="param2" conjunction="OR"> eate1.associationPredicateGuid = #param2[],handler=variablePrimaryKeyTypeHandler# </iterate>
				)
				AND
				(
					 <iterate property="param2" conjunction="OR"> eate2.associationPredicateGuid = #param2[],handler=variablePrimaryKeyTypeHandler# </iterate>
				)
				</isNotEmpty>		
			
			</isEqual>
			
			<isNotEmpty property="param3" prepend="AND">
			(
			<iterate property="param3" conjunction="OR"> 
				eaq2.qualifierName = #param3[].qualifierName#
				
				<isNotEmpty property="param3[].qualifierValue" prepend="AND">
					eaq2.qualifierValue = #param3[].qualifierValue#
				</isNotEmpty>
			</iterate>
			)
			</isNotEmpty>
			
<!--			<isNotEmpty property="param4" prepend="AND">-->
<!--			(-->
<!--				<iterate property="param4" conjunction="AND"> -->
<!--					eate1.sourceEntityCodeNamespace != #param4[]#-->
<!--				</iterate>-->
<!--			)-->
<!--			</isNotEmpty>-->
			
			)	
		<isNotEmpty property="param3">
			LEFT JOIN
				$prefix$entityAssnQuals eaq1
			ON
				eate1.entityAssnsGuid = eaq1.referenceGuid
		</isNotEmpty>
		
		WHERE
			eate2.entityAssnsGuid IS NULL	
			
			<isNotEmpty property="param3" prepend="AND">
			(
			<iterate property="param3" conjunction="OR"> 
				eaq1.qualifierName = #param3[].qualifierName#
				
				<isNotEmpty property="param3[].qualifierValue" prepend="AND">
					eaq1.qualifierValue = #param3[].qualifierValue#
				</isNotEmpty>
			</iterate>
			)
			</isNotEmpty>

			<isNotEmpty property="param2" prepend="AND">
				eate1.associationPredicateGuid IN ( <iterate property="param2" conjunction=",">#param2[],handler=variablePrimaryKeyTypeHandler#</iterate> )
			</isNotEmpty>	
			
			<isNotEmpty property="param4" prepend="AND">
			(
				<iterate property="param4" conjunction="OR"> 
					eate1.sourceEntityCodeNamespace = #param4[]#
				</iterate>
			)
			</isNotEmpty>
			
			<isNotEmpty property="param5" prepend="AND">
			(
				<iterate property="param5" conjunction="OR"> 
					eate1.targetEntityCodeNamespace = #param5[]#
				</iterate>
			)
			</isNotEmpty>

		<isNotEmpty property="param6">
			ORDER BY
			<iterate property="param6" conjunction=",">
				$param6[].columnSortType.rootColumn$
				$param6[].order$
			</iterate>
		</isNotEmpty>
	</select>
	
	<select id="getTailEntityAssnsToEntityUids"
				parameterClass="org.lexevs.dao.database.ibatis.parameter.SequentialMappedParameterBean"
				remapResults="true"
				resultMap="Entity.noEntityTypeConceptReferenceResult">
		SELECT DISTINCT
			eate1.targetEntityCode AS entityCode,
			eate1.targetEntityCodeNamespace AS entityCodeNamespace
		<isNotEmpty property="param6" prepend=",">
			<iterate property="param6" conjunction=",">
				$param6[].columnSortType.tailColumn$
				$param6[].order$
			</iterate>
		</isNotEmpty>
		FROM
			$prefix$entityAssnsToEntity eate1
		
		LEFT JOIN
			<isNotEmpty property="param3">
			(
			</isNotEmpty>
			$prefix$entityAssnsToEntity eate2
			<isNotEmpty property="param3">
			LEFT JOIN 
				$prefix$entityAssnQuals eaq2
			ON
				(eaq2.referenceGuid = eate2.entityAssnsGuid)
			)
			</isNotEmpty>
		ON (
			eate1.targetEntityCode = eate2.sourceEntityCode
		
			AND
			eate1.targetEntityCodeNamespace = eate2.sourceEntityCodeNamespace
			
			<isEqual property="param1" compareValue="INDIVIDUALLY">
			AND
			eate1.associationPredicateGuid = eate2.associationPredicateGuid
			</isEqual>
			
			<isEqual property="param1" compareValue="TOGETHER">
		
				<isNotEmpty property="param2" prepend="AND">
				(
					 <iterate property="param2" conjunction="OR"> eate1.associationPredicateGuid = #param2[],handler=variablePrimaryKeyTypeHandler# </iterate>
				)
				AND
				(
					 <iterate property="param2" conjunction="OR"> eate2.associationPredicateGuid = #param2[],handler=variablePrimaryKeyTypeHandler# </iterate>
				)
				</isNotEmpty>		
			
			</isEqual>
			
			<isNotEmpty property="param3" prepend="AND">
			(
			<iterate property="param3" conjunction="OR"> 
				eaq2.qualifierName = #param3[].qualifierName#
				
				<isNotEmpty property="param3[].qualifierValue" prepend="AND">
					eaq2.qualifierValue = #param3[].qualifierValue#
				</isNotEmpty>
			</iterate>
			)
			</isNotEmpty>
			
<!--			<isNotEmpty property="param4" prepend="AND">-->
<!--			(-->
<!--				<iterate property="param4" conjunction="AND"> -->
<!--					eate1.sourceEntityCodeNamespace != #param4[]#-->
<!--				</iterate>-->
<!--			)-->
<!--			</isNotEmpty>-->
			)
			
		<isNotEmpty property="param3">
			LEFT JOIN
				$prefix$entityAssnQuals eaq1
			ON
				eate1.entityAssnsGuid = eaq1.referenceGuid
		</isNotEmpty>
		WHERE
			eate2.entityAssnsGuid IS NULL	
			
			<isNotEmpty property="param3" prepend="AND">
			(
			<iterate property="param3" conjunction="OR"> 
				eaq1.qualifierName = #param3[].qualifierName#
				
				<isNotEmpty property="param3[].qualifierValue" prepend="AND">
					eaq1.qualifierValue = #param3[].qualifierValue#
				</isNotEmpty>
			</iterate>
			)
			</isNotEmpty>

			<isNotEmpty property="param2" prepend="AND">
				eate1.associationPredicateGuid IN ( <iterate property="param2" conjunction=",">#param2[],handler=variablePrimaryKeyTypeHandler#</iterate> )
			</isNotEmpty>	
			
			<isNotEmpty property="param4" prepend="AND">
			(
				<iterate property="param4" conjunction="OR"> 
					eate1.sourceEntityCodeNamespace = #param4[]#
				</iterate>
			)
			</isNotEmpty>
			
			<isNotEmpty property="param5" prepend="AND">
			(
				<iterate property="param5" conjunction="OR"> 
					eate1.targetEntityCodeNamespace = #param5[]#
				</iterate>
			)
		</isNotEmpty>
			<isNotEmpty property="param6">
			ORDER BY
			<iterate property="param6" conjunction=",">
				$param6[].columnSortType.tailColumn$
				$param6[].order$
			</iterate>
		</isNotEmpty>
			
	</select>
  
  	<select id="getEntityAssnsToEntityUids"
				parameterClass="org.lexevs.dao.database.ibatis.association.parameter.GetEntityAssnUidsBean"
				remapResults="true"
				resultMap="Common.uidResult">
		SELECT DISTINCT 
			(eate.entityAssnsGuid) AS uidKey
			
		<isNotEmpty property="sorts" prepend=",">
			<iterate property="sorts" conjunction=",">
				<isEqual property="tripleNode" compareValue="SUBJECT">
					$sorts[].columnSortType.subjectColumn$
				</isEqual>
				<isEqual property="tripleNode" compareValue="OBJECT">
					$sorts[].columnSortType.objectColumn$
				</isEqual>
			</iterate>
		</isNotEmpty>
		
		<include refid="getEntityAssnsToEntityUidsFragment"/>
		<include refid="restrictEntityAssnsToEntityUidsBySingleCodeFragment"/>
		
		<isNotEmpty property="sorts">
			ORDER BY
			<iterate property="sorts" conjunction=",">
				<isEqual property="tripleNode" compareValue="SUBJECT">
					$sorts[].columnSortType.subjectColumn$
				</isEqual>
				<isEqual property="tripleNode" compareValue="OBJECT">
					$sorts[].columnSortType.objectColumn$
				</isEqual>
				$sorts[].order$
			</iterate>
		</isNotEmpty>
	</select>
	
	<select id="getEntityAssnsToEntityUidsCount"
				parameterClass="org.lexevs.dao.database.ibatis.association.parameter.GetEntityAssnUidsCountBean"
				resultMap="countResult">
		SELECT 
			COUNT( DISTINCT eate.entityAssnsGuid ) AS relationshipsCount,
			ap.associationName AS associationName
		<include refid="getEntityAssnsToEntityUidsFragment"/>
		<include refid="restrictEntityAssnsToEntityUidsBySingleCodeFragment"/>
		GROUP BY
			associationName
	</select>
	
	<select id="getCountConceptReferences"
				parameterClass="org.lexevs.dao.database.ibatis.association.parameter.GetEntityAssnUidsCountBean"
				resultMap="countConceptReferenceResult">
		SELECT 
			COUNT( DISTINCT eate.entityAssnsGuid ) AS relationshipsCount,
			<isEqual property="tripleNode" compareValue="SUBJECT">
				eate.sourceEntityCode AS entityCode,
				eate.sourceEntityCodeNamespace AS entityCodeNamespace
			</isEqual>
			<isEqual property="tripleNode" compareValue="OBJECT">
				eate.targetEntityCode AS entityCode,
				eate.targetEntityCodeNamespace AS entityCodeNamespace
			</isEqual>
			
		<include refid="getEntityAssnsToEntityUidsFragment"/>
		<include refid="restrictEntityAssnsToEntityUidsByMultipleCodesFragment"/>
		
		AND
			eate.sourceEntityCode NOT IN ('@' , '@@')
		AND
			eate.targetEntityCode NOT IN ('@' , '@@')
		
		GROUP BY
			<isEqual property="tripleNode" compareValue="SUBJECT">
				eate.sourceEntityCode,
				eate.sourceEntityCodeNamespace
			</isEqual>
			<isEqual property="tripleNode" compareValue="OBJECT">
				eate.targetEntityCode,
				eate.targetEntityCodeNamespace
			</isEqual>
	</select>
	
	<select id="getConceptReferences"
				parameterClass="org.lexevs.dao.database.ibatis.association.parameter.GetEntityAssnUidsCountBean"
				resultMap="Entity.noEntityTypeConceptReferenceResult">
		SELECT 
			<isEqual property="tripleNode" compareValue="SUBJECT">
				eate.targetEntityCode AS entityCode,
				eate.targetEntityCodeNamespace AS entityCodeNamespace
			</isEqual>
			<isEqual property="tripleNode" compareValue="OBJECT">
				eate.sourceEntityCode AS entityCode,
				eate.sourceEntityCodeNamespace AS entityCodeNamespace
			</isEqual>
			
		<include refid="getEntityAssnsToEntityUidsFragment"/>
		<include refid="restrictEntityAssnsToEntityUidsByMultipleCodesFragment"/>
		
		AND
			eate.sourceEntityCode NOT IN ('@' , '@@')
		AND
			eate.targetEntityCode NOT IN ('@' , '@@')
		
		GROUP BY
			<isEqual property="tripleNode" compareValue="SUBJECT">
				eate.targetEntityCode,
				eate.targetEntityCodeNamespace
			</isEqual>
			<isEqual property="tripleNode" compareValue="OBJECT">
				eate.sourceEntityCode,
				eate.sourceEntityCodeNamespace
			</isEqual>
		<isNotEmpty property="sorts">
		ORDER BY
			<iterate property="sorts" conjunction=",">
				<isEqual property="tripleNode" compareValue="SUBJECT">
					$sorts[].columnSortType.subjectColumn$
				</isEqual>
				<isEqual property="tripleNode" compareValue="OBJECT">
					$sorts[].columnSortType.objectColumn$
				</isEqual>
				$sorts[].order$
			</iterate>
		</isNotEmpty>
	</select>
	
	<select id="getDistinctSources" 
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter"
		remapResults="true" 
		resultMap="nodeResult">
		SELECT DISTINCT
			sourceEntityCode AS entityCode,
			sourceEntityCodeNamespace AS entityCodeNamespace
		FROM 
			$prefix$entityAssnsToEntity
		WHERE
			associationPredicateGuid = #param1,handler=variablePrimaryKeyTypeHandler#
	</select>
	
	<select id="getDistinctTargets" 
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter"
		remapResults="true" 
		resultMap="nodeResult">
		SELECT DISTINCT
			targetEntityCode AS entityCode,
			targetEntityCodeNamespace AS entityCodeNamespace
		FROM 
			$prefix$entityAssnsToEntity
		WHERE
			associationPredicateGuid = #param1,handler=variablePrimaryKeyTypeHandler#
	</select>
	
	<select id="getTargetsOfSource" 
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTriple"
		remapResults="true" 
		resultMap="nodeResult">
		SELECT
			targetEntityCode AS entityCode,
			targetEntityCodeNamespace AS entityCodeNamespace
		FROM 
			$prefix$entityAssnsToEntity
		WHERE
			associationPredicateGuid = #param1,handler=variablePrimaryKeyTypeHandler#
		AND
			sourceEntityCode = #param2#
		AND
			sourceEntityCodeNamespace = #param3#		
	</select>
	
	
	<select id="getSourcesOfTarget" 
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTriple"
		remapResults="true" 
		resultMap="nodeResult">
		SELECT
			sourceEntityCode AS entityCode,
			sourceEntityCodeNamespace AS entityCodeNamespace
		FROM 
			$prefix$entityAssnsToEntity
		WHERE
			associationPredicateGuid = #param1,handler=variablePrimaryKeyTypeHandler#
		AND
			targetEntityCode = #param2#
		AND
			targetEntityCodeNamespace = #param3#		
	</select>
	
	<select id="getValueSetHierarchySourcesOfTargets" 
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterQuint"
		remapResults="true" 
		resultMap="valueSetHierarchyRootNodeResolution">
		SELECT
			assns.sourceEntityCode AS entityCode,
			assns.sourceEntityCodeNamespace AS namespace,
			ent.description AS description,
			CASE prop.propertyName
			WHEN  #param3# THEN prop.propertyValue
			END AS source,
			CASE prop2.propertyName
			WHEN #param4# THEN prop2.propertyValue
			END AS publish
		FROM 
			$prefix$entityAssnsToEntity assns
		LEFT JOIN
			$prefix$entity ent
		ON
			ent.entityCode = sourceEntityCode
		LEFT JOIN 
			$prefix$property prop 
		ON
			ent.entityGuid = prop.referenceGuid
		LEFT JOIN
			$prefix$property prop2
		ON
			prop2.referenceGuid = prop.referenceGuid
		WHERE
			associationPredicateGuid = #param1,handler=variablePrimaryKeyTypeHandler#
		AND
			targetEntityCode = #param2#
		AND (
			prop.propertyName = #param3#
		OR
			prop2.propertyName = #param4# )
		GROUP BY
			description, publish, source having publish = #param5#
	</select>
	
	<select id="getValueSetEntitiesFromCode"
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple"
		remapResults="true" resultMap="vsEntityResult">
		SELECT
			ent.entityGuid, 
			ent.entityCode, 
			ent.entityCodeNamespace,
			 ent.isDefined, 
			 ent.isAnonymous, 
			 ent.description, 
			 ent.isActive, 
			 ent.owner, 
			 ent.status, 
			 ent.effectiveDate, 
			 ent.expirationDate
		FROM
		 	$prefix$entityAssnsToEntity  assns 
		JOIN 
			$prefix$entity ent 
		ON 
			assns.sourceEntityCode = ent.entityCode
		WHERE
			assns.associationPredicateGuid = #param1#
		AND
		 	assns.targetEntityCode = #param2#
	</select>
	
	<select id="getValueSetTopNodesFromMemberCode"
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple"
		remapResults="true" resultMap="vsEntityResult">
		SELECT
			ent.entityGuid, 
			ent.entityCode, 
			ent.entityCodeNamespace,
			 ent.isDefined, 
			 ent.isAnonymous, 
			 ent.description, 
			 ent.isActive, 
			 ent.owner, 
			 ent.status, 
			 ent.effectiveDate, 
			 ent.expirationDate
		FROM
		 	$prefix$entityAssnsToEntity  assns 
		JOIN 
			$prefix$entity ent 
		ON 
			assns.targetEntityCode = ent.entityCode
		WHERE
			assns.associationPredicateGuid = #param1#
		AND
		 	assns.sourceEntityCode = #param2#
	</select>
	
	<select id="getVSEntityUids"
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter"
		remapResults="true" resultMap="Common.uidResult">
		SELECT
			ent.entityGuid AS uidKey
		FROM
		 	$prefix$entityAssnsToEntity  assns 
		JOIN 
			$prefix$entity ent 
		ON 
			assns.sourceEntityCode = ent.entityCode
		WHERE
			assns.associationPredicateGuid  = #param1#
		GROUP BY
			ent.entityGuid
	</select>
	
	<select id="getVSEntityUidsForTopNodeCode"
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple"
		remapResults="true" resultMap="Common.uidResult">
		SELECT
			ent.entityGuid AS uidKey
		FROM
		 	$prefix$entityAssnsToEntity  assns 
		JOIN 
			$prefix$entity ent 
		ON 
			assns.sourceEntityCode = ent.entityCode
		WHERE
			assns.associationPredicateGuid  = #param1#
		AND
			assns.targetEntityCode = #param2#
		GROUP BY
			ent.entityGuid
	</select>
	
	<select id="getVSTopNodeEntityByCode"
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple" 
		resultMap="vsEntityResultWithProperties"
		remapResults="true">
		SELECT 
			 ent.entityGuid, 
			 ent.entityCode, 
			 ent.entityCodeNamespace,
			 ent.isDefined, 
			 ent.isAnonymous, 
			 ent.description, 
			 ent.isActive, 
			 ent.owner, 
			 ent.status, 
			 ent.effectiveDate, 
			 ent.expirationDate,
			 prop.propertyName, 
			 prop.propertyValue  
		FROM 
			$prefix$entity ent 
		JOIN 
			$prefix$property prop 
		ON 
			entityGuid = referenceGuid 
		WHERE
			codingSchemeGuid = #param1,handler=variablePrimaryKeyTypeHandler#
		AND
			entityCode = #param2#
   </select>
   
   <select id="getVSEntityCount"
   		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple" 
		resultMap="vsEntityCount"
		remapResults="true">
		SELECT 
			 count(*) AS vsEntityCount
			FROM
		 	$prefix$entityAssnsToEntity  assns 
		WHERE
			assns.associationPredicateGuid  = #param1#
		AND
			assns.targetEntityCode = #param2#
   </select>
   
   
   <select id="getAllValidValueSetTopNodes" parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTriple"
		remapResults="true" resultMap="definedNodeResolution">
		SELECT
			assns.targetEntityCode AS entityCode,
			assns.targetEntityCodeNamespace AS namespace,
			ent.description AS description
		FROM 
			$prefix$entityAssnsToEntity assns
		LEFT JOIN
			$prefix$entity ent
		ON
			ent.entityCode = assns.targetEntityCode
		LEFT JOIN 
			$prefix$property prop 
		ON
			ent.entityGuid = prop.referenceGuid
		WHERE
			associationPredicateGuid = #param1#
 		AND
			prop.propertyName = #param2#
		AND 
			prop.propertyValue = #param3#
		GROUP BY
			assns.targetEntityCode,
			assns.targetEntityCodeNamespace,
			ent.description
   </select>
	
	<select id="getEntryStateUidByAssociationTarget"
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter"
		remapResults="true" resultMap="Common.uidResult">
		SELECT 
			eate.entryStateGuid AS uidKey
		FROM
			$prefix$entityAssnsToEntity eate
		WHERE
			eate.entityAssnsGuid = #param1,handler=variablePrimaryKeyTypeHandler# 
	</select>
    
	<select id="getAssnTargetAttributesByUId"
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter"
		remapResults="true" resultMap="associationTargetEntry">
		SELECT 
			entAssn.entityAssnsGuid,
			entAssn.associationPredicateGuid,
			entAssn.sourceEntityCode,
			entAssn.sourceEntityCodeNamespace,
			entAssn.targetEntityCode,
			entAssn.targetEntityCodeNamespace,
			entAssn.associationInstanceId,
			entAssn.isDefining,
			entAssn.isInferred,
			entAssn.isActive,
			entAssn.owner,
			entAssn.status,
			entAssn.effectiveDate,
			entAssn.expirationDate,
			entAssn.entryStateGuid,
			quals.entityAssnQualsGuid,
			quals.referenceGuid,
			quals.qualifierName,
			quals.qualifierValue,
			quals.entryStateGuid esGuid
		FROM
			$prefix$entityAssnsToEntity entAssn
		LEFT JOIN
			$prefix$entityAssnQuals quals
		ON
			entAssn.entityAssnsGuid = quals.referenceGuid
		WHERE
			entAssn.entityAssnsGuid = #param1,handler=variablePrimaryKeyTypeHandler# 
			
	</select>
	
	<sql id="getTripleFragment">
		SELECT 
			entAssn.sourceEntityCode,
			entAssn.sourceEntityCodeNamespace,
			entAssn.targetEntityCode,
			entAssn.targetEntityCodeNamespace,
			entAssn.associationInstanceId,
			entAssn.isDefining,
			entAssn.isInferred,
			entAssn.isActive,
			entAssn.owner,
			entAssn.status,
			entAssn.effectiveDate,
			entAssn.expirationDate,
			
			entryState.changeType,
  			entryState.relativeOrder,
  			
  			currentRevision.revisionId AS currentRevisionId,
  			previousRevision.revisionId AS previousRevisionId

		FROM
			$prefix$entityAssnsToEntity entAssn
			
		LEFT JOIN
			$actualTableSetPrefix$entryState entryState
		ON
			entAssn.entryStateGuid =
			entryState.entryStateGuid	
			
		LEFT JOIN
			${defaultPrefix}revision currentRevision
		ON 
			entryState.revisionGuid = currentRevision.revisionGuid
			
		LEFT JOIN
			${defaultPrefix}revision previousRevision
		ON 
			entryState.prevRevisionGuid = previousRevision.revisionGuid	
	</sql>
	
	<select id="getTripleByUid"
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter"
		remapResults="true" resultMap="associationSourceTripleEntry">
		<include refid="getTripleFragment"/>
		WHERE
			entAssn.entityAssnsGuid = #param1,handler=variablePrimaryKeyTypeHandler# 	
	</select>
	
	<select id="getHistoryTripleByUidAndRevisionId"
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple"
		remapResults="true" resultMap="associationSourceTripleEntry">
		<include refid="getTripleFragment"/>
		WHERE
			entAssn.entityAssnsGuid = #param1,handler=variablePrimaryKeyTypeHandler# 	
		AND
			currentRevision.revisionId = #param2#		
	</select>

	<update id="updateEntityAssnToEntityByUId"
		parameterClass="org.lexevs.dao.database.ibatis.association.parameter.InsertOrUpdateAssociationTargetBean">
		UPDATE
			$prefix$entityAssnsToEntity
		SET
		<dynamic prepend=" ">
			<isNotNull prepend="," property="associationSource.sourceEntityCode">
				sourceEntityCode = #associationSource.sourceEntityCode#
			</isNotNull>
			<isNotNull prepend="," property="associationSource.sourceEntityCodeNamespace">
				sourceEntityCodeNamespace = #associationSource.sourceEntityCodeNamespace#
			</isNotNull>
			<isNotNull prepend="," property="associationTarget.targetEntityCode">
				targetEntityCode = #associationTarget.targetEntityCode#
			</isNotNull>
			<isNotNull prepend="," property="associationTarget.targetEntityCodeNamespace">
				targetEntityCodeNamespace = #associationTarget.targetEntityCodeNamespace#
			</isNotNull>
			<isNotNull prepend="," property="associationTarget.isDefining">
				isDefining = #associationTarget.isDefining,handler=numericBooleanTypeHandler#
			</isNotNull>
			<isNotNull prepend="," property="associationTarget.isInferred">
				isInferred = #associationTarget.isInferred,handler=numericBooleanTypeHandler#
			</isNotNull>
			<isNotNull prepend="," property="entryStateUId">
				entryStateGuid = #entryStateUId,handler=variablePrimaryKeyTypeHandler#
			</isNotNull>
		</dynamic>
		WHERE
			entityAssnsGuid = #uid,handler=variablePrimaryKeyTypeHandler#
	</update>
	
	<update id="updateEntityAssnToEntityVerAttribByUId"
		parameterClass="org.lexevs.dao.database.ibatis.association.parameter.InsertOrUpdateAssociationTargetBean">
		UPDATE
			$prefix$entityAssnsToEntity
		SET
		<dynamic prepend=" ">
			<isNotNull prepend="," property="associationTarget.isActive">
				isActive =
				#associationTarget.isActive,handler=numericBooleanTypeHandler#
			</isNotNull>
			<isNotNull prepend="," property="associationTarget.owner">
				owner = #associationTarget.owner#
			</isNotNull>
			<isNotNull prepend="," property="associationTarget.status">
				status = #associationTarget.status#
			</isNotNull>
			<isNotNull prepend="," property="associationTarget.effectiveDate">
				effectiveDate =
				#associationTarget.effectiveDate#
			</isNotNull>
			<isNotNull prepend="," property="associationTarget.expirationDate">
				expirationDate =
				#associationTarget.expirationDate#
			</isNotNull>
			<isNotNull prepend="," property="entryStateUId">
				entryStateGuid = #entryStateUId,handler=variablePrimaryKeyTypeHandler#
			</isNotNull>
		</dynamic>
		WHERE
			entityAssnsGuid = #uid,handler=variablePrimaryKeyTypeHandler#
	</update>	
	
	<delete id="deleteAssocTargetByAssnUId" parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter">
		DELETE FROM
			$prefix$entityAssnsToEntity
		WHERE
			entityAssnsGuid = #param1,handler=variablePrimaryKeyTypeHandler#
	</delete>
	
	<select id="getAssociationTargetLatestRevisionIdByUId" remapResults="true"
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter"
		resultClass="string">
		SELECT 
			rev.revisionId
		FROM
			$prefix$entityAssnsToEntity entAssnEnt,
			$prefix$entryState es,
			${defaultPrefix}revision rev
		WHERE
			entAssnEnt.entityAssnsGuid = #param1,handler=variablePrimaryKeyTypeHandler#	
		AND
			entAssnEnt.entryStateGuid = es.entryStateGuid	
		AND
			es.revisionGuid = rev.revisionGuid	
	</select> 
	
	<sql id="getTripleUidsForMappingContainerPre">
			SELECT
			eate.entityAssnsGuid AS uidKey
		FROM
			$prefix$entityAssnsToEntity eate
			
		INNER JOIN
			$prefix$associationPredicate ap
		ON 
			eate.associationPredicateGuid = ap.associationPredicateGuid
			
		INNER JOIN
			$prefix$relation rel
		ON 
			ap.relationGuid = rel.relationGuid
			
		<isNotNull property="sourceCodingSchemeUid">
			LEFT JOIN
				$sourceSchemePrefix$entity sourceEntity
			ON (
				sourceEntity.entityCode = eate.sourceEntityCode
				
				<!-- We can't count on namespaces being the same across coding schemes.
					 We'd have to join with the supported attrib table to get the ns uri,
					 which could be expensive. For now, disregard namespace.
				AND
				sourceEntity.entityCodeNamespace = eate.sourceEntityCodeNamespace
				-->
				AND
				sourceEntity.codingSchemeGuid = #sourceCodingSchemeUid#
				)
		</isNotNull>
		<isNotNull property="targetCodingSchemeUid">
			LEFT JOIN
				$targetSchemePrefix$entity targetEntity
			ON (
				targetEntity.entityCode = eate.targetEntityCode
				
				<!-- We can't count on namespaces being the same across coding schemes.
					 We'd have to join with the supported attrib table to get the ns uri,
					 which could be expensive. For now, disregard namespace.
				AND
				targetEntity.entityCodeNamespace = eate.targetEntityCodeNamespace
				-->
				AND
				targetEntity.codingSchemeGuid = #targetCodingSchemeUid#
				)
		</isNotNull>
		
		<isNotEmpty property="sortList">
			<iterate property="sortList">
				<isPropertyAvailable property="sortList[].qualifierName">
				LEFT JOIN
					$prefix$entityAssnQuals $sortList[].tableAlias$
				ON (
					eate.entityAssnsGuid = $sortList[].tableAlias$.referenceGuid
					AND
					$sortList[].tableAlias$.qualifierName = #sortList[].qualifierName#
					AND
					$sortList[].tableAlias$.qualifierValue =
						(SELECT 
							<isEqual property="sortList[].order" compareValue="ASC">
							MAX(
							</isEqual>
							<isEqual property="sortList[].order" compareValue="DESC">
							MIN(
							</isEqual>
								maxQual.qualifierValue)
						FROM
							$prefix$entityAssnQuals maxQual
						WHERE
							maxQual.referenceGuid = eate.entityAssnsGuid
						AND
							maxQual.qualifierName = #sortList[].qualifierName#
						)
					)
				</isPropertyAvailable>
			</iterate>
		</isNotEmpty>

		WHERE
			rel.codingSchemeGuid = #mappingCodingSchemeUid#
		AND
			rel.containerName = #relationsContainerName#
	</sql>
	
	<sql id="getTripleUidsForMappingContainerPost">
		<isNotEmpty property="sortList">
			ORDER BY
				<iterate property="sortList" conjunction=",">
					<isNotPropertyAvailable property="sortList[].qualifierName">
						$sortList[].columnSortType.mappingColumn$
						$sortList[].order$
					</isNotPropertyAvailable>
					<isPropertyAvailable property="sortList[].qualifierName">
						$sortList[].tableAlias$.$sortList[].columnSortType.mappingColumn$
						$sortList[].order$
					</isPropertyAvailable>
				</iterate>
			</isNotEmpty>
	</sql>
	
	<select id="getTripleUidsForMappingContainer" remapResults="true"
		parameterClass="org.lexevs.dao.database.ibatis.codednodegraph.IbatisCodedNodeGraphDao$MappingTripleParameterBean"
		resultMap="Common.uidResult">
		<include refid="getTripleUidsForMappingContainerPre"/>
		<include refid="getTripleUidsForMappingContainerPost"/>	
	</select>
	
	<select id="getCompleteInstanceToGuidMap" remapResults="true"
	parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedTableParameterBean" 
	resultMap="instanceToGuidMapResult" >
		SELECT
			eae.associationInstanceId as instance,
			eae.entityAssnsGuid as value
		FROM
			$prefix$entityAssnsToEntity eae
	</select>
	
	<select id="getTripleUidsForMappingContainerAndCodesWithSort" remapResults="true"
		parameterClass="org.lexevs.dao.database.ibatis.codednodegraph.IbatisCodedNodeGraphDao$RestrictingMappingTripleParameterBean"
		resultMap="Common.uidResult">
		<include refid="getTripleUidsForMappingContainerPre"/>
			<isNotEmpty property="sourceConceptReferences" prepend="AND">
			eate.sourceEntityCode IN ( <iterate property="sourceConceptReferences" conjunction=",">#sourceConceptReferences[].code#</iterate> )
			</isNotEmpty>
	
			<isNotEmpty property="targetConceptReferences" prepend="AND">
			eate.targetEntityCode IN ( <iterate property="targetConceptReferences" conjunction=",">#targetConceptReferences[].code#</iterate> )
			</isNotEmpty>
			
			<isNotEmpty property="sourceOrTargetConceptReferences" prepend="AND">
			(
				eate.sourceEntityCode IN ( <iterate property="sourceOrTargetConceptReferences" conjunction=",">#sourceOrTargetConceptReferences[].code#</iterate> )
				
				OR
				
				eate.targetEntityCode IN ( <iterate property="sourceOrTargetConceptReferences" conjunction=",">#sourceOrTargetConceptReferences[].code#</iterate> )
			)
			</isNotEmpty>
		<include refid="getTripleUidsForMappingContainerPost"/>	
	</select>
	
	<select id="getTripleUidsForMappingContainerAndCodesNoSort" remapResults="true"
		parameterClass="org.lexevs.dao.database.ibatis.parameter.SequentialMappedParameterBean"
		resultMap="Common.uidResult">
		
		SELECT
			eate.entityAssnsGuid AS uidKey
		FROM
			$prefix$entityAssnsToEntity eate
			
		INNER JOIN
			$prefix$associationPredicate ap
		ON 
			(eate.associationPredicateGuid = ap.associationPredicateGuid)
			
		INNER JOIN
			$prefix$relation rel
		ON 
			(ap.relationGuid = rel.relationGuid)
		
		WHERE
			rel.codingSchemeGuid = #param1#
		AND
			rel.containerName = #param2#

			<isNotEmpty property="param3" prepend="AND">
			eate.sourceEntityCode IN ( <iterate property="param3" conjunction=",">#param3[].code#</iterate> )
			</isNotEmpty>
	
			<isNotEmpty property="param4" prepend="AND">
			eate.targetEntityCode IN ( <iterate property="param4" conjunction=",">#param4[].code#</iterate> )
			</isNotEmpty>
			
			<isNotEmpty property="param5" prepend="AND">
			(
				eate.sourceEntityCode IN ( <iterate property="param5" conjunction=",">#param5[].code#</iterate> )
				
				OR
				
				eate.targetEntityCode IN ( <iterate property="param5" conjunction=",">#param5[].code#</iterate> )
			)
			</isNotEmpty>	
	</select>
	
	<select id="getTriplesForMappingContainer" remapResults="true"
		parameterClass="org.lexevs.dao.database.ibatis.parameter.SequentialMappedParameterBean"
		resultMap="mappingTripleSubjectResult">
		SELECT
			eate.entityAssnsGuid AS tripleUid,

			eate.sourceEntityCode AS sourceEntityCode,
			sourceEntity.entityCodeNamespace AS sourceEntityCodeNamespace,
			<isNotNull property="param2">
				sourceEntity.description AS sourceEntityDescription,
			</isNotNull>
			<isNull property="param2">
				NULL AS sourceEntityDescription,
			</isNull>
			
			eate.targetEntityCode AS targetEntityCode,
			targetEntity.entityCodeNamespace AS targetEntityCodeNamespace,
			<isNotNull property="param4">
				targetEntity.description AS targetEntityDescription,
			</isNotNull>
			<isNull property="param4">
				NULL AS targetEntityDescription,
			</isNull>
			
			ap.associationName AS associationName,
			
			quals.qualifierName,
			quals.qualifierValue
		FROM
			$prefix$entityAssnsToEntity eate
			
		INNER JOIN
			$prefix$associationPredicate ap
		ON 
			eate.associationPredicateGuid = ap.associationPredicateGuid
			
		INNER JOIN
			$prefix$relation rel
		ON 
			ap.relationGuid = rel.relationGuid
			
		<isNotNull property="param2">
		LEFT JOIN
			$param3$entity sourceEntity
			ON (
				sourceEntity.entityCode = eate.sourceEntityCode
				<!-- We can't count on namespaces being the same across coding schemes.
					 We'd have to join with the supported attrib table to get the ns uri,
					 which could be expensive. For now, disregard namespace.
				AND
				sourceEntity.entityCodeNamespace = eate.sourceEntityCodeNamespace
				-->
				AND
				sourceEntity.codingSchemeGuid = #param2#
				)
		</isNotNull>
		<isNotNull property="param4">
		LEFT JOIN
			$param5$entity targetEntity
			ON (
				targetEntity.entityCode = eate.targetEntityCode
				<!-- We can't count on namespaces being the same across coding schemes.
					 We'd have to join with the supported attrib table to get the ns uri,
					 which could be expensive. For now, disregard namespace.
				AND
				targetEntity.entityCodeNamespace = eate.targetEntityCodeNamespace
				-->
				AND
				targetEntity.codingSchemeGuid = #param4#
				)
		</isNotNull>
		
		LEFT JOIN
			$prefix$entityAssnQuals quals
		ON (eate.entityAssnsGuid = quals.referenceGuid)
		
		WHERE
			eate.entityAssnsGuid IN ( <iterate property="param7" conjunction=",">#param7[],handler=variablePrimaryKeyTypeHandler#</iterate> )
		AND
			rel.codingSchemeGuid = #param1#
		AND
			rel.containerName = #param6#
	</select>
	
	<sql id="getTriplesForMappingContainerCountFragment">
		SELECT
			COUNT(eate.entityAssnsGuid)
		FROM
			$prefix$entityAssnsToEntity eate
			
		INNER JOIN
			$prefix$associationPredicate ap
		ON 
			(eate.associationPredicateGuid = ap.associationPredicateGuid)
			
		INNER JOIN
			$prefix$relation rel
		ON 
			(ap.relationGuid = rel.relationGuid)
	</sql>
	
	<select id="getTriplesForMappingContainerCount" remapResults="true"
		parameterClass="org.lexevs.dao.database.ibatis.parameter.SequentialMappedParameterBean"
		resultClass="int">
		<include refid="getTriplesForMappingContainerCountFragment"/>
		WHERE
			rel.codingSchemeGuid = #param1#
		AND
			rel.containerName = #param2#	
	</select>
	
	<select id="getTriplesForMappingContainerAndCodesCount" remapResults="true"
		parameterClass="org.lexevs.dao.database.ibatis.parameter.SequentialMappedParameterBean"
		resultClass="int">
		<include refid="getTriplesForMappingContainerCountFragment"/>
		
		WHERE
			rel.codingSchemeGuid = #param1#
		AND
			rel.containerName = #param2#

			<isNotEmpty property="param3" prepend="AND">
			eate.sourceEntityCode IN ( <iterate property="param3" conjunction=",">#param3[].code#</iterate> )
			</isNotEmpty>
	
			<isNotEmpty property="param4" prepend="AND">
			eate.targetEntityCode IN ( <iterate property="param4" conjunction=",">#param4[].code#</iterate> )
			</isNotEmpty>
			
			<isNotEmpty property="param5" prepend="AND">
			(
				eate.sourceEntityCode IN ( <iterate property="param5" conjunction=",">#param5[].code#</iterate> )
				
				OR
				
				eate.targetEntityCode IN ( <iterate property="param5" conjunction=",">#param5[].code#</iterate> )
			)
			</isNotEmpty>
	</select>
	
	<select id="getCodeMappingParticipationCount" remapResults="true"
		parameterClass="org.lexevs.dao.database.ibatis.parameter.SequentialMappedParameterBean"
		resultClass="int">
		SELECT
			COUNT(*)
		FROM
			$prefix$entityAssnsToEntity eate
		
		INNER JOIN
			$prefix$associationPredicate ap
		ON 
			eate.associationPredicateGuid = ap.associationPredicateGuid
			
		INNER JOIN
			$prefix$relation rel
		ON 
			ap.relationGuid = rel.relationGuid
			
		WHERE
			rel.codingSchemeGuid = #param1#
		AND 
		(
			(



			<isNotNull property="param3">
				eate.sourceEntityCode = #param3#
			</isNotNull>
			<isNotEmpty property="param5" prepend="AND">
				eate.sourceEntityCodeNamespace = #param2#
			</isNotEmpty>
			)
		OR
			(

			<isNotNull property="param3">
				eate.targetEntityCode = #param3#
			</isNotNull>
			<isNotEmpty property="param5" prepend="AND">
				eate.targetEntityCodeNamespace = #param2#
			</isNotEmpty>
			)
		)	
	</select>
	
	<select id="getAnonDesignationForPredicateId" remapResults="true"
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple" resultClass="string">
		SELECT
			en.isAnonymous
		FROM 
			$prefix$entity en
		INNER JOIN
			$prefix$csSupportedAttrib sa
		ON 
			en.entityCode = sa.assnEntityCode
		INNER JOIN
			$prefix$associationPredicate ap
		ON
			ap.associationName = sa.id
		WHERE
			<isNotNull property="param1">
			ap.associationPredicateGuid =
			#param1,handler=variablePrimaryKeyTypeHandler#
			</isNotNull>
		AND
			sa.supportedAttributeTag = #param2#
	</select>
	
	<select id="getAllEntityAssocEntityGuids" remapResults="true" 
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter" resultClass="java.lang.String">
		SELECT 
			eae.entityAssnsGuid as guid
		FROM
			$prefix$entityAssnsToEntity as eae
	</select>
	
	<select id="getGraphDbTriples" remapResults="true" 
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterCollection" 
		resultMap="Association.graphdbTripleResult">
		SELECT
				eae.sourceEntityCode,
				eae.sourceEntityCodeNamespace,
				eae.targetEntityCode,
				eae.targetEntityCodeNamespace,
				eae.associationPredicateGuid,
	 			eae.entityAssnsGuid,
				eae.associationInstanceId, 
	 			ap.associationName,
	 			source.description as sd,
	 			target.description as td
	 		FROM
				$prefix$entityAssnsToEntity eae
			INNER JOIN
				$prefix$associationPredicate ap
			ON 
				eae.associationPredicateGuid =
				ap.associationPredicateGuid
			INNER JOIN
				$prefix$relation rel
			ON
				ap.relationGuid =
				rel.relationGuid
			LEFT JOIN
				$prefix$entity source
			ON
				source.entityCode = eae.sourceEntityCode 
			LEFT JOIN
				$prefix$entity target
			ON 
				target.entityCode = eae.targetEntityCode
	
			WHERE
				rel.codingSchemeGuid = 
				#param1,handler=variablePrimaryKeyTypeHandler#
			AND
				eae.entityAssnsGuid 
			IN
				( <iterate property="param2" conjunction=",">#param2[],handler=variablePrimaryKeyTypeHandler#</iterate> )
	</select>
	
<select id="getGraphDbTriplesAncestorsTr" remapResults="true" 
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTriple" 
		resultMap="Association.graphdbTripleTrResult">
	
			SELECT
				eae.sourceEntityCode,
				eae.sourceEntityCodeNamespace,
				eae.targetEntityCode,
				eae.targetEntityCodeNamespace,
				eae.associationPredicateGuid,
	 			eae.entityAssnsTrGuid,
	 			ap.associationName,
	 			source.description as sd,
	 			target.description as td
	 		FROM
				$prefix$entityAssnsToEntityTr eae
			INNER JOIN
				$prefix$associationPredicate ap
			ON 
				eae.associationPredicateGuid =
				ap.associationPredicateGuid
			INNER JOIN
				$prefix$relation rel
			ON
				ap.relationGuid =
				rel.relationGuid
			LEFT JOIN
				$prefix$entity source
			ON
				source.entityCode = eae.sourceEntityCode 
			LEFT JOIN
				$prefix$entity target
			ON 
				target.entityCode = eae.targetEntityCode
	
			WHERE
				rel.codingSchemeGuid = 
				#param1,handler=variablePrimaryKeyTypeHandler#
			AND
				eae.sourceEntityCode = #param2#

			AND 
				ap.associationName = #param3#
</select>
	
<select id="getGraphDbTriplesDecendentsTr" remapResults="true" 
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTriple" 
		resultMap="Association.graphdbTripleTrResult">
	
			SELECT
				eae.sourceEntityCode,
				eae.sourceEntityCodeNamespace,
				eae.targetEntityCode,
				eae.targetEntityCodeNamespace,
				eae.associationPredicateGuid,
	 			eae.entityAssnsTrGuid,
	 			ap.associationName,
	 			source.description as sd,
	 			target.description as td
	 		FROM
				$prefix$entityAssnsToEntityTr eae
			INNER JOIN
				$prefix$associationPredicate ap
			ON 
				eae.associationPredicateGuid =
				ap.associationPredicateGuid
			INNER JOIN
				$prefix$relation rel
			ON
				ap.relationGuid =
				rel.relationGuid
			LEFT JOIN
				$prefix$entity source
			ON
				source.entityCode = eae.sourceEntityCode 
			LEFT JOIN
				$prefix$entity target
			ON 
				target.entityCode = eae.targetEntityCode
	
			WHERE
				rel.codingSchemeGuid = 
				#param1,handler=variablePrimaryKeyTypeHandler#
			AND
			  	eae.targetEntityCode = #param2#
			AND 
				ap.associationName = #param3#
	</select>
</sqlMap>