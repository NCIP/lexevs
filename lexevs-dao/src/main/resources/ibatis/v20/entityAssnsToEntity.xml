<?xml version="1.0" encoding="UTF-8"?><!--Converted at: Mon Apr 18 08:46:16 EDT 2022-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Association">


    <resultMap id="countConceptReferenceResult" type="countConceptReference">
        <result property="_code" column="entityCode"/>
        <result property="_codeNamespace" column="entityCodeNamespace"/>
        <result property="childCount" column="relationshipsCount"/>
    </resultMap>

    <resultMap id="nodeResult" type="node">
        <result property="entityCode" column="entityCode"/>
        <result property="entityCodeNamespace" column="entityCodeNamespace"/>
    </resultMap>

    <resultMap id="countResult" type="java.util.HashMap">
        <result property="key" column="associationName"/>
        <result property="value" column="relationshipsCount" javaType="int"/>
    </resultMap>

    <resultMap id="tripleResult" type="triple">
        <result property="sourceEntityCode" column="sourceEntityCode"/>
        <result property="sourceEntityNamespace" column="sourceEntityCodeNamespace"/>
        <result property="targetEntityCode" column="targetEntityCode"/>
        <result property="targetEntityNamespace" column="targetEntityCodeNamespace"/>
        <result property="associationPredicateId" column="associationPredicateGuid"/>
    </resultMap>

    <resultMap id="sextupleResult" type="sextuple">
        <result property="sourceEntityCode" column="sourceEntityCode"/>
        <result property="sourceEntityNamespace" column="sourceEntityCodeNamespace"/>
        <result property="sourceEntityDescription" column="sourceEntityDescription"/>
        <result property="targetEntityCode" column="targetEntityCode"/>
        <result property="targetEntityNamespace" column="targetEntityCodeNamespace"/>
        <result property="targetEntityDescription" column="targetEntityDescription"/>
        <result property="associationPredicateId" column="associationPredicateGuid"/>
    </resultMap>

    <resultMap id="graphdbTripleResult" type="graphdbTriple">
        <result property="sourceEntityCode" column="sourceEntityCode"/>
        <result property="sourceEntityNamespace" column="sourceEntityCodeNamespace"/>
        <result property="targetEntityCode" column="targetEntityCode"/>
        <result property="targetEntityNamespace" column="targetEntityCodeNamespace"/>
        <result property="associationPredicateId" column="associationPredicateGuid"/>
        <result property="entityAssnsGuid" column="entityAssnsGuid"/>
        <result property="associationInstanceId" column="associationInstanceId"/>
        <result property="associationName" column="associationName"/>
        <result property="sourceDescription" column="sd"/>
        <result property="targetDescription" column="td"/>
    </resultMap>

    <resultMap id="graphdbTripleTrResult" type="graphdbTriple">
        <result property="sourceEntityCode" column="sourceEntityCode"/>
        <result property="sourceEntityNamespace" column="sourceEntityCodeNamespace"/>
        <result property="targetEntityCode" column="targetEntityCode"/>
        <result property="targetEntityNamespace" column="targetEntityCodeNamespace"/>
        <result property="associationPredicateId" column="associationPredicateGuid"/>
        <result property="entityAssnsGuid" column="entityAssnsTrGuid"/>
        <result property="associationName" column="associationName"/>
        <result property="sourceDescription" column="sd"/>
        <result property="targetDescription" column="td"/>
    </resultMap>

    <resultMap id="associatedConceptResult" type="associatedConcept">
        <result property="guid" column="entityAssnsGuid"/>
        <result property="entityGuid" column="entityGuid"/>
        <result property="code" column="entityCode"/>
        <result property="codeNamespace" column="entityCodeNamespace"/>
        <result property="entityDescription.content" column="description"/>
        <collection property="associationQualification" resultMap="Association.associationQualificationResult"/>
    </resultMap>

    <resultMap id="mappingTripleSubjectResult" type="mappingTriple">
        <result property="tripleUid" column="tripleUid"/>
        <result property="code" column="sourceEntityCode"/>
        <result property="codeNamespace" column="sourceEntityCodeNamespace"/>
        <result property="entityDescription.content" column="sourceEntityDescription"/>
        <collection property="_sourceOf._associationList" resultMap="Association.mappingTripleAssociationResult"/>
    </resultMap>

    <resultMap id="mappingTripleAssociationResult" type="org.LexGrid.LexBIG.DataModel.Core.Association">
        <result property="associationName" column="associationName"/>
        <collection property="_associatedConcepts._associatedConceptList"
                    resultMap="Association.mappingTripleObjectResult"/>
    </resultMap>

    <resultMap id="mappingTripleObjectResult" type="org.LexGrid.LexBIG.DataModel.Core.AssociatedConcept">
        <result property="code" column="targetEntityCode"/>
        <result property="codeNamespace" column="targetEntityCodeNamespace"/>
        <result property="entityDescription.content" column="targetEntityDescription"/>
        <collection property="_associationQualifiers._nameAndValueList"
                    resultMap="Association.associationQualificationResult"/>
    </resultMap>

    <resultMap id="mappingTripleResult" type="org.lexevs.dao.database.access.association.model.Triple">
        <result property="sourceEntityCode" column="sourceEntityCode"/>
        <result property="sourceEntityNamespace" column="sourceEntityCodeNamespace"/>
        <result property="targetEntityCode" column="targetEntityCode"/>
        <result property="targetEntityNamespace" column="targetEntityCodeNamespace"/>
        <result property="associationPredicateId" column="associationPredicateGuid"/>
    </resultMap>

    <resultMap id="associationQualificationResult" type="associationQualification">
        <result property="name" column="qualifierName"/>
        <result property="content" column="qualifierValue"/>
    </resultMap>

    <resultMap id="associationTargetEntry" type="associationTarget">
        <result property="uid" column="entityAssnsGuid"/>
        <result property="associationPredicateUId" column="associationPredicateGuid"/>
        <result property="associationSource.sourceEntityCode" column="sourceEntityCode"/>
        <result property="associationSource.sourceEntityCodeNamespace" column="sourceEntityCodeNamespace"/>
        <result property="associationTarget.targetEntityCode" column="targetEntityCode"/>
        <result property="associationTarget.targetEntityCodeNamespace" column="targetEntityCodeNamespace"/>
        <result property="associationTarget.associationInstanceId" column="associationInstanceId"/>
        <result property="associationTarget.isDefining" column="isDefining"/>
        <result property="associationTarget.isInferred" column="isInferred"/>
        <result property="associationTarget.isActive" column="isActive"/>
        <result property="associationTarget.owner" column="owner"/>
        <result property="associationTarget.status" column="status"/>
        <result property="associationTarget.effectiveDate" column="effectiveDate"/>
        <result property="associationTarget.expirationDate" column="expirationDate"/>
        <result property="entryStateUId" column="entryStateGuid"/>
        <collection property="assnQualsAndUsageContextList" resultMap="Association.qualContextResult"/>
    </resultMap>

    <resultMap id="associationSourceTripleEntry" type="org.LexGrid.relations.AssociationSource">
        <result property="sourceEntityCode" column="sourceEntityCode"/>
        <result property="sourceEntityCodeNamespace" column="sourceEntityCodeNamespace"/>
        <collection property="_targetList" resultMap="Association.associationTargetTripleEntry"/>
    </resultMap>

    <resultMap id="associationTargetTripleEntry" type="org.LexGrid.relations.AssociationTarget">
        <result property="targetEntityCode" column="targetEntityCode"/>
        <result property="targetEntityCodeNamespace" column="targetEntityCodeNamespace"/>
        <result property="associationInstanceId" column="associationInstanceId"/>
        <result property="isDefining" column="isDefining"/>
        <result property="isInferred" column="isInferred"/>
        <result property="isActive" column="isActive"/>
        <result property="owner" column="owner"/>
        <result property="status" column="status"/>
        <result property="effectiveDate" column="effectiveDate"/>
        <result property="expirationDate" column="expirationDate"/>
    </resultMap>

    <resultMap id="valueSetHierarchyRootNodeResolution"
               type="org.lexevs.dao.database.access.association.model.VSHierarchyNode">
        <result property="entityCode" column="entityCode"/>
        <result property="namespace" column="namespace"/>
        <result property="description" column="description"/>
        <result property="source" column="source"/>
    </resultMap>

    <resultMap id="definedNodeResolution" type="org.lexevs.dao.database.access.association.model.DefinedNode">
        <result property="entityCode" column="entityCode"/>
        <result property="entityCodeNamespace" column="namespace"/>
        <result property="description" column="description"/>
    </resultMap>

    <resultMap id="vsEntityResult" type="vsEntity">
        <result property="id" column="entityGuid"/>
        <result property="entityCode" column="entityCode"/>
        <result property="entityCodeNamespace" column="entityCodeNamespace"/>
        <result property="isDefined" column="isDefined"/>
        <result property="isAnonymous" column="isAnonymous"/>
        <result property="entityDescription.content" column="description"/>
        <result property="isActive" column="isActive"/>
        <result property="owner" column="owner"/>
        <result property="status" column="status"/>
        <result property="effectiveDate" column="effectiveDate"/>
        <result property="expirationDate" column="expirationDate"/>
    </resultMap>

    <resultMap id="vsEntityResultWithProperties" type="vsEntity">
        <result property="id" column="entityGuid"/>
        <result property="entityCode" column="entityCode"/>
        <result property="entityCodeNamespace" column="entityCodeNamespace"/>
        <result property="isDefined" column="isDefined"/>
        <result property="isAnonymous" column="isAnonymous"/>
        <result property="entityDescription.content" column="description"/>
        <result property="isActive" column="isActive"/>
        <result property="owner" column="owner"/>
        <result property="status" column="status"/>
        <result property="effectiveDate" column="effectiveDate"/>
        <result property="expirationDate" column="expirationDate"/>
        <collection property="_propertyList" resultMap="Association.vsPropertyResult"/>
    </resultMap>

    <resultMap id="vsPropertyResult" type="vsProperty">
        <result property="propertyName" column="propertyName"/>
        <result property="value.content" column="propertyValue"/>
    </resultMap>

    <resultMap id="vsEntityCount" type="string">
        <result property="java.util.String" column="vsEntityCount"/>
    </resultMap>

    <resultMap id="instanceToGuidMapResult" type="org.lexevs.dao.database.access.association.model.InstanceToGuid">
        <result property="instance" column="instance"/>
        <result property="value" column="value"/>
    </resultMap>

    <resultMap id="mapGraphSuperTriplesAndMetaData" type="org.LexGrid.custom.relations.TerminologyMapBean">
        <result property="source" column="source"/>
        <result property="sourceCode" column="sourceCode"/>
        <result property="sourceName" column="sourceName"/>
        <result property="rel" column="rel"/>
        <result property="mapRank" column="mapRank"/>
        <result property="target" column="target"/>
        <result property="targetCode" column="targetCode"/>
        <result property="targetName" column="targetName"/>
    </resultMap>

    <select id="getConceptReferenceFromEntityAssnsToEntityUid"
            parameterType="org.lexevs.dao.database.ibatis.parameter.SequentialMappedParameterBean"
            resultMap="Entity.conceptReferenceResult">
        SELECT

        <if test="tripleNode != null">
        <if test="tripleNode.toString() == &quot;SUBJECT&quot;">
            eate.sourceEntityCode as entityCode,
            eate.sourceEntityCodeNamespace as entityCodeNamespace,
        </if>
        <if test="tripleNode.toString() == &quot;OBJECT&quot;">
            eate.targetEntityCode as entityCode,
            eate.targetEntityCodeNamespace as entityCodeNamespace,
        </if>
        </if>
        <if test="tripleNode== null">
            eate.sourceEntityCode AS entityCode,
            eate.sourceEntityCodeNamespace AS entityCodeNamespace,
        </if>
        entityType.entityType

        FROM
        ${prefix}entityAssnsToEntity eate
        LEFT JOIN
        ${prefix}entity entity
        ON
        entityCode = entity.entityCode
        LEFT JOIN
        ${prefix}entityType entityType
        ON
        entity.entityGuid =
        entityType.entityGuid

        WHERE
        eate.entityAssnsGuid IN (  <foreach collection="param2" item="item" separator=",">
        #{item}
    </foreach> )
    </select>

    <select id="getNodesPath" parameterType="org.lexevs.dao.database.ibatis.association.parameter.GetNodesPathBean"
            resultType="string">
        SELECT
        tr.path
        FROM
        ${prefix}entityAssnsToEntityTr tr
        WHERE
        tr.sourceEntityCode = #{sourceEntityCode}
        AND
        tr.sourceEntityCodeNamespace = #{sourceEntityCodeNamespace}
        AND
        tr.targetEntityCode = #{targetEntityCode}
        AND
        tr.targetEntityCodeNamespace = #{targetEntityCodeNamespace}
        <if test="associationPredicateUId != null">
            AND
            tr.associationPredicateGuid = #{associationPredicateUId}
        </if>
    </select>


    <select id="getAssociatedConcpetFromEntityAssnsToEntityUid"
            parameterType="org.lexevs.dao.database.ibatis.parameter.SequentialMappedParameterBean"
            resultMap="Association.associatedConceptResult">
        SELECT
        eate.entityAssnsGuid,
        entity.entityGuid,
        entity.description,

        <if test="param1 == &quot;SUBJECT&quot;">
            eate.sourceEntityCode as entityCode,
            eate.sourceEntityCodeNamespace as entityCodeNamespace,
        </if>
        <if test="param1 == &quot;OBJECT&quot;">
            eate.targetEntityCode as entityCode,
            eate.targetEntityCodeNamespace as entityCodeNamespace,
        </if>
        quals.qualifierName,
        quals.qualifierValue
        FROM
        ${prefix}entityAssnsToEntity eate

        LEFT JOIN
        ${prefix}entityAssnQuals quals
        ON (eate.entityAssnsGuid = quals.referenceGuid)

        LEFT JOIN
        ${prefix}entity entity
        ON (
        <if test="param1 == &quot;SUBJECT&quot;">
            eate.sourceEntityCode = entity.entityCode
            AND
            eate.sourceEntityCodeNamespace = entity.entityCodeNamespace
        </if>
        <if test="param1 == &quot;OBJECT&quot;">
            eate.targetEntityCode = entity.entityCode
            AND
            eate.targetEntityCodeNamespace = entity.entityCodeNamespace
        </if>
        AND
        entity.codingSchemeGuid = #{param4}
        )

        WHERE
        eate.entityAssnsGuid IN (  <foreach collection="param2" item="item" separator=",">
        #{item}
    </foreach> )

        <if test="param3 != null and param3.size > 0">
            ORDER BY
            <foreach collection="param3" item="item" separator=",">
                <if test="param1 == &quot;SUBJECT&quot;">
                    ${item.columnSortType.subjectColumn}
                </if>
                <if test="param1 == &quot;OBJECT&quot;">
                    ${item.columnSortType.objectColumn}
                </if>
                ${item.order}
            </foreach>
        </if>
    </select>

    <select id="getAccociationInstanceKey"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple"
            resultMap="Common.uidResult">
        SELECT eae.entityAssnsGuid AS uidKey
        FROM ${prefix}entityAssnsToEntity eae
                 INNER JOIN
             ${prefix}associationPredicate ap
             ON
                     eae.associationPredicateGuid =
                     ap.associationPredicateGuid
                 INNER JOIN
             ${prefix}relation rel
             ON
                     ap.relationGuid =
                     rel.relationGuid
        WHERE rel.codingSchemeGuid =
              #{param1}
          AND eae.associationInstanceId =
              #{param2}
    </select>

    <select id="getAssociationInstanceUIDFromInstanceIdOnly"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter" resultMap="Common.uidResult">

        SELECT eae.entityAssnsGuid AS uidKey
        FROM ${prefix}entityAssnsToEntity eae
        WHERE eae.associationInstanceId = #{param1}
    </select>

    <select id="getAllTriplesOfCodingScheme"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple"
            resultMap="Association.tripleResult">
        SELECT
        eae.sourceEntityCode,
        eae.sourceEntityCodeNamespace,
        eae.targetEntityCode,
        eae.targetEntityCodeNamespace,
        eae.associationPredicateGuid
        FROM
        ${prefix}entityAssnsToEntity eae
        INNER JOIN
        ${prefix}associationPredicate ap
        ON
        eae.associationPredicateGuid =
        ap.associationPredicateGuid
        INNER JOIN
        ${prefix}relation rel
        ON
        ap.relationGuid =
        rel.relationGuid
        WHERE
        rel.codingSchemeGuid =
        #{param1}
        <if test="param2 != null">
            AND
            eae.associationPredicateGuid =
            #{param2}
        </if>
    </select>

    <select id="getAllTriplesOfCodingSchemeForGraphDbLoad"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple"
            resultMap="Association.graphdbTripleResult">
        SELECT
        eae.sourceEntityCode,
        eae.sourceEntityCodeNamespace,
        eae.targetEntityCode,
        eae.targetEntityCodeNamespace,
        eae.associationPredicateGuid,
        eae.entityAssnsGuid,
        eae.associationInstanceId,
        <!--  			aq.qualifierName,
                    aq.qualifierValue, -->
        ap.associationName,
        source.description as sd,
        target.description as td
        FROM
        ${prefix}entityAssnsToEntity eae
        INNER JOIN
        ${prefix}associationPredicate ap
        ON
        eae.associationPredicateGuid =
        ap.associationPredicateGuid
        INNER JOIN
        ${prefix}relation rel
        ON
        ap.relationGuid =
        rel.relationGuid
        LEFT JOIN
        ${prefix}entity source
        ON
        source.entityCode = eae.sourceEntityCode
        LEFT JOIN
        ${prefix}entity target
        ON
        target.entityCode = eae.targetEntityCode
        <!--  		LEFT JOIN
                    ${prefix}entityassnquals aq
                ON
                    aq.referenceGuid =
                    eae.entityAssnsGuid -->
        WHERE
        rel.codingSchemeGuid =
        #{param1}
        <if test="param2 != null">
            AND
            eae.associationPredicateGuid =
            #{param2}
        </if>
    </select>

    <insert id="insertEntityAssnsToEntity"
            parameterType="org.lexevs.dao.database.ibatis.association.parameter.InsertOrUpdateAssociationTargetBean">
        INSERT INTO ${prefix}entityAssnsToEntity (entityAssnsGuid,
                                                  associationPredicateGuid,
                                                  sourceEntityCode,
                                                  sourceEntityCodeNamespace,
                                                  targetEntityCode,
                                                  targetEntityCodeNamespace,
                                                  associationInstanceId,
                                                  isDefining,
                                                  isInferred,
                                                  isActive,
                                                  owner,
                                                  status,
                                                  effectiveDate,
                                                  expirationDate,
                                                  entryStateGuid)
        VALUES (#{uid},
                #{associationPredicateUId},
                #{sourceEntityCode},
                #{sourceEntityCodeNamespace},
                #{targetEntityCode},
                #{targetEntityCodeNamespace},
                #{associationInstanceId,jdbcType=VARCHAR},
                #{isDefining},
                #{isInferred},
                #{isActive},
                #{owner,jdbcType=VARCHAR},
                #{status,jdbcType=VARCHAR},
                #{effectiveDate,jdbcType=TIMESTAMP},
                #{expirationDate,jdbcType=TIMESTAMP},
                #{entryStateUId})
    </insert>

    <insert id="insertEntityAssnsToEntityBatch"
            parameterType="java.util.List">


	<foreach collection="list"  item="item" index="index" separator="," >
		INSERT INTO ${item.prefix}entityAssnsToEntity (entityAssnsGuid,
												  associationPredicateGuid,
                                                  sourceEntityCode,
                                                  sourceEntityCodeNamespace,
                                                  targetEntityCode,
                                                  targetEntityCodeNamespace,
                                                  associationInstanceId,
                                                  isDefining,
                                                  isInferred,
                                                  isActive,
                                                  owner,
                                                  status,
                                                  effectiveDate,
                                                  expirationDate,
                                                  entryStateGuid)  
		VALUES
        		(#{item.uid},
                #{item.associationPredicateUId},
                #{item.sourceEntityCode},
                #{item.sourceEntityCodeNamespace},
                #{item.targetEntityCode},
                #{item.targetEntityCodeNamespace},
                #{item.associationInstanceId,jdbcType=VARCHAR},
                #{item.isDefining},
                #{item.isInferred},
                #{item.isActive},
                #{item.owner,jdbcType=VARCHAR},
                #{item.status,jdbcType=VARCHAR},
                #{item.effectiveDate,jdbcType=TIMESTAMP},
                #{item.expirationDate,jdbcType=TIMESTAMP},
                #{item.entryStateUId})
	</foreach>
    </insert>

    <select id="getTransitiveTableCount" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter"
            resultType="int">
        SELECT COUNT(*)
        FROM ${prefix}entityAssnsToEntityTr eaetr
                 INNER JOIN
             ${prefix}associationPredicate ap
             ON
                     eaetr.associationPredicateGuid =
                     ap.associationPredicateGuid
                 INNER JOIN
             ${prefix}relation rel
             ON
                     ap.relationGuid =
                     rel.relationGuid
        WHERE rel.codingSchemeGuid =
              #{param1}
    </select>

    <delete id="deleteFromTransitiveTableByCodingSchemeUid"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter">
        DELETE
            ${prefix}entityAssnsToEntityTr
        FROM ${prefix}entityAssnsToEntityTr
                 INNER JOIN
             ${prefix}associationPredicate
             ON
                     ${prefix}entityAssnsToEntityTr.associationPredicateGuid =
                     ${prefix}associationPredicate.associationPredicateGuid
                 INNER JOIN
             ${prefix}relation
             ON
                     ${prefix}associationPredicate.relationGuid =
                     ${prefix}relation.relationGuid
        WHERE ${prefix}relation.codingSchemeGuid =
              #{param1}
    </delete>

    <insert id="insertTransitiveClosure"
            parameterType="org.lexevs.dao.database.ibatis.association.parameter.InsertTransitiveClosureBean">
        INSERT INTO ${prefix}entityAssnsToEntityTr (entityAssnsTrGuid,
                                                    associationPredicateGuid,
                                                    sourceEntityCode,
                                                    sourceEntityCodeNamespace,
                                                    targetEntityCode,
                                                    targetEntityCodeNamespace,
                                                    path)
        VALUES (#{uid},
                #{associationPredicateUId},
                #{sourceEntityCode},
                #{sourceEntityCodeNamespace},
                #{targetEntityCode},
                #{targetEntityCodeNamespace},
                #{path})
    </insert>

    <sql id="getEntityAssnsToEntityUidsFragment">
        FROM
        ${prefix}entityAssnsToEntity eate
        INNER JOIN
        ${prefix}associationPredicate ap
        ON
        (ap.associationPredicateGuid = eate.associationPredicateGuid)
        INNER JOIN
        ${prefix}relation rel
        ON
        (rel.relationGuid = ap.relationGuid)
        LEFT JOIN
        ${prefix}entityAssnQuals quals
        ON
        (eate.entityAssnsGuid = quals.referenceGuid)

        <if test="needsEntityJoin == true">
            LEFT JOIN
            ${prefix}entity entity
            ON (
            <if test="tripleNode != null">
                <if test="tripleNode.toString() == &quot;SUBJECT&quot;">
                    eate.targetEntityCode = entity.entityCode
                    AND
                    eate.targetEntityCodeNamespace = entity.entityCodeNamespace
                </if>
                <if test="tripleNode.toString() == &quot;OBJECT&quot;">
                    eate.sourceEntityCode = entity.entityCode
                    AND
                    eate.sourceEntityCodeNamespace = entity.entityCodeNamespace
                </if>
            </if>
            <if test="tripleNode == null ">
                eate.targetEntityCode = entity.entityCode
                AND
                eate.targetEntityCodeNamespace = entity.entityCodeNamespace
            </if>
            )
            LEFT JOIN
            ${prefix}entityType entityType
            ON
            (entity.entityGuid = entityType.entityGuid)
       </if>

        WHERE
        rel.codingSchemeGuid = #{codingSchemeUid}


        <if test="relationsContainerName != null">AND
            rel.containerName = #{relationsContainerName}
        </if>
        <if test="associationPredicateUid != null">AND
            ap.associationPredicateGuid = #{associationPredicateUid}
        </if>


        <if test="associationQualifiers != null and associationQualifiers.size > 0">
            <foreach collection="associationQualifiers" item="item" open="AND (" separator="AND" close=")">
                (
                quals.qualifierName = #{item.qualifierName}
                <if test="item != null and item.qualifierValue != null and item.qualifierValue != ''">
                    AND
                    quals.qualifierValue = #{item.qualifierValue}
                </if>
                )
            </foreach>

        </if>

        <if test="associations != null and associations.size > 0">
            <foreach collection="associations" item="item" index="index" open="AND (" separator="OR" close=")" >
                ap.associationName=#{item}
            </foreach>
        </if> 

        <if test="mustHaveCodes != null and mustHaveCodes.size > 0">AND
            (
            <foreach collection="mustHaveCodes" item="item" separator="OR">
                <if test="tripleNode !=null">
                    <if test="tripleNode.toString() == &quot;SUBJECT&quot;">
                        (
                        eate.targetEntityCode = #{item.code}
                        <if test="item != null and item.namespace != null">AND
                            eate.targetEntityCodeNamespace = #{item.namespace}
                        </if>
                        )
                    </if>
                    <if test="tripleNode.toString() == &quot;OBJECT&quot;">
                        (
                        eate.sourceEntityCode = #{item.code}
                        <if test="item != null and item.namespace != null">AND
                            eate.sourceEntityCodeNamespace = #{item.namespace}
                        </if>
                        )
                    </if>
                </if>
                <if test="tripleNode == null">
                    eate.sourceEntityCode = #{item.code}
                    <if test="item != null and item.namespace != null">AND
                        eate.sourceEntityCodeNamespace = #{item.namespace}
                    </if>
                </if>
            </foreach>
            )
        </if>
       <if test="mustHaveNamespaces != null and mustHaveNamespaces.size > 0">AND
            (
            <foreach collection="mustHaveNamespaces" item="item" separator="OR">
                <if test="tripleNode != null">
                    <if test="tripleNode.toString() == &quot;SUBJECT&quot;">
                        (
                        eate.targetEntityCodeNamespace = #{item}
                        )
                    </if>
                    <if test="tripleNode.toString() == &quot;OBJECT&quot;">
                        (
                        eate.sourceEntityCodeNamespace = #{item}
                        )
                    </if>
                </if>
            </foreach>
            )
        </if>
       <if test="mustHaveEntityTypes != null and mustHaveEntityTypes.size > 0 ">AND
            (
            (
            <foreach collection="mustHaveEntityTypes" item="item" separator="OR">
                entityType.entityType = #{item}
            </foreach>
            )
            OR
            (
            entityType.entityType IS NULL
            )
            )
        </if> 
      <if test="restrictToAnonymous != null">AND
            (
            entity.isAnonymous = #{restrictToAnonymous}
            OR
            entity.isAnonymous IS NULL
            )
        </if>
    </sql>

    <sql id="restrictEntityAssnsToEntityUidsBySingleCodeFragment">
        <if test="tripleNode !=null">
        <if test="tripleNode.toString() == &quot;SUBJECT&quot;">AND
            eate.sourceEntityCode = #{entityCode}
            <if test="entityCodeNamespace != null">AND
                eate.sourceEntityCodeNamespace = #{entityCodeNamespace}
            </if>
        </if>
        <if test="tripleNode.toString() == &quot;OBJECT&quot;">AND
            eate.targetEntityCode = #{entityCode}
            <if test="entityCodeNamespace != null">AND
                eate.targetEntityCodeNamespace = #{entityCodeNamespace}
            </if>
        </if>
        </if>
        <if test="tripleNode == null">AND
            eate.sourceEntityCode = #{entityCode}
            <if test="entityCodeNamespace != null">AND
                eate.sourceEntityCodeNamespace = #{entityCodeNamespace}
            </if>
        </if>
    </sql>

    <sql id="restrictEntityAssnsToEntityUidsByMultipleCodesFragment">
        <if test="tripleNode !=null">
            <if test="tripleNode.toString() == &quot;SUBJECT&quot;">AND
                (
                <foreach collection="conceptReferences" item="item" separator="OR">
                    (
                    eate.sourceEntityCode = #{item.code}
                    <if test="item != null and item.codeNamespace != null">AND
                        eate.sourceEntityCodeNamespace = #{item.codeNamespace}
                    </if>
                    )
                </foreach>
                )
            </if>
            <if test="tripleNode.toString() == &quot;OBJECT&quot;">AND
                (
                <foreach collection="conceptReferences" item="item" separator="OR">
                    (
                    eate.targetEntityCode = #{item.code}
                    <if test="item != null and item.codeNamespace != null">AND
                        eate.targetEntityCodeNamespace = #{item.codeNamespace}
                    </if>
                    )
                </foreach>
                )
            </if>
        </if>
<if test="tripleNode == null">
    AND
    (
    <foreach collection="conceptReferences" item="item" separator="OR">
        (
        eate.sourceEntityCode = #{item.code}
        <if test="item != null and item.codeNamespace != null">AND
            eate.sourceEntityCodeNamespace = #{item.codeNamespace}
        </if>
        )
    </foreach>
    )
</if>
    </sql>

    <sql id="getRelationshipsFragment">
        INNER JOIN
        ${prefix}associationPredicate ap
        ON
        (ap.associationPredicateGuid = eate.associationPredicateGuid)
        INNER JOIN
        ${prefix}relation rel
        ON
        (rel.relationGuid = ap.relationGuid)

        <if test="needsEntityJoin == true">
            LEFT JOIN
            ${prefix}entity sourceEntity
            ON
            (
            eate.sourceEntityCode = sourceEntity.entityCode
            AND
            eate.sourceEntityCodeNamespace = sourceEntity.entityCodeNamespace
            )
            LEFT JOIN
            ${prefix}entityType sourceEntityType
            ON
            (sourceEntity.entityGuid = sourceEntityType.entityGuid)

            LEFT JOIN
            ${prefix}entity targetEntity
            ON
            (
            eate.targetEntityCode = targetEntity.entityCode
            AND
            eate.targetEntityCodeNamespace = targetEntity.entityCodeNamespace
            )
            LEFT JOIN
            ${prefix}entityType targetEntityType
            ON
            (targetEntity.entityGuid = targetEntityType.entityGuid)
        </if>

        WHERE
        rel.codingSchemeGuid = #{codingSchemeUid}

        <if test="relationsContainerName != null">AND
            rel.containerName = #{relationsContainerName}
        </if>

        <if test="associations != null and associations.size > 0">AND
            (
            <foreach collection="associations" item="item" separator="OR">
                ap.associationName = #{item}
            </foreach>
            )
        </if>

        <if test="sourceCode != null">AND
            eate.sourceEntityCode = #{sourceCode}
        </if>
        <if test="sourceNamespace != null">AND
            eate.sourceEntityCodeNamespace = #{sourceNamespace}
        </if>
        <if test="targetCode != null">AND
            eate.targetEntityCode = #{targetCode}
        </if>
        <if test="targetNamespace != null">AND
            eate.targetEntityCodeNamespace = #{targetNamespace}
        </if>

        <if test="mustHaveSourceCodes != null and mustHaveSourceCodes.size > 0">AND
            (
            <foreach collection="mustHaveSourceCodes" item="item" separator="OR">
                (
                eate.sourceEntityCode = #{item.code}
                <if test="item != null and item.namespace != null and item.namespace != ''">AND
                    eate.sourceEntityCodeNamespace = #{item.namespace}
                </if>
                )
            </foreach>
            )
        </if>

        <if test="mustHaveTargetCodes != null and mustHaveTargetCodes.size > 0">AND
            (
            <foreach collection="mustHaveTargetCodes" item="item" separator="OR">
                (
                eate.targetEntityCode = #{item.code}
                <if test="item != null and item.namespace != null and item.namespace != ''">AND
                    eate.targetEntityCodeNamespace = #{item.namespace}
                </if>
                )
            </foreach>
            )
        </if>
        <if test="mustHaveSourceNamespaces != null and mustHaveSourceNamespaces.size > 0">AND
            (
            <foreach collection="mustHaveSourceNamespaces" item="item" separator="OR">
                (
                eate.sourceEntityCodeNamespace = #{item}
                )
            </foreach>
            )
        </if>
        <if test="mustHaveTargetNamespaces != null and mustHaveTargetNamespaces.size > 0">AND
            (
            <foreach collection="mustHaveTargetNamespaces" item="item" separator="OR">
                (
                eate.targetEntityCodeNamespace = #{item}
                )
            </foreach>
            )
        </if>

        <if test="mustHaveEntityTypes != null and mustHaveEntityTypes.size > 0">AND
            (
            (
            (
            <foreach collection="mustHaveEntityTypes" item="item" separator="OR">
                sourceEntityType.entityType = #{item}
            </foreach>
            )
            OR
            (
            sourceEntityType.entityType IS NULL
            )
            )
            AND
            (
            (
            <foreach collection="mustHaveEntityTypes" item="item" separator="OR">
                targetEntityType.entityType = #{item}
            </foreach>
            )
            OR
            (
            targetEntityType.entityType IS NULL
            )
            )
            )
        </if>

        <if test="restrictToAnonymous != null">AND
            (
            (
            sourceEntity.isAnonymous = #{restrictToAnonymous}
            OR
            sourceEntity.isAnonymous IS NULL
            )
            AND
            (
            targetEntity.isAnonymous = #{restrictToAnonymous}
            OR
            targetEntity.isAnonymous IS NULL
            )
            )
        </if>
    </sql>

    <sql id="getEntityAssnsToEntityRelationships">
        SELECT DISTINCT
        eate.associationPredicateGuid
        FROM
        ${prefix}entityAssnsToEntity eate
        LEFT JOIN
        ${prefix}entityAssnQuals quals
        ON
        (eate.entityAssnsGuid = quals.referenceGuid)
        <include refid="getRelationshipsFragment"/>

        <if test="associationQualifiers != null and associationQualifiers.size > 0">AND
            (
            <foreach collection="associationQualifiers" item="item" separator="AND">
                (
                quals.qualifierName = #{item.qualifierName}
                <if test="item != null and item.qualifierValue != null and item.qualifierValue != ''">
                    AND
                    quals.qualifierValue = #{item.qualifierValue}
                </if>
                )
            </foreach>
            )
        </if>

    </sql>

    <sql id="getEntityAssnsToEntityTrRelationships">
        SELECT DISTINCT
        eate.associationPredicateGuid
        FROM
        ${prefix}entityAssnsToEntityTr eate
        <include refid="getRelationshipsFragment"/>
    </sql>

    <select id="getCodeRelationships"
            parameterType="org.lexevs.dao.database.ibatis.association.parameter.GetCodeRelationshipsBean"
            resultType="string">
        <include refid="getEntityAssnsToEntityRelationships"/>

        <if test="useTransitive">
            UNION
            <include refid="getEntityAssnsToEntityTrRelationships"/>
        </if>
    </select>

    <select id="getAssociationPredicateNameForAssociationInstanceId"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter" resultType="string">
        SELECT ap.associationName
        FROM ${prefix}entityAssnsToEntity eate
                 INNER JOIN
             ${prefix}associationPredicate ap
             ON
                 eate.associationPredicateGuid = ap.associationPredicateGuid
        WHERE eate.associationInstanceId = #{param1}

        UNION

        SELECT ap.associationName
        FROM ${prefix}entityAssnsToData eatd
                 INNER JOIN
             ${prefix}associationPredicate ap
             ON
                 eatd.associationPredicateGuid = ap.associationPredicateGuid
        WHERE eatd.associationInstanceId = #{param1}
    </select>

    <select id="getRelationContainerNameForAssociationInstanceId"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter" resultType="string">
        SELECT rel.containerName
        FROM ${prefix}entityAssnsToEntity eate
                 INNER JOIN
             ${prefix}associationPredicate ap
             ON
                 eate.associationPredicateGuid = ap.associationPredicateGuid
                 INNER JOIN
             ${prefix}relation rel
             ON
                 ap.relationGuid = rel.relationGuid
        WHERE eate.associationInstanceId = #{param1}

        UNION

        SELECT rel.containerName
        FROM ${prefix}entityAssnsToData eatd
                 INNER JOIN
             ${prefix}associationPredicate ap
             ON
                 eatd.associationPredicateGuid = ap.associationPredicateGuid
                 INNER JOIN
             ${prefix}relation rel
             ON
                 ap.relationGuid = rel.relationGuid
        WHERE eatd.associationInstanceId = #{param1}
    </select>

    <select id="getRootEntityAssnsToEntityUids"
            parameterType="org.lexevs.dao.database.ibatis.parameter.SequentialMappedParameterBean"
            resultMap="Entity.noEntityTypeConceptReferenceResult">
        SELECT DISTINCT
        eate1.sourceEntityCode AS entityCode,
        eate1.sourceEntityCodeNamespace AS entityCodeNamespace

<!--        <if test="param6 != null and param6 != ''">,-->
<!--            <foreach collection="param6" item="item" separator=",">-->
<!--                ${item.columnSortType.rootColumn}-->
<!--                ${item.order}-->
<!--            </foreach>-->
<!--        </if>-->
        FROM
        ${prefix}entityAssnsToEntity eate1

        LEFT JOIN
        <if test="param3 != null and param3.size > 0">
            (
        </if>
        ${prefix}entityAssnsToEntity eate2
        <if test="param3 != null and param3.size > 0">
            LEFT JOIN
            ${prefix}entityAssnQuals eaq2
            ON
            (eaq2.referenceGuid = eate2.entityAssnsGuid)
            )
        </if>
        ON (
        eate1.sourceEntityCode = eate2.targetEntityCode

        AND
        eate1.sourceEntityCodeNamespace = eate2.targetEntityCodeNamespace

        <if test="param1 == &quot;INDIVIDUALLY&quot;">
            AND
            eate1.associationPredicateGuid = eate2.associationPredicateGuid
        </if>

        <if test="param1 == &quot;TOGETHER&quot;">

            <if test="param2 != null and param2.size > 0">AND
                (
                <foreach collection="param2" item="item" separator="OR">eate1.associationPredicateGuid =
                    #{item}
                </foreach>
                )
                AND
                (
                <foreach collection="param2" item="item" separator="OR">eate2.associationPredicateGuid =
                    #{item}
                </foreach>
                )
            </if>

        </if>

        <if test="param3 != null and param3.size > 0">AND
            (
            <foreach collection="param3" item="item" separator="OR">
                eaq2.qualifierName = #{item.qualifierName}

                <if test="item != null and item.qualifierValue != null and item.qualifierValue != ''">AND
                    eaq2.qualifierValue = #{item.qualifierValue}
                </if>
            </foreach>
            )
        </if>

        <!--			<isNotEmpty property="param4" prepend="AND">-->
        <!--			(-->
        <!--				<iterate property="param4" conjunction="AND"> -->
        <!--					eate1.sourceEntityCodeNamespace != #{param4[]}-->
        <!--				</iterate>-->
        <!--			)-->
        <!--			</isNotEmpty>-->

        )
        <if test="param3 != null and param3.size > 0">
            LEFT JOIN
            ${prefix}entityAssnQuals eaq1
            ON
            eate1.entityAssnsGuid = eaq1.referenceGuid
        </if>

        WHERE
        eate2.entityAssnsGuid IS NULL

        <if test="param3 != null and param3.size > 0">AND
            (
            <foreach collection="param3" item="item" separator="OR">
                eaq1.qualifierName = #{item.qualifierName}

                <if test="item != null and item.qualifierValue != null and item.qualifierValue != ''">AND
                    eaq1.qualifierValue = #{item.qualifierValue}
                </if>
            </foreach>
            )
        </if>

        <if test="param2 != null and param2.size > 0">AND
            eate1.associationPredicateGuid IN (  <foreach collection="param2" item="item" separator=",">
                #{item}
            </foreach> )
        </if>

        <if test="param4 != null and param4.size > 0">AND
            (
            <foreach collection="param4" item="item" separator="OR">
                eate1.sourceEntityCodeNamespace = #{item}
            </foreach>
            )
        </if>

        <if test="param5 != null and param5.size > 0">AND
            (
            <foreach collection="param5" item="item" separator="OR">
                eate1.targetEntityCodeNamespace = #{item}
            </foreach>
            )
        </if>

        <if test="param6 != null and param6.size > 0">
            ORDER BY
            <foreach collection="param6" item="item" separator=",">
                ${item.columnSortType.rootColumn}
                ${item.order}
            </foreach>
        </if>
    </select>

    <select id="getTailEntityAssnsToEntityUids"
            parameterType="org.lexevs.dao.database.ibatis.parameter.SequentialMappedParameterBean"
            resultMap="Entity.noEntityTypeConceptReferenceResult">
        SELECT DISTINCT
        eate1.targetEntityCode AS entityCode,
        eate1.targetEntityCodeNamespace AS entityCodeNamespace
<!--        <if test="param6 != null and param6 != ''">,-->
<!--            <foreach collection="param6" item="item" separator=",">-->
<!--                ${item.columnSortType.tailColumn}-->
<!--                ${item.order}-->
<!--            </foreach>-->
<!--        </if>-->
        FROM
        ${prefix}entityAssnsToEntity eate1

        LEFT JOIN
        <if test="param3 != null and param3.size > 0">
            (
        </if>
        ${prefix}entityAssnsToEntity eate2
        <if test="param3 != null and param3.size > 0">
            LEFT JOIN
            ${prefix}entityAssnQuals eaq2
            ON
            (eaq2.referenceGuid = eate2.entityAssnsGuid)
            )
        </if>
        ON (
        eate1.targetEntityCode = eate2.sourceEntityCode

        AND
        eate1.targetEntityCodeNamespace = eate2.sourceEntityCodeNamespace

        <if test="param1 == &quot;INDIVIDUALLY&quot;">
            AND
            eate1.associationPredicateGuid = eate2.associationPredicateGuid
        </if>

        <if test="param1 == &quot;TOGETHER&quot;">

            <if test="param2 != null and param2.size > 0">AND
                (
                <foreach collection="param2" item="item" separator="OR">eate1.associationPredicateGuid =
                    #{item}
                </foreach>
                )
                AND
                (
                <foreach collection="param2" item="item" separator="OR">eate2.associationPredicateGuid =
                    #{item}
                </foreach>
                )
            </if>

        </if>

        <if test="param3 != null and param3.size > 0">AND
            (
            <foreach collection="param3" item="item" separator="OR">
                eaq2.qualifierName = #{item.qualifierName}

                <if test="item != null and item.qualifierValue != null and item.qualifierValue != ''">AND
                    eaq2.qualifierValue = #{item.qualifierValue}
                </if>
            </foreach>
            )
        </if>

        <!--			<isNotEmpty property="param4" prepend="AND">-->
        <!--			(-->
        <!--				<iterate property="param4" conjunction="AND"> -->
        <!--					eate1.sourceEntityCodeNamespace != #{param4[]}-->
        <!--				</iterate>-->
        <!--			)-->
        <!--			</isNotEmpty>-->
        )

        <if test="param3 != null and param3.size > 0">
            LEFT JOIN
            ${prefix}entityAssnQuals eaq1
            ON
            eate1.entityAssnsGuid = eaq1.referenceGuid
        </if>
        WHERE
        eate2.entityAssnsGuid IS NULL

        <if test="param3 != null and param3.size > 0">AND
            (
            <foreach collection="param3" item="item" separator="OR">
                eaq1.qualifierName = #{item.qualifierName}

                <if test="item != null and item.qualifierValue != null and item.qualifierValue != ''">AND
                    eaq1.qualifierValue = #{item.qualifierValue}
                </if>
            </foreach>
            )
        </if>

        <if test="param2 != null and param2.size > 0">AND
            eate1.associationPredicateGuid IN (  <foreach collection="param2" item="item" separator=",">
                #{item}
            </foreach> )
        </if>

        <if test="param4 != null and param4.size > 0">AND
            (
            <foreach collection="param4" item="item" separator="OR">
                eate1.sourceEntityCodeNamespace = #{item}
            </foreach>
            )
        </if>

        <if test="param5 != null and param5.size > 0">AND
            (
            <foreach collection="param5" item="item" separator="OR">
                eate1.targetEntityCodeNamespace = #{item}
            </foreach>
            )
        </if>
        <if test="param6 != null and param6.size > 0'">
            ORDER BY
            <foreach collection="param6" item="item" separator=",">
                ${item.columnSortType.tailColumn}
                ${item.order}
            </foreach>
        </if>

    </select>

    <select id="getEntityAssnsToEntityUids"
            parameterType="org.lexevs.dao.database.ibatis.association.parameter.GetEntityAssnUidsBean"
            resultMap="Common.uidResult">
        SELECT DISTINCT
        (eate.entityAssnsGuid) AS uidKey

        <if test="sorts != null and sorts.size > 0 and tripleNode != null">,
            <foreach collection="sorts" item="item" separator=",">
                <if test="tripleNode.toString() == &quot;SUBJECT&quot;">
                    ${item.columnSortType.subjectColumn}
                </if>
                <if test="tripleNode.toString() == &quot;OBJECT&quot;">
                    ${item.columnSortType.objectColumn}
                </if>
            </foreach>
        </if>

        <include refid="getEntityAssnsToEntityUidsFragment"/>
        <include refid="restrictEntityAssnsToEntityUidsBySingleCodeFragment"/>

        <if test="sorts != null and sorts.size > 0">
            ORDER BY
            <foreach collection="sorts" item="item" separator=",">
                <if test="tripleNode !=null">
                    <if test="tripleNode.toString() == &quot;SUBJECT&quot;">
                        ${item.columnSortType.subjectColumn}
                    </if>
                    <if test="tripleNode.toString() == &quot;OBJECT&quot;">
                        ${item.columnSortType.objectColumn}
                    </if>
                </if>
                ${item.order}
            </foreach>
        </if>
    </select>

    <select id="getEntityAssnsToEntityUidsCount"
            parameterType="org.lexevs.dao.database.ibatis.association.parameter.GetEntityAssnUidsCountBean"
            resultMap="countResult">
        SELECT
        COUNT( DISTINCT eate.entityAssnsGuid ) AS relationshipsCount,
        ap.associationName AS associationName
        <include refid="getEntityAssnsToEntityUidsFragment"/>
        <include refid="restrictEntityAssnsToEntityUidsBySingleCodeFragment"/>
        GROUP BY
        associationName
    </select>

    <select id="getCountConceptReferences"
            parameterType="org.lexevs.dao.database.ibatis.association.parameter.GetEntityAssnUidsCountBean"
            resultMap="countConceptReferenceResult">
        SELECT
        COUNT( DISTINCT eate.entityAssnsGuid ) AS relationshipsCount,
        <if test="tripleNode !=null">
            <if test="tripleNode.toString() == &quot;SUBJECT&quot;">
                eate.sourceEntityCode AS entityCode,
                eate.sourceEntityCodeNamespace AS entityCodeNamespace
            </if>
            <if test="tripleNode.toString() == &quot;OBJECT&quot;">
                eate.targetEntityCode AS entityCode,
                eate.targetEntityCodeNamespace AS entityCodeNamespace
            </if>
        </if>

        <include refid="getEntityAssnsToEntityUidsFragment"/>
        <include refid="restrictEntityAssnsToEntityUidsByMultipleCodesFragment"/>

        AND
        eate.sourceEntityCode NOT IN ('@' , '@@')
        AND
        eate.targetEntityCode NOT IN ('@' , '@@')

        <if test="tripleNode !=null">

            GROUP BY
            <if test="tripleNode.toString() == &quot;SUBJECT&quot;">
                eate.sourceEntityCode,
                eate.sourceEntityCodeNamespace
            </if>
            <if test="tripleNode.toString() == &quot;OBJECT&quot;">
                eate.targetEntityCode,
                eate.targetEntityCodeNamespace
            </if>
        </if>
    <if test="tripleNode == null">
        GROUP BY
        eate.targetEntityCode,
        eate.targetEntityCodeNamespace
    </if>
    </select>

    <select id="getConceptReferences"
            parameterType="org.lexevs.dao.database.ibatis.association.parameter.GetEntityAssnUidsCountBean"
            resultMap="Entity.noEntityTypeConceptReferenceResult">
        SELECT
        <if test="tripleNode != null">
            <if test="tripleNode.toString() == &quot;SUBJECT&quot;">
                eate.targetEntityCode AS entityCode,
                eate.targetEntityCodeNamespace AS entityCodeNamespace
            </if>
            <if test="tripleNode.toString() == &quot;OBJECT&quot;">
                eate.sourceEntityCode AS entityCode,
                eate.sourceEntityCodeNamespace AS entityCodeNamespace
            </if>
        </if>
        <if test="tripleNode== null">
            eate.sourceEntityCode AS entityCode,
            eate.sourceEntityCodeNamespace AS entityCodeNamespace
        </if>
        <include refid="getEntityAssnsToEntityUidsFragment"/>
        <include refid="restrictEntityAssnsToEntityUidsByMultipleCodesFragment"/>

        AND
        eate.sourceEntityCode NOT IN ('@' , '@@')
        AND
        eate.targetEntityCode NOT IN ('@' , '@@')


        <if test="tripleNode != null">
            GROUP BY
            <if test="tripleNode.toString() == &quot;SUBJECT&quot;">
                eate.targetEntityCode,
                eate.targetEntityCodeNamespace
            </if>
            <if test="tripleNode.toString() == &quot;OBJECT&quot;">
                eate.sourceEntityCode,
                eate.sourceEntityCodeNamespace
            </if>
        </if>
        <if test="sorts != null and sorts.size > 0 and tripleNode != null">
            ORDER BY
            <foreach collection="sorts" item="item" separator=",">
                <if test="tripleNode.toString() == &quot;SUBJECT&quot;">
                    ${item.columnSortType.subjectColumn}
                </if>
                <if test="tripleNode.toString() == &quot;OBJECT&quot;">
                    ${item.columnSortType.objectColumn}
                </if>
                ${item.order}
            </foreach>
        </if>
    </select>

    <select id="getDistinctSources" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter"
            resultMap="nodeResult">
        SELECT DISTINCT sourceEntityCode          AS entityCode,
                        sourceEntityCodeNamespace AS entityCodeNamespace
        FROM ${prefix}entityAssnsToEntity
        WHERE associationPredicateGuid = #{param1}
    </select>

    <select id="getDistinctTargets" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter"
            resultMap="nodeResult">
        SELECT DISTINCT targetEntityCode          AS entityCode,
                        targetEntityCodeNamespace AS entityCodeNamespace
        FROM ${prefix}entityAssnsToEntity
        WHERE associationPredicateGuid = #{param1}
    </select>

    <select id="getTargetsOfSource" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTriple"
            resultMap="nodeResult">
        SELECT targetEntityCode          AS entityCode,
               targetEntityCodeNamespace AS entityCodeNamespace
        FROM ${prefix}entityAssnsToEntity
        WHERE associationPredicateGuid = #{param1}
          AND sourceEntityCode = #{param2}
          AND sourceEntityCodeNamespace = #{param3}
    </select>


    <select id="getSourcesOfTarget" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTriple"
            resultMap="nodeResult">
        SELECT sourceEntityCode          AS entityCode,
               sourceEntityCodeNamespace AS entityCodeNamespace
        FROM ${prefix}entityAssnsToEntity
        WHERE associationPredicateGuid = #{param1}
          AND targetEntityCode = #{param2}
          AND targetEntityCodeNamespace = #{param3}
    </select>

    <select id="getValueSetHierarchySourcesOfTargets"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterQuint"
            resultMap="valueSetHierarchyRootNodeResolution">
        SELECT
			   assns.sourceEntityCode AS entityCode,
			   assns.sourceEntityCodeNamespace AS namespace,
               ent.description                 AS description,
               CASE prop.propertyName
                   WHEN #{param3} THEN prop.propertyValue
                   END                         AS source,
               CASE prop2.propertyName
                   WHEN #{param4} THEN prop2.propertyValue
                   END                         AS publish
        FROM ${prefix}entityAssnsToEntity assns
                 LEFT JOIN
             ${prefix}entity ent
             ON
                 ent.entityCode = sourceEntityCode
                 LEFT JOIN
             ${prefix}property prop
             ON
                 ent.entityGuid = prop.referenceGuid
                 LEFT JOIN
             ${prefix}property prop2
             ON
                 prop2.referenceGuid = prop.referenceGuid
        WHERE associationPredicateGuid = #{param1}
          AND targetEntityCode = #{param2}
          AND (
                    prop.propertyName = #{param3}
                OR
                    prop2.propertyName = #{param4})
        GROUP BY description, publish, source

           having publish = #{param5}

    </select>

    <select id="getValueSetEntitiesFromCode"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple" resultMap="vsEntityResult">
        SELECT ent.entityGuid,
               ent.entityCode,
               ent.entityCodeNamespace,
               ent.isDefined,
               ent.isAnonymous,
               ent.description,
               ent.isActive,
               ent.owner,
               ent.status,
               ent.effectiveDate,
               ent.expirationDate
        FROM ${prefix}entityAssnsToEntity assns
                 JOIN
             ${prefix}entity ent
             ON
                 assns.sourceEntityCode = ent.entityCode
        WHERE assns.associationPredicateGuid = #{param1}
          AND assns.targetEntityCode = #{param2}
    </select>

    <select id="getValueSetTopNodesFromMemberCode"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple" resultMap="vsEntityResult">
        SELECT ent.entityGuid,
               ent.entityCode,
               ent.entityCodeNamespace,
               ent.isDefined,
               ent.isAnonymous,
               ent.description,
               ent.isActive,
               ent.owner,
               ent.status,
               ent.effectiveDate,
               ent.expirationDate
        FROM ${prefix}entityAssnsToEntity assns
                 JOIN
             ${prefix}entity ent
             ON
                 assns.targetEntityCode = ent.entityCode
        WHERE assns.associationPredicateGuid = #{param1}
          AND assns.sourceEntityCode = #{param2}
    </select>

    <select id="getVSEntityUids" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter"
            resultMap="Common.uidResult">
        SELECT ent.entityGuid AS uidKey
        FROM ${prefix}entityAssnsToEntity assns
                 JOIN
             ${prefix}entity ent
             ON
                 assns.sourceEntityCode = ent.entityCode
        WHERE assns.associationPredicateGuid = #{param1}
        GROUP BY ent.entityGuid
    </select>

    <select id="getVSEntityUidsForTopNodeCode"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple"
            resultMap="Common.uidResult">
        SELECT ent.entityGuid AS uidKey
        FROM ${prefix}entityAssnsToEntity assns
                 JOIN
             ${prefix}entity ent
             ON
                 assns.sourceEntityCode = ent.entityCode
        WHERE assns.associationPredicateGuid = #{param1}
          AND assns.targetEntityCode = #{param2}
        GROUP BY ent.entityGuid
    </select>

    <select id="getVSTopNodeEntityByCode"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple"
            resultMap="vsEntityResultWithProperties">
        SELECT ent.entityGuid,
               ent.entityCode,
               ent.entityCodeNamespace,
               ent.isDefined,
               ent.isAnonymous,
               ent.description,
               ent.isActive,
               ent.owner,
               ent.status,
               ent.effectiveDate,
               ent.expirationDate,
               prop.propertyName,
               prop.propertyValue
        FROM ${prefix}entity ent
                 JOIN
             ${prefix}property prop
             ON
                 entityGuid = referenceGuid
        WHERE codingSchemeGuid = #{param1}
          AND entityCode = #{param2}
    </select>

    <select id="getVSTopNodeEntityByDescription"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple"
            resultMap="vsEntityResultWithProperties">
        SELECT ent.entityGuid,
               ent.entityCode,
               ent.entityCodeNamespace,
               ent.isDefined,
               ent.isAnonymous,
               ent.description,
               ent.isActive,
               ent.owner,
               ent.status,
               ent.effectiveDate,
               ent.expirationDate,
               prop.propertyName,
               prop.propertyValue
        FROM ${prefix}entity ent
                 JOIN
             ${prefix}property prop
             ON
                 entityGuid = referenceGuid
        WHERE codingSchemeGuid = #{param1}
          AND description = #{param2}
    </select>

    <select id="getVSEntityCount" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple"
            resultMap="vsEntityCount">
        SELECT count(*) AS vsEntityCount
        FROM ${prefix}entityAssnsToEntity assns
        WHERE assns.associationPredicateGuid = #{param1}
          AND assns.targetEntityCode = #{param2}
    </select>


    <select id="getAllValidValueSetTopNodes"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTriple"
            resultMap="definedNodeResolution">
        SELECT assns.targetEntityCode          AS entityCode,
               assns.targetEntityCodeNamespace AS namespace,
               ent.description                 AS description
        FROM ${prefix}entityAssnsToEntity assns
                 LEFT JOIN
             ${prefix}entity ent
             ON
                 ent.entityCode = assns.targetEntityCode
                 LEFT JOIN
             ${prefix}property prop
             ON
                 ent.entityGuid = prop.referenceGuid
        WHERE associationPredicateGuid = #{param1}
          AND prop.propertyName = #{param2}
          AND prop.propertyValue = #{param3}
        GROUP BY assns.targetEntityCode,
                 assns.targetEntityCodeNamespace,
                 ent.description
    </select>

    <select id="getEntryStateUidByAssociationTarget"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter" resultMap="Common.uidResult">
        SELECT eate.entryStateGuid AS uidKey
        FROM ${prefix}entityAssnsToEntity eate
        WHERE eate.entityAssnsGuid = #{param1}
    </select>

    <select id="getAssnTargetAttributesByUId" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter"
            resultMap="associationTargetEntry">
        SELECT entAssn.entityAssnsGuid,
               entAssn.associationPredicateGuid,
               entAssn.sourceEntityCode,
               entAssn.sourceEntityCodeNamespace,
               entAssn.targetEntityCode,
               entAssn.targetEntityCodeNamespace,
               entAssn.associationInstanceId,
               entAssn.isDefining,
               entAssn.isInferred,
               entAssn.isActive,
               entAssn.owner,
               entAssn.status,
               entAssn.effectiveDate,
               entAssn.expirationDate,
               entAssn.entryStateGuid,
               quals.entityAssnQualsGuid,
               quals.referenceGuid,
               quals.qualifierName,
               quals.qualifierValue,
               quals.entryStateGuid esGuid
        FROM ${prefix}entityAssnsToEntity entAssn
                 LEFT JOIN
             ${prefix}entityAssnQuals quals
             ON
                 entAssn.entityAssnsGuid = quals.referenceGuid
        WHERE entAssn.entityAssnsGuid = #{param1}

    </select>

    <sql id="getTripleFragment">
        SELECT entAssn.sourceEntityCode,
               entAssn.sourceEntityCodeNamespace,
               entAssn.targetEntityCode,
               entAssn.targetEntityCodeNamespace,
               entAssn.associationInstanceId,
               entAssn.isDefining,
               entAssn.isInferred,
               entAssn.isActive,
               entAssn.owner,
               entAssn.status,
               entAssn.effectiveDate,
               entAssn.expirationDate,

               entryState.changeType,
               entryState.relativeOrder,

               currentRevision.revisionId  AS currentRevisionId,
               previousRevision.revisionId AS previousRevisionId

        FROM ${prefix}entityAssnsToEntity entAssn

                 LEFT JOIN
             ${actualTableSetPrefix}entryState entryState
             ON
                     entAssn.entryStateGuid =
                     entryState.entryStateGuid

                 LEFT JOIN
             ${defaultPrefix}revision currentRevision
             ON
                 entryState.revisionGuid = currentRevision.revisionGuid

                 LEFT JOIN
             ${defaultPrefix}revision previousRevision
             ON
                 entryState.prevRevisionGuid = previousRevision.revisionGuid
    </sql>

    <select id="getTripleByUid" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter"
            resultMap="associationSourceTripleEntry">
        <include refid="getTripleFragment"/>
        WHERE
        entAssn.entityAssnsGuid = #{param1}
    </select>

    <select id="getHistoryTripleByUidAndRevisionId"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple"
            resultMap="associationSourceTripleEntry">
        <include refid="getTripleFragment"/>
        WHERE
        entAssn.entityAssnsGuid = #{param1}
        AND
        currentRevision.revisionId = #{param2}
    </select>

    <update id="updateEntityAssnToEntityByUId"
            parameterType="org.lexevs.dao.database.ibatis.association.parameter.InsertOrUpdateAssociationTargetBean">
        UPDATE
        ${prefix}entityAssnsToEntity

        <set>
            <if test="associationSource.sourceEntityCode != null">
                sourceEntityCode = #{associationSource.sourceEntityCode},
            </if>
            <if test="associationSource.sourceEntityCodeNamespace != null">
                sourceEntityCodeNamespace = #{associationSource.sourceEntityCodeNamespace},
            </if>
            <if test="associationSource.targetEntityCode != null">
                targetEntityCode = #{associationTarget.targetEntityCode},
            </if>
            <if test="associationSource.targetEntityCodeNamespace != null">
                targetEntityCodeNamespace = #{associationTarget.targetEntityCodeNamespace},
            </if>
            <if test="associationSource.isDefining != null">
                isDefining = #{associationTarget.isDefining},
            </if>
            <if test="associationSource.isInferred != null">
                isInferred = #{associationTarget.isInferred},
            </if>
            <if test="entryStateUId != null">
                entryStateGuid = #{entryStateUId}
            </if>
        </set>

        WHERE
        entityAssnsGuid = #{uid}
    </update>

    <update id="updateEntityAssnToEntityVerAttribByUId"
            parameterType="org.lexevs.dao.database.ibatis.association.parameter.InsertOrUpdateAssociationTargetBean">
        UPDATE
        ${prefix}entityAssnsToEntity
        <set>
            <if test="associationTarget.isActive != null">
                isActive =
                #{associationTarget.isActive},
            </if>
            <if test="associationTarget.owner != null">
                owner = #{associationTarget.owner},
            </if>
            <if test="associationTarget.status != null">
                status = #{associationTarget.status},
            </if>
            <if test="associationTarget.effectiveDate != null">
                effectiveDate =
                #{associationTarget.effectiveDate},
            </if>
            <if test="associationTarget.expirationDate != null">
                expirationDate =
                #{associationTarget.expirationDate},
            </if>
            <if test="entryStateUId != null">
                entryStateGuid = #entryStateUId
            </if>
        </set>

        WHERE
        entityAssnsGuid = #{uid}
    </update>

    <delete id="deleteAssocTargetByAssnUId" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter">
        DELETE
        FROM ${prefix}entityAssnsToEntity
        WHERE entityAssnsGuid = #{param1}
    </delete>

    <select id="getAssociationTargetLatestRevisionIdByUId"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter" resultType="string">
        SELECT rev.revisionId
        FROM ${prefix}entityAssnsToEntity entAssnEnt,
             ${prefix}entryState es,
             ${defaultPrefix}revision rev
        WHERE entAssnEnt.entityAssnsGuid = #{param1}
          AND entAssnEnt.entryStateGuid = es.entryStateGuid
          AND es.revisionGuid = rev.revisionGuid
    </select>

    <sql id="getTripleUidsForMappingContainerPre">
        SELECT
        eate.entityAssnsGuid AS uidKey
        FROM
        ${prefix}entityAssnsToEntity eate

        INNER JOIN
        ${prefix}associationPredicate ap
        ON
        eate.associationPredicateGuid = ap.associationPredicateGuid

        INNER JOIN
        ${prefix}relation rel
        ON
        ap.relationGuid = rel.relationGuid

        <if test="sourceCodingSchemeUid != null">
            LEFT JOIN
            ${sourceSchemePrefix}entity sourceEntity
            ON (
            sourceEntity.entityCode = eate.sourceEntityCode

            <!-- We can't count on namespaces being the same across coding schemes.
                 We'd have to join with the supported attrib table to get the ns uri,
                 which could be expensive. For now, disregard namespace.
            AND
            sourceEntity.entityCodeNamespace = eate.sourceEntityCodeNamespace
            -->
            AND
            sourceEntity.codingSchemeGuid = #{sourceCodingSchemeUid}
            )
        </if>
        <if test="targetCodingSchemeUid != null">
            LEFT JOIN
            ${targetSchemePrefix}entity targetEntity
            ON (
            targetEntity.entityCode = eate.targetEntityCode

            <!-- We can't count on namespaces being the same across coding schemes.
                 We'd have to join with the supported attrib table to get the ns uri,
                 which could be expensive. For now, disregard namespace.
            AND
            targetEntity.entityCodeNamespace = eate.targetEntityCodeNamespace
            -->
            AND
            targetEntity.codingSchemeGuid = #{targetCodingSchemeUid}
            )
        </if>


        <if test="sortList != null and sortList.size > 0">
            <foreach collection="sortList" item="item">

                <if test="item.getColumnSortType().getName() == &quot;QUALIFIER&quot; and item.getQualifierName() != null and item.getTableAlias() !=null">
                    (#{item})
                    LEFT JOIN
                    ${prefix}entityAssnQuals #{item.getTableAlias}
                    ON (
                    eate.entityAssnsGuid = #{item.getTableAlias}.referenceGuid
                    AND
                    ${item.getTableAlias}.qualifierName = #{item.qualifierName}
                    AND
                    ${item.tableAlias}.qualifierValue =
                    (SELECT
                    <if test="item.order == ASC">
                        MAX(
                    </if>
                    <if test="item.order == DESC">
                        MIN(
                    </if>
                    maxQual.qualifierValue)
                    FROM
                    ${prefix}entityAssnQuals maxQual
                    WHERE
                    maxQual.referenceGuid = eate.entityAssnsGuid
                    AND
                    maxQual.qualifierName = #{item.qualifierName}
                    )
                    )
                </if>
            </foreach>
        </if>

        WHERE
        rel.codingSchemeGuid = #{mappingCodingSchemeUid}
        AND
        rel.containerName = #{relationsContainerName}
    </sql>

    <sql id="getTripleUidsForMappingContainerPost">
        <if test="sortList != null and sortList.size > 0 and sortList.get(0).getColumnSortType().getName() == &quot;QUALIFIER&quot;">
            <foreach collection="sortList" item="item" open="ORDER BY" separator=",">
			<if test="item.getColumnSortType().getName() == &quot;QUALIFIER&quot;">
                <if test="item.getQualifierName() !=null">
                    ${item.columnSortType.mappingColumn}
                    ${item.order}
                </if>
                <if test="item.qualifierName ==null">
                    ${item.getTableAlias().columnSortType.mappingColumn}
                    ${item.order}
                </if>
			</if>
            </foreach>
        </if>
    </sql>

    <select id="getTripleUidsForMappingContainer"
            parameterType="org.lexevs.dao.database.ibatis.codednodegraph.IbatisCodedNodeGraphDao$MappingTripleParameterBean"
            resultMap="Common.uidResult">
        <include refid="getTripleUidsForMappingContainerPre"/>
        <include refid="getTripleUidsForMappingContainerPost"/>
    </select>

    <select id="getCompleteInstanceToGuidMap"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedTableParameterBean"
            resultMap="instanceToGuidMapResult">
        SELECT eae.associationInstanceId as instance,
               eae.entityAssnsGuid       as value
        FROM ${prefix}entityAssnsToEntity eae
    </select>

    <select id="getTripleUidsForMappingContainerAndCodesWithSort"
            parameterType="org.lexevs.dao.database.ibatis.codednodegraph.IbatisCodedNodeGraphDao$RestrictingMappingTripleParameterBean"
            resultMap="Common.uidResult">
        <include refid="getTripleUidsForMappingContainerPre"/>
        <if test="sourceConceptReferences != null and sourceConceptReferences.size > 0">AND
            eate.sourceEntityCode IN (  <foreach collection="sourceConceptReferences" item="item" separator=",">
                #{item.code}
            </foreach> )
        </if>

        <if test="targetConceptReferences != null and targetConceptReferences.size > 0">AND
            eate.targetEntityCode IN (  <foreach collection="targetConceptReferences" item="item" separator=",">
                #{item.code}
            </foreach> )
        </if>

        <if test="sourceOrTargetConceptReferences != null and sourceOrTargetConceptReferences.size > 0">AND
            (
            eate.sourceEntityCode IN (  <foreach collection="sourceOrTargetConceptReferences" item="item" separator=",">
                #{item.code}
            </foreach> )

            OR

            eate.targetEntityCode IN (  <foreach collection="sourceOrTargetConceptReferences" item="item" separator=",">
                #{item.code}
            </foreach> )
            )
        </if>
        <include refid="getTripleUidsForMappingContainerPost"/>
    </select>

    <select id="getTripleUidsForMappingContainerAndCodesNoSort"
            parameterType="org.lexevs.dao.database.ibatis.parameter.SequentialMappedParameterBean"
            resultMap="Common.uidResult">

        SELECT
        eate.entityAssnsGuid AS uidKey
        FROM
        ${prefix}entityAssnsToEntity eate

        INNER JOIN
        ${prefix}associationPredicate ap
        ON
        (eate.associationPredicateGuid = ap.associationPredicateGuid)

        INNER JOIN
        ${prefix}relation rel
        ON
        (ap.relationGuid = rel.relationGuid)

        WHERE
        rel.codingSchemeGuid = #{param1}
        AND
        rel.containerName = #{param2}

        <if test="param3 != null and param3.size > 0">AND
            eate.sourceEntityCode IN (  <foreach collection="param3" item="item" separator=",">#{item.code}
            </foreach> )
        </if>

        <if test="param4 != null and param4.size > 0">AND
            eate.targetEntityCode IN (  <foreach collection="param4" item="item" separator=",">#{item.code}
            </foreach> )
        </if>

        <if test="param5 != null and param5.size > 0">AND
            (
            eate.sourceEntityCode IN (  <foreach collection="param5" item="item" separator=",">#{item.code}
            </foreach> )

            OR

            eate.targetEntityCode IN (  <foreach collection="param5" item="item" separator=",">#{item.code}
            </foreach> )
            )
        </if>
    </select>

    <select id="getTriplesForMappingContainer"
            parameterType="org.lexevs.dao.database.ibatis.parameter.SequentialMappedParameterBean"
            resultMap="mappingTripleSubjectResult">
        SELECT
        eate.entityAssnsGuid AS tripleUid,

        eate.sourceEntityCode AS sourceEntityCode,
        sourceEntity.entityCodeNamespace AS sourceEntityCodeNamespace,
        <if test="param2 != null">
            sourceEntity.description AS sourceEntityDescription,
        </if>
        <if test="param2 == null">
            NULL AS sourceEntityDescription,
        </if>

        eate.targetEntityCode AS targetEntityCode,
        targetEntity.entityCodeNamespace AS targetEntityCodeNamespace,
        <if test="param4 != null">
            targetEntity.description AS targetEntityDescription,
        </if>
        <if test="param4 == null">
            NULL AS targetEntityDescription,
        </if>

        ap.associationName AS associationName,

        quals.qualifierName,
        quals.qualifierValue
        FROM
        ${prefix}entityAssnsToEntity eate

        INNER JOIN
        ${prefix}associationPredicate ap
        ON
        eate.associationPredicateGuid = ap.associationPredicateGuid

        INNER JOIN
        ${prefix}relation rel
        ON
        ap.relationGuid = rel.relationGuid

        <if test="param2 != null">
            LEFT JOIN
            ${param3}entity sourceEntity
            ON (
            sourceEntity.entityCode = eate.sourceEntityCode
            <!-- We can't count on namespaces being the same across coding schemes.
                 We'd have to join with the supported attrib table to get the ns uri,
                 which could be expensive. For now, disregard namespace.
            AND
            sourceEntity.entityCodeNamespace = eate.sourceEntityCodeNamespace
            -->
            AND
            sourceEntity.codingSchemeGuid = #{param2}
            )
        </if>
        <if test="param4 != null">
            LEFT JOIN
            ${param5}entity targetEntity
            ON (
            targetEntity.entityCode = eate.targetEntityCode
            <!-- We can't count on namespaces being the same across coding schemes.
                 We'd have to join with the supported attrib table to get the ns uri,
                 which could be expensive. For now, disregard namespace.
            AND
            targetEntity.entityCodeNamespace = eate.targetEntityCodeNamespace
            -->
            AND
            targetEntity.codingSchemeGuid = #{param4}
            )
        </if>

        LEFT JOIN
        ${prefix}entityAssnQuals quals
        ON (eate.entityAssnsGuid = quals.referenceGuid)

        WHERE
        eate.entityAssnsGuid IN (  <foreach collection="param7" item="item" separator=",">
        #{item}
    </foreach> )
        AND
        rel.codingSchemeGuid = #{param1}
        AND
        rel.containerName = #{param6}
    </select>

    <sql id="getTriplesForMappingContainerCountFragment">
        SELECT COUNT(eate.entityAssnsGuid)
        FROM ${prefix}entityAssnsToEntity eate

                 INNER JOIN
             ${prefix}associationPredicate ap
             ON
                 (eate.associationPredicateGuid = ap.associationPredicateGuid)

                 INNER JOIN
             ${prefix}relation rel
             ON
                 (ap.relationGuid = rel.relationGuid)
    </sql>

    <select id="getTriplesForMappingContainerCount"
            parameterType="org.lexevs.dao.database.ibatis.parameter.SequentialMappedParameterBean" resultType="int">
        <include refid="getTriplesForMappingContainerCountFragment"/>
        WHERE
        rel.codingSchemeGuid = #{param1}
        AND
        rel.containerName = #{param2}
    </select>

    <select id="getTriplesForMappingContainerAndCodesCount"
            parameterType="org.lexevs.dao.database.ibatis.parameter.SequentialMappedParameterBean" resultType="int">
        <include refid="getTriplesForMappingContainerCountFragment"/>

        WHERE
        rel.codingSchemeGuid = #{param1}
        AND
        rel.containerName = #{param2}

        <if test="param3 != null and param3.size > 0">AND
            eate.sourceEntityCode IN (  <foreach collection="param3" item="item" separator=",">#{item.code}
            </foreach> )
        </if>

        <if test="param4 != null and param4.size > 0">AND
            eate.targetEntityCode IN (  <foreach collection="param4" item="item" separator=",">#{item.code}
            </foreach> )
        </if>

        <if test="param5 != null and param5.size > 0">AND
            (
            eate.sourceEntityCode IN (  <foreach collection="param5" item="item" separator=",">#{item.code}
            </foreach> )

            OR

            eate.targetEntityCode IN (  <foreach collection="param5" item="item" separator=",">#{item.code}
            </foreach> )
            )
        </if>
    </select>

    <select id="getCodeMappingParticipationCount"
            parameterType="org.lexevs.dao.database.ibatis.parameter.SequentialMappedParameterBean" resultType="int">
        SELECT
        COUNT(*)
        FROM
        ${prefix}entityAssnsToEntity eate

        INNER JOIN
        ${prefix}associationPredicate ap
        ON
        eate.associationPredicateGuid = ap.associationPredicateGuid

        INNER JOIN
        ${prefix}relation rel
        ON
        ap.relationGuid = rel.relationGuid

        WHERE
        rel.codingSchemeGuid = #{param1}
        AND
        (
        (


        <if test="param3 != null">
            eate.sourceEntityCode = #{param3}
        </if>
        <if test="param5 != null and param5.size > 0">AND
            eate.sourceEntityCodeNamespace = #{param2}
        </if>
        )
        OR
        (

        <if test="param3 != null">
            eate.targetEntityCode = #{param3}
        </if>
        <if test="param5 != null and param5.size > 0">AND
            eate.targetEntityCodeNamespace = #{param2}
        </if>
        )
        )
    </select>

    <select id="getAnonDesignationForPredicateId"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple" resultType="string">
        SELECT
        en.isAnonymous
        FROM
        ${prefix}entity en
        INNER JOIN
        ${prefix}csSupportedAttrib sa
        ON
        en.entityCode = sa.assnEntityCode
        INNER JOIN
        ${prefix}associationPredicate ap
        ON
        ap.associationName = sa.id
        WHERE
        <if test="param1 != null">
            ap.associationPredicateGuid =
            #{param1}
        </if>
        AND
        sa.supportedAttributeTag = #{param2}
    </select>

    <select id="getAllEntityAssocEntityGuids" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter"
            resultType="java.lang.String">
        SELECT eae.entityAssnsGuid as guid
        FROM ${prefix}entityAssnsToEntity as eae
    </select>

    <select id="getGraphDbTriples" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterCollection"
            resultMap="Association.graphdbTripleResult">
        SELECT
        eae.sourceEntityCode,
        eae.sourceEntityCodeNamespace,
        eae.targetEntityCode,
        eae.targetEntityCodeNamespace,
        eae.associationPredicateGuid,
        eae.entityAssnsGuid,
        eae.associationInstanceId,
        ap.associationName,
        source.description as sd,
        target.description as td
        FROM
        ${prefix}entityAssnsToEntity eae
        INNER JOIN
        ${prefix}associationPredicate ap
        ON
        eae.associationPredicateGuid =
        ap.associationPredicateGuid
        INNER JOIN
        ${prefix}relation rel
        ON
        ap.relationGuid =
        rel.relationGuid
        LEFT JOIN
        ${prefix}entity source
        ON
        source.entityCode = eae.sourceEntityCode
        LEFT JOIN
        ${prefix}entity target
        ON
        target.entityCode = eae.targetEntityCode

        WHERE
        rel.codingSchemeGuid =
        #{param1}
        AND
        eae.entityAssnsGuid
        IN
        (  <foreach collection="param2" item="item" separator=",">#{item}
    </foreach> )
    </select>

    <select id="getGraphDbTriplesAncestorsTr"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTriple"
            resultMap="Association.graphdbTripleTrResult">

        SELECT eae.sourceEntityCode,
               eae.sourceEntityCodeNamespace,
               eae.targetEntityCode,
               eae.targetEntityCodeNamespace,
               eae.associationPredicateGuid,
               eae.entityAssnsTrGuid,
               ap.associationName,
               source.description as sd,
               target.description as td
        FROM ${prefix}entityAssnsToEntityTr eae
                 INNER JOIN
             ${prefix}associationPredicate ap
             ON
                     eae.associationPredicateGuid =
                     ap.associationPredicateGuid
                 INNER JOIN
             ${prefix}relation rel
             ON
                     ap.relationGuid =
                     rel.relationGuid
                 LEFT JOIN
             ${prefix}entity source
             ON
                 source.entityCode = eae.sourceEntityCode
                 LEFT JOIN
             ${prefix}entity target
             ON
                 target.entityCode = eae.targetEntityCode

        WHERE rel.codingSchemeGuid =
              #{param1}
          AND eae.sourceEntityCode = #{param2}

          AND ap.associationName = #{param3}
    </select>

    <select id="getGraphDbTriplesDecendentsTr"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTriple"
            resultMap="Association.graphdbTripleTrResult">

        SELECT eae.sourceEntityCode,
               eae.sourceEntityCodeNamespace,
               eae.targetEntityCode,
               eae.targetEntityCodeNamespace,
               eae.associationPredicateGuid,
               eae.entityAssnsTrGuid,
               ap.associationName,
               source.description as sd,
               target.description as td
        FROM ${prefix}entityAssnsToEntityTr eae
                 INNER JOIN
             ${prefix}associationPredicate ap
             ON
                     eae.associationPredicateGuid =
                     ap.associationPredicateGuid
                 INNER JOIN
             ${prefix}relation rel
             ON
                     ap.relationGuid =
                     rel.relationGuid
                 LEFT JOIN
             ${prefix}entity source
             ON
                 source.entityCode = eae.sourceEntityCode
                 LEFT JOIN
             ${prefix}entity target
             ON
                 target.entityCode = eae.targetEntityCode

        WHERE rel.codingSchemeGuid =
              #{param1}
          AND eae.targetEntityCode = #{param2}
          AND ap.associationName = #{param3}
          AND (source.isAnonymous != 1 OR source.isAnonymous IS NULL)
    </select>

    <select id="getFullMapOfTerminologyWithEntityNames"
            parameterType="org.lexevs.dao.database.ibatis.parameter.SourceAndTargetMappingPrefixedParameter"
            resultMap="Association.mapGraphSuperTriplesAndMetaData">
        SELECT sourceEntityCodeNameSpace AS source,
               sourceEntityCode          AS sourceCode,
               sourceEnt.description     AS sourceName,
               pred.associationName      AS rel,
               quals.qualifierValue      AS mapRank,
               targetEntityCodeNameSpace AS target,
               targetEntityCode          AS targetCode,
               tent.description          AS targetName
        FROM ${prefix}entityAssnsToEntity AS assns
                 JOIN
             ${sourcePrefix}entity AS sourceEnt
             ON
                 sourceEntityCode = sourceEnt.entityCode
                 JOIN
             ${targetPrefix}entity AS tent
             ON
                 targetEntityCode = tent.entityCode
                 JOIN
             ${prefix}associationPredicate AS pred
             ON
                 pred.associationPredicateGuid = assns.associationPredicateGuid
                 LEFT OUTER JOIN
             ${prefix}entityAssnQuals AS quals
             ON
                         quals.referenceGuid = assns.entityAssnsGuid
                     AND
                         quals.qualifierName = #{param1}
    </select>

    <select id="getMinimalTriplesForMappingContainer"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter"
            resultMap="Association.tripleResult">
        SELECT pred.associationPredicateGuid,
               assn.sourceEntityCode,
               assn.sourceEntityCodeNamespace,
               assn.targetEntityCode,
               assn.targetEntityCodeNamespace
        FROM ${prefix}entityAssnsToEntity assn
                 JOIN
             ${prefix}associationPredicate pred
             ON
                 assn.associationPredicateGuid = pred.associationPredicateGuid
                 JOIN
             ${prefix}relation rel
             ON
                 pred.relationGuid = rel.relationGuid
        WHERE rel.containerName = #{param1}
    </select>

    <select id="getNaturualRootsForAssociationUid"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter" resultType="java.lang.String">
        SELECT distinct(targetEntityCode)
        FROM ${prefix}entityAssnsToEntity assn
                 JOIN
             ${prefix}entity ent
             ON
                 assn.targetEntityCode = ent.entityCode
        WHERE assn.associationPredicateGuid = #{param1}
          AND ent.isAnonymous = '0'
          AND targetEntityCode
            NOT IN
              (SELECT sourceEntityCode
               FROM ${prefix}entityAssnsToEntity
               WHERE associationPredicateGuid = #{param1})
    </select>

    <select id="getValidTriplesForAssociationPredicateGuid"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter"
            resultMap="Association.tripleResult">
        SELECT eae.sourceEntityCode,
               eae.sourceEntityCodeNamespace,
               eae.targetEntityCode,
               eae.targetEntityCodeNamespace,
               eae.associationPredicateGuid
        FROM ${prefix}entityAssnsToEntity eae
                 RIGHT JOIN
             ${prefix}entity ent1
             ON
                 eae.sourceEntityCode = ent1.entityCode
                 RIGHT JOIN
             ${prefix}entity ent2
             ON
                 eae.targetEntityCode = ent2.entityCode
        WHERE eae.associationPredicateGuid = #{param1}
          AND (ent1.isAnonymous = '0' OR ent1.isAnonymous is null)
          AND (ent2.isAnonymous = '0' OR ent2.isAnonymous is null)
    </select>

    <select id="getValidSextuplesForAssociationPredicateGuid"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter"
            resultMap="Association.sextupleResult">
        SELECT eae.sourceEntityCode,
               eae.sourceEntityCodeNamespace,
               ent1.description AS sourceEntityDescription,
               eae.targetEntityCode,
               eae.targetEntityCodeNamespace,
               ent2.description AS targetEntityDescription,
               eae.associationPredicateGuid
        FROM ${prefix}entityAssnsToEntity eae
                 RIGHT JOIN
             ${prefix}entity ent1
             ON
                 eae.sourceEntityCode = ent1.entityCode
                 RIGHT JOIN
             ${prefix}entity ent2
             ON
                 eae.targetEntityCode = ent2.entityCode
        WHERE eae.associationPredicateGuid = #{param1}
          AND (ent1.isAnonymous = '0' OR ent1.isAnonymous is null)
          AND (ent2.isAnonymous = '0' OR ent2.isAnonymous is null)
    </select>

    <select id="validateNodeInAssociation"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple"
            resultType="java.lang.Integer">
        SELECT count(entityAssnsGuid)
        FROM ${prefix}entityAssnsToEntity
        WHERE associationPredicateGuid = #{param1}
          AND (sourceEntityCode = #{param2} OR targetEntityCode = #{param2})
          AND (targetEntityCode not like "@%" OR sourceEntityCode not like "@%")
    </select>

    <select id="getValidAssociationPredicatesForTargetOrSourceOf"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter" resultType="java.lang.String">
        SELECT DISTINCT(pred.associationName)
        FROM ${prefix}associationPredicate
                 AS pred
                 JOIN
             ${prefix}entityAssnsToEntity
                 AS assn
             ON
                 pred.associationPredicateGuid = assn.associationPredicateGuid
        WHERE (assn.sourceEntityCode = #{param1} OR assn.targetEntityCode = #{param1})
          AND (assn.`sourceEntityCode` not like "@%" OR assn.`targetEntityCode` not like "@%")
    </select>
</mapper>