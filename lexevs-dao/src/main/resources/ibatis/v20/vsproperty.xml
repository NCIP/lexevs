<?xml version="1.0" encoding="UTF-8"?><!--Converted at: Mon Apr 18 08:46:17 EDT 2022-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="VSProperty">


	<resultMap id="vsPropertyBean" type="org.lexevs.dao.database.ibatis.valuesets.parameter.VSPropertyBean">
		<result property="vsPropertyGuid" column="vsPropertyGuid" />
		<collection property="property" resultMap="VSProperty.propertyResult"/>
	</resultMap>
	
	<resultMap id="propertyResult" type="property">
		<result property="propertyName" column="propertyName"/>	
		<result property="propertyId" column="propertyId"/>
		<result property="propertyType" column="propertyType"/>
		<result property="language" column="language"/>
		<result property="value.content" column="propertyValue"/>
		<result property="value.dataType" column="format"/>
		<result property="isActive" column="isActive"/>
		<result property="owner" column="owner"/>
		<result property="status" column="status"/>
		<result property="effectiveDate" column="effectiveDate"/>
		<result property="expirationDate" column="expirationDate"/>
		<collection property="entryState" resultMap="Versions.entryStateResult"/>
		<discriminator javaType="string" column="propertyType">
			<case value="presentation" resultMap="presentationResult"/>
			<case value="definition" resultMap="definitionResult"/>
			<case value="comment" resultMap="commentResult"/>
		</discriminator>	
	</resultMap>
	
	<resultMap id="assertedValueSetPropertyResult" type="property">
		<result property="propertyType" column="propertyType"/>
		<result property="propertyName" column="propertyName"/>
		<result property="value.content" column="propertyValue"/>
		<discriminator javaType="string" column="propertyType">
			<case value="presentation" resultMap="assertedVSPresentationResult"/>
			<case value="definition" resultMap="assertedVSDefinitionResult"/>
			<case value="comment" resultMap="assertedVSCommentResult"/>
		</discriminator>	
	</resultMap>
	
	<resultMap id="propertyAttributeResult" type="insertOrUpdatePropertyBean">
		<result property="uid" column="vsPropertyGuid" />
		<result property="parentUId" column="referenceGuid" />
		<result property="parentType" column="referenceType"/>	
		<result property="property.propertyId" column="propertyId"/>
		<result property="property.propertyType" column="propertyType"/>
		<result property="property.propertyName" column="propertyName"/>	
		<result property="property.language" column="language"/>
		<result property="property.value.dataType" column="format"/>
		<result property="isPreferred" column="isPreferred"/>
		<result property="matchIfNoContext" column="matchIfNoContext"/>
		<result property="degreeOfFidelity" column="degreeOfFidelity"/>
		<result property="representationalForm" column="representationalForm"/>		
		<result property="property.value.content" column="propertyValue"/>		
		<result property="property.isActive" column="isActive"/>
		<result property="property.owner" column="owner"/>
		<result property="property.status" column="status"/>
		<result property="property.effectiveDate" column="effectiveDate"/>
		<result property="property.expirationDate" column="expirationDate"/>
		<result property="entryStateUId" column="entryStateGuid" />
		<collection property="propertyMultiAttribList" resultMap="VSProperty.propertyMultiAttribResultBean"/>
	</resultMap>
	
	<resultMap id="propertyAttributeResultWithNoMultiAttrib" type="insertOrUpdatePropertyBean">
		<result property="uid" column="vsPropertyGuid" />
		<result property="parentUId" column="referenceGuid" />
		<result property="parentType" column="referenceType"/>	
		<result property="property.propertyId" column="propertyId"/>
		<result property="property.propertyType" column="propertyType"/>
		<result property="property.propertyName" column="propertyName"/>	
		<result property="property.language" column="language"/>
		<result property="property.value.dataType" column="format"/>
		<result property="isPreferred" column="isPreferred"/>
		<result property="matchIfNoContext" column="matchIfNoContext"/>
		<result property="degreeOfFidelity" column="degreeOfFidelity"/>
		<result property="representationalForm" column="representationalForm"/>		
		<result property="property.value.content" column="propertyValue"/>		
		<result property="property.isActive" column="isActive"/>
		<result property="property.owner" column="owner"/>
		<result property="property.status" column="status"/>
		<result property="property.effectiveDate" column="effectiveDate"/>
		<result property="property.expirationDate" column="expirationDate"/>
		<result property="entryStateUId" column="entryStateGuid" />
	</resultMap>
	
	<resultMap id="presentationResult" type="presentation" extends="propertyResult">
		<result property="isPreferred" column="isPreferred"/>
		<result property="degreeOfFidelity" column="degreeOfFidelity"/>
		<result property="matchIfNoContext" column="matchIfNoContext"/>
		<result property="representationalForm" column="representationalForm"/>
	</resultMap>
	
		<resultMap id="assertedVSPresentationResult" type="presentation" extends="assertedValueSetPropertyResult">
		<result property="isPreferred" column="isPreferred"/>
	</resultMap>
	
	<resultMap id="definitionResult" type="definition" extends="propertyResult">
		<result property="isPreferred" column="isPreferred"/>
	</resultMap>
	
	<resultMap id="assertedVSDefinitionResult" type="definition" extends="assertedValueSetPropertyResult">
		<result property="isPreferred" column="isPreferred"/>
	</resultMap>
	
	<resultMap id="commentResult" type="comment" extends="propertyResult"/>
		
	<resultMap id="assertedVSCommentResult" type="comment" extends="assertedValueSetPropertyResult"/>

	
	<select id="getPropertyGuid" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple" resultMap="Common.uidResult">
  		SELECT
  			vsPropertyGuid AS uidKey
  		FROM
  			${prefix}vsProperty
  		WHERE
			referenceGuid = #{param1}
		AND
			propertyId = #{param2}
  	</select>
  	
  	<sql id="selectPropertyFragment">
  		SELECT
  			property.vsPropertyGuid,
  			property.referenceType,
  			property.propertyId,
  			property.propertyType,
  			property.propertyName,
  			property.language,
  			property.format,
  			property.isPreferred,
  			property.matchIfNoContext,
  			property.degreeOfFidelity,
  			property.representationalForm,
  			property.propertyValue,
  			property.isActive,
  			property.owner,
  			property.status,
  			property.effectiveDate,
  			property.expirationDate,
  			entryState.changeType,
  			entryState.relativeOrder,
  			entryState.relativeOrder,
  			
  			currentRevision.revisionId AS currentRevisionId,
  			previousRevision.revisionId AS previousRevisionId  			
  		FROM
  			${prefix}vsProperty property
  		LEFT JOIN
  			${prefix}vsEntryState entryState
  		ON
  			property.entryStateGuid =
  			entryState.entryStateGuid	
  		LEFT JOIN
  			${defaultPrefix}revision currentRevision
  		ON
  			entryState.revisionGuid =
  			currentRevision.revisionGuid	
		LEFT JOIN
  			${defaultPrefix}revision previousRevision
  		ON
  			entryState.prevRevisionGuid =
  			previousRevision.revisionGuid	
  	</sql>
  	
  	<sql id="getHistoryPropertyFragment">
  	  	<include refid="selectPropertyFragment"/>
  				
  		LEFT JOIN
  			${prefix}vsPropertyMultiAttrib qualifier
  		ON
  		(
  			property.vspropertyGuid = qualifier.vspropertyGuid	
  			AND		
  			qualifier.attributeType = 'qualifier'		
  			AND	
  			qualifier.entryStateGuid = property.entryStateGuid
  		)
  			
  		LEFT JOIN
  			${prefix}vsPropertyMultiAttrib usageContext
  		ON
  		(
  			property.vspropertyGuid = usageContext.vspropertyGuid	
  			AND 			
  			usageContext.attributeType = 'usageContext' 			
  			AND 			
  			usageContext.entryStateGuid = property.entryStateGuid
  		)
  			
  		LEFT JOIN
  			${prefix}vsPropertyMultiAttrib source
  		ON
  		(
  			property.vspropertyGuid = source.vspropertyGuid		
  			AND	
  			source.attributeType = 'source'	
  			AND	
  			source.entryStateGuid = property.entryStateGuid
  		)		
  	</sql>
  	
  	<sql id="getPropertyFragment">
  	  	<include refid="selectPropertyFragment"/>
  				
  		LEFT JOIN
  			${prefix}vsPropertyMultiAttrib multiAttrib
  		ON
	  		property.vspropertyGuid = multiAttrib.vspropertyGuid
  	</sql>

  	<select id="getPropertiesByParent" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple" resultMap="vsPropertyBean">
		<include refid="selectPropertyFragment"/>
  		WHERE
			property.referenceType = #{param1}
		AND 
			property.referenceGuid = #{param2}
  	</select>
  	  	
  	<select id="getPropertiesByParentAndRevisionId" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTriple" resultMap="propertyResult">
		<include refid="getHistoryPropertyFragment"/>
  		WHERE
			property.referenceType = #{param1}
		AND 
			property.referenceGuid = #{param2}
		AND 
			entryState.revisionGuid = #{param3}
  	</select>

	<delete id="deletePickListDefinitionPropertiesByPickListGuid" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple">
		DELETE FROM
			${prefix}vsProperty
		WHERE
			referenceType = #{param1}
		AND 
			referenceGuid = #{param2}
	</delete>
	
	<delete id="deletePickListEntryPropertiesByPickListGuid" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple">
		DELETE FROM
			${prefix}vsProperty
		WHERE
			referenceType = #{param1}
		AND 
			referenceGuid 
		IN	(
			SELECT 
				vsPLEntryGuid
			FROM
				${prefix}vsPLEntry
			WHERE
				vsPickListGuid = #{param2}
			)
	</delete>
	
	<delete id="deleteValueSetDefinitionPropertiesByValueSetGuid" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple">
		DELETE FROM
			${prefix}vsProperty
		WHERE
			referenceType = #{param1}
		AND 
			referenceGuid = #{param2}
	</delete>

	<delete id="deletePickListEntryPropertiesByPlEntryGuid" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple">
		DELETE FROM
			${prefix}vsProperty
		WHERE
			referenceType = #{param1}
		AND 
			referenceGuid = #{param2}
	</delete>
		
	<delete id="deleteDefinitionEntryPropertiesByValueSetGuid" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple">
		DELETE FROM
			${prefix}vsProperty
		WHERE
			referenceType = #{param1}
		AND 
			referenceGuid 
		IN	(
			SELECT 
				vsdEntryGuid
			FROM
				${prefix}vsdEntry
			WHERE
				valueSetDefGuid = #{param2}
			)
	</delete>
	
	
     <insert id="insertProperty" parameterType="org.lexevs.dao.database.ibatis.property.parameter.InsertOrUpdatePropertyBean">
		INSERT INTO ${prefix}vsProperty (
			vsPropertyGuid,
			referenceGuid,
			referenceType,
			propertyId,
			propertyType,
			propertyName,
			language,
			format,
			isPreferred,
			matchIfNoContext,
			degreeOfFidelity,
			representationalForm,
			propertyValue,
			isActive,
			owner,
			status,
			effectiveDate,
			expirationDate,
			entryStateGuid
		) VALUES (
			#{uid}, 
			#{parentUId},
			#{parentType}, 
			#{property.propertyId}, 
			#{property.propertyType},
			#{property.propertyName},
			#{property.language},
			#{property.value.dataType},

		    <if test="property.isPreferred !=null">
				#{property.isPreferred},
			</if>
		 <if test="property.isPreferred ==null">
			 null,
		 </if>

		 <if test="property.matchIfNoContext !=null">
			 #{property.matchIfNoContext},
		 </if>
		 <if test="property.matchIfNoContext ==null">
			 null,
		 </if>

		 <if test="property.degreeOfFidelity !=null">
			 #{property.degreeOfFidelity},
		 </if>
		 <if test="property.degreeOfFidelity ==null">
			 null,
		 </if>

		 <if test="property.representationalForm !=null">
			 #{property.representationalForm},
		 </if>
		 <if test="property.representationalForm ==null">
			 null,
		 </if>
			

			#{property.value.content},	
			#{property.isActive},
			#{property.owner},
			#{property.status},
			#{property.effectiveDate},
			#{property.expirationDate},
			#{entryStateUId}
		)
  </insert>
  
  <update id="updatePropertyByUId" parameterType="org.lexevs.dao.database.ibatis.property.parameter.InsertOrUpdatePropertyBean">
  		UPDATE 
			${prefix}vsProperty
		<set>
			<if test="property.propertyType !=null">
				propertyType = #{property.propertyType},
			</if>
			<if test="property.propertyName !=null">
				propertyName = #{property.propertyName},
			</if>
			<if test="property.language !=null">
				language = #{property.language},
			</if>
			<if test="property.value.dataType !=null">
				format = #{property.value.dataType},
			</if>
			<if test="property.isPreferred !=null">
				isPreferred = #{property.isPreferred},
			</if>
			<if test="property.matchIfNoContext !=null">
				matchIfNoContext = #{property.matchIfNoContext},
			</if>
			<if test="property.degreeOfFidelity !=null">
				degreeOfFidelity = #{property.degreeOfFidelity},
			</if>
			<if test="property.representationalForm !=null">
				representationalForm = #{property.representationalForm},
			</if>
			<if test="property.value.content !=null">
				propertyValue = #{property.value.content},
			</if>
			<if test="property.isActive !=null">
				isActive = #{property.isActive},
			</if>
			<if test="property.owner !=null">
				owner = #{property.owner},
			</if>
			<if test="property.status !=null">
				status = #{property.status},
			</if>
			<if test="property.effectiveDate !=null">
				effectiveDate = #{property.effectiveDate},
			</if>
			<if test="property.expirationDate !=null">
				expirationDate = #{property.expirationDate},
			</if>
			<if test="entryStateUId !=null">
				entryStateGuid = #{entryStateUId}
			</if>
		</set>

		 WHERE
		 	vsPropertyGuid = #{uid}
  </update>
    
  <update id="updatePropertyVerAttribByUId" parameterType="org.lexevs.dao.database.ibatis.property.parameter.InsertOrUpdatePropertyBean">
  		UPDATE 
			${prefix}vsProperty
		<set>
			<if test="property.isActive !=null">
				isActive = #{property.isActive},
			</if>
  		    <if test="property.owner !=null">
				owner = #{property.owner},
			</if>
			<if test="property.status !=null">
				status = #{property.status},
			</if>
			<if test="property.effectiveDate !=null">
				effectiveDate = #{property.effectiveDate},
			</if>
			<if test="property.expirationDate !=null">
				expirationDate = #{property.expirationDate},
			</if>
			<if test="entryStateUId !=null">
				entryStateGuid = #{entryStateUId}
			</if>
		</set>

		 WHERE
		 	vsPropertyGuid = #{uid}
  </update>
	
	<delete id="deletePropertyByUId" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter">
		DELETE FROM
			${prefix}vsProperty
		WHERE
			vsPropertyGuid = #{param1}
	</delete>
	
	<select id="getPropertyAttributesByUId" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter" resultMap="propertyAttributeResult">
		SELECT 
			prop.vsPropertyGuid,
			prop.referenceGuid,
			prop.referenceType,
			prop.propertyId,
			prop.propertyType,
			prop.propertyName,
			prop.language,
			prop.format,
			prop.isPreferred,
			prop.matchIfNoContext,
			prop.degreeOfFidelity,
			prop.representationalForm,
			prop.propertyValue,
			prop.isActive,
			prop.owner,
			prop.status,
			prop.effectiveDate,
			prop.expirationDate,
			prop.entryStateGuid,
			multiAttrib.vsPropMultiAttribGuid,
			multiAttrib.vsPropertyGuid,
			multiAttrib.attributeType,
			multiAttrib.attributeId,
			multiAttrib.attributeValue,
			multiAttrib.subRef,
			multiAttrib.role,
			multiAttrib.qualifierType,
			multiAttrib.entryStateGuid AS esGuid
		FROM 
			${prefix}vsProperty	prop		
		LEFT JOIN
			${prefix}vsPropertyMultiAttrib multiAttrib
		ON 
			multiAttrib.vsPropertyGuid = prop.vsPropertyGuid			
  		WHERE
			prop.vsPropertyGuid = #{param1}
  	</select>

	<select id="getVSPropertyLatestRevisionIdByUId" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter" resultType="string">
		SELECT 
			rev.revisionId
		FROM
			${prefix}vsProperty prop,
			${prefix}vsEntryState es,
			${defaultPrefix}revision rev
		WHERE
			prop.vsPropertyGuid = #{param1}	
		AND
			prop.entryStateGuid = es.entryStateGuid	
		AND
			es.revisionGuid = rev.revisionGuid	
	</select>   
	    	
	<select id="getPrevRevIdFromGivenRevIdForVSProperty" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple" resultType="java.util.TreeMap">
		
			SELECT DISTINCT
				r1.revisionId AS revId,
				r1.revAppliedDate AS revAppliedDate
			FROM
				${prefix}vsProperty property,
				${prefix}vsEntryState es,
				${defaultPrefix}revision r1, 
				${defaultPrefix}revision r2			
			WHERE
				property.vsPropertyGuid = #{param1} AND
				(
					NOT EXISTS 
					(
						SELECT 
							es1.entryStateGuid 
						FROM 
							${prefix}vsEntryState es1 
						WHERE 
							property.entryStateGuid = es1.entryStateGuid
					)
					OR
					(
						property.vsPropertyGuid = es.entryGuid AND 
						es.revisionGuid = r1.revisionGuid AND
						r1.revAppliedDate &lt;= r2.revAppliedDate AND
						r2.revisionID = #{param2}
					)
				)
			ORDER BY
				revAppliedDate DESC			
					
	</select>	
	
	<select id="getVSPropertyFromBaseByRevision" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple" resultMap="propertyAttributeResultWithNoMultiAttrib">
		
			SELECT 
				prop.vsPropertyGuid,
				prop.referenceGuid,
				prop.referenceType,
				prop.propertyId,
				prop.propertyType,
				prop.propertyName,
				prop.language,
				prop.format,
				prop.isPreferred,
				prop.matchIfNoContext,
				prop.degreeOfFidelity,
				prop.representationalForm,
				prop.propertyValue,
				prop.isActive,
				prop.owner,
				prop.status,
				prop.effectiveDate,
				prop.expirationDate,
				prop.entryStateGuid,
				r1.revAppliedDate AS revAppliedDate
			FROM 
				${prefix}vsProperty prop,
				${prefix}vsEntryState es,
				${defaultPrefix}revision r1, 
				${defaultPrefix}revision r2		
			WHERE
				prop.vsPropertyGuid = #{param1} AND
				prop.entryStateGuid = es.entryStateGuid AND
				(
					(
						es.revisionGuid = r1.revisionGuid AND
						r1.revAppliedDate &lt;= r2.revAppliedDate AND
						r2.revisionID = #{param2}
					)
					OR
        			(
            			es.revisionGuid IS NULL
        			)
				)
			ORDER BY
				revAppliedDate DESC		
					
	</select>	
	
	<select id="getVSPropertyFromHistoryByRevision" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple" resultMap="propertyAttributeResultWithNoMultiAttrib">
		
			SELECT 
				prop.vsPropertyGuid,
				prop.referenceGuid,
				prop.referenceType,
				prop.propertyId,
				prop.propertyType,
				prop.propertyName,
				prop.language,
				prop.format,
				prop.isPreferred,
				prop.matchIfNoContext,
				prop.degreeOfFidelity,
				prop.representationalForm,
				prop.propertyValue,
				prop.isActive,
				prop.owner,
				prop.status,
				prop.effectiveDate,
				prop.expirationDate,
				prop.entryStateGuid,
				rev.revAppliedDate AS revAppliedDate
			FROM 
				${prefix}h_vsProperty prop,
				${prefix}vsEntryState es,
				${defaultPrefix}revision rev,
				${defaultPrefix}revision rev2	
			WHERE
				prop.vsPropertyGuid = #{param1} AND
				prop.entryStateGuid = es.entryStateGuid AND
				(
					(
						es.revisionGuid = rev.revisionGuid AND
						rev.revAppliedDate &lt;= rev2.revAppliedDate AND
						rev2.revisionID = #{param2}
					)
					OR
					(
						es.revisionGuid IS NULL
					)
				)
			ORDER BY
				revAppliedDate DESC		
					
	</select>
		
	<select id="getAssertedValueSetPropertyByCode" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter" resultMap="assertedValueSetPropertyResult">
		SELECT
  			property.propertyType,
  			property.propertyName,
			property.isPreferred,
  			property.propertyValue
  		FROM
  			${prefix}property property
  		LEFT JOIN
  			${prefix}entity ent
  		ON
  			property.referenceGuid =
  			ent.entityGuid
  		WHERE
  			ent.entityCode = #{param1}
	
	</select>
	
</mapper>