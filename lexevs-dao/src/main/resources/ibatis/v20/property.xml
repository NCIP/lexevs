<?xml version="1.0" encoding="UTF-8"?><!--Converted at: Mon Apr 18 08:46:17 EDT 2022-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Property">


    <resultMap id="propertyResult" type="property">
        <result property="parent" column="referenceGuid"/>
        <result property="propertyName" column="propertyName"/>
        <result property="propertyId" column="propertyId"/>
        <result property="propertyType" column="propertyType"/>
        <result property="language" column="language"/>
        <result property="value.content" column="propertyValue"/>
        <result property="value.dataType" column="format"/>
        <result property="isActive" column="isActive" />
        <result property="owner" column="owner"/>
        <result property="status" column="status"/>
        <result property="effectiveDate" column="effectiveDate"/>
        <result property="expirationDate" column="expirationDate"/>
        <collection property="_sourceList" resultMap="Property.sourceResult"/>
        <collection property="_propertyQualifierList" resultMap="Property.qualifierResult"/>
        <collection property="_usageContextList" resultMap="Property.usageContextResult"/>
        <collection property="entryState" resultMap="Versions.entryStateResult"/>
        <discriminator javaType="string" column="propertyType">
            <case value="presentation" resultMap="presentationResult"/>
            <case value="definition" resultMap="definitionResult"/>
            <case value="comment" resultMap="commentResult"/>
        </discriminator>
    </resultMap>

    <resultMap id="propertyAttributes" type="insertOrUpdatePropertyBean">
        <result property="uid" column="propertyGuid"/>
        <result property="parentUId" column="referenceGuid"/>
        <result property="parentType" column="referenceType"/>
        <result property="property.propertyId" column="propertyId"/>
        <result property="property.propertyType" column="propertyType"/>
        <result property="property.propertyName" column="propertyName"/>
        <result property="property.language" column="language"/>
        <result property="property.value.dataType" column="format"/>
        <result property="isPreferred" column="isPreferred" />
        <result property="matchIfNoContext" column="matchIfNoContext" />
        <result property="degreeOfFidelity" column="degreeOfFidelity"/>
        <result property="representationalForm" column="representationalForm"/>
        <result property="property.value.content" column="propertyValue"/>
        <result property="property.isActive" column="isActive" />
        <result property="property.owner" column="owner"/>
        <result property="property.status" column="status"/>
        <result property="property.effectiveDate" column="effectiveDate"/>
        <result property="property.expirationDate" column="expirationDate"/>
        <result property="entryStateUId" column="entryStateGuid"/>
        <collection property="propertyMultiAttribList" resultMap="Property.propertyMultiAttribResultBean"/>
    </resultMap>

    <resultMap id="presentationResult" type="presentation" extends="propertyResult">
        <result property="isPreferred" column="isPreferred" />
        <result property="degreeOfFidelity" column="degreeOfFidelity"/>
        <result property="matchIfNoContext" column="matchIfNoContext" />
        <result property="representationalForm" column="representationalForm"/>
    </resultMap>

    <resultMap id="definitionResult" type="definition" extends="propertyResult">
        <result property="isPreferred" column="isPreferred" />
    </resultMap>

    <resultMap id="commentResult" type="comment" extends="propertyResult"/>

    <select id="getPropertyId" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple"
            resultMap="Common.uidResult">
        SELECT propertyGuid AS uidKey
        FROM ${prefix}property
        WHERE referenceGuid = #{param1}
          AND propertyId = #{param2}
    </select>

    <select id="getPropertyUIdByPropIdAndName"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTriple"
            resultMap="Common.uidResult">
        SELECT propertyGuid AS uidKey
        FROM ${prefix}property
        WHERE referenceGuid = #{param1}
          AND propertyId = #{param2}
          AND propertyName = #{param3}
    </select>

    <sql id="selectPropertyFragment">
        SELECT property.propertyGuid,
               property.referenceGuid,
               property.referenceType,
               property.propertyId,
               property.propertyType,
               property.propertyName,
               property.language,
               property.format,
               property.isPreferred,
               property.matchIfNoContext,
               property.degreeOfFidelity,
               property.representationalForm,
               property.propertyValue,
               property.isActive,
               property.owner,
               property.status,
               property.effectiveDate,
               property.expirationDate,
               property.entryStateGuid,
               entryState.changeType,
               entryState.relativeOrder,
               entryState.relativeOrder,

               currentRevision.revisionId  AS currentRevisionId,
               previousRevision.revisionId AS previousRevisionId,

               usageContext.attributeValue AS usageContextAttributeValue,

               source.attributeValue       AS sourceAttributeValue,
               source.subRef               AS sourceSubRef,
               source.role                 AS sourceRole,

               qualifier.attributeType     AS qualifierAttributeType,
               qualifier.attributeId       AS qualifierAttributeId,
               qualifier.attributeValue    AS qualifierAttributeValue,
               qualifier.qualifierType     AS qualifierType

        FROM ${prefix}property property
                 LEFT JOIN
             ${prefix}entryState entryState
             ON
                     property.entryStateGuid =
                     entryState.entryStateGuid
                 LEFT JOIN
             ${defaultPrefix}revision currentRevision
             ON
                     entryState.revisionGuid =
                     currentRevision.revisionGuid
                 LEFT JOIN
             ${defaultPrefix}revision previousRevision
             ON
                     entryState.prevRevisionGuid =
                     previousRevision.revisionGuid
    </sql>

    <sql id="getHistoryPropertyFragment">
        <include refid="selectPropertyFragment"/>

        LEFT JOIN
        ${prefix}propertyMultiAttrib qualifier
        ON
        (
        property.propertyGuid = qualifier.propertyGuid
        AND
        qualifier.attributeType = 'qualifier'
        AND
        qualifier.entryStateGuid = property.entryStateGuid
        )

        LEFT JOIN
        ${prefix}propertyMultiAttrib usageContext
        ON
        (
        property.propertyGuid = usageContext.propertyGuid
        AND
        usageContext.attributeType = 'usageContext'
        AND
        usageContext.entryStateGuid = property.entryStateGuid
        )

        LEFT JOIN
        ${prefix}propertyMultiAttrib source
        ON
        (
        property.propertyGuid = source.propertyGuid
        AND
        source.attributeType = 'source'
        AND
        source.entryStateGuid = property.entryStateGuid
        )
    </sql>

    <sql id="getPropertyFragment">
        <include refid="selectPropertyFragment"/>

        LEFT JOIN
        ${prefix}propertyMultiAttrib qualifier
        ON
        (
        property.propertyGuid = qualifier.propertyGuid
        AND
        qualifier.attributeType = 'qualifier'
        )

        LEFT JOIN
        ${prefix}propertyMultiAttrib usageContext
        ON
        (
        property.propertyGuid = usageContext.propertyGuid
        AND
        usageContext.attributeType = 'usageContext'
        )

        LEFT JOIN
        ${prefix}propertyMultiAttrib source
        ON
        (
        property.propertyGuid = source.propertyGuid
        AND
        source.attributeType = 'source'
        )
    </sql>

    <select id="getPropertiesByParentUids"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterCollectionTriple"
            resultMap="propertyResult">
        <include refid="getPropertyFragment"/>
        WHERE
        property.referenceType = #{param1}
        <if test="param2 != null and param2 != ''">AND
            property.propertyName IN (  <foreach collection="param2" item="item" separator=",">#{item}</foreach> )
        </if>

        <if test="param3 != null and param3 != ''">AND
            property.propertyType IN (  <foreach collection="param3" item="item" separator=",">#{item}</foreach> )
        </if>

        AND
        property.referenceGuid IN (  <foreach collection="param4" item="item" separator=",">
        #{item}
    </foreach> )

    </select>

    <select id="getPropertiesByParent" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple"
            resultMap="propertyResult">
        <include refid="getPropertyFragment"/>
        WHERE
        property.referenceType = #{param1}
        AND
        property.referenceGuid = #{param2}
    </select>

    <select id="getPropertyAttributesByUId" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter"
            resultMap="propertyAttributes">
        SELECT prop.propertyGuid,
               prop.referenceGuid,
               prop.referenceType,
               prop.propertyId,
               prop.propertyType,
               prop.propertyName,
               prop.language,
               prop.format,
               prop.isPreferred,
               prop.matchIfNoContext,
               prop.degreeOfFidelity,
               prop.representationalForm,
               prop.propertyValue,
               prop.isActive,
               prop.owner,
               prop.status,
               prop.effectiveDate,
               prop.expirationDate,
               prop.entryStateGuid,
               multiAttrib.propMultiAttribGuid,
               multiAttrib.propertyGuid,
               multiAttrib.attributeType,
               multiAttrib.attributeId,
               multiAttrib.attributeValue,
               multiAttrib.subRef,
               multiAttrib.role,
               multiAttrib.qualifierType,
               multiAttrib.entryStateGuid AS esGuid
        FROM ${prefix}property prop
                 LEFT JOIN
             ${prefix}propertyMultiAttrib multiAttrib
             ON
                 multiAttrib.propertyGuid = prop.propertyGuid
        WHERE prop.propertyGuid = #{param1}
    </select>

    <select id="getPropertiesByParentAndRevisionId"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTriple" resultMap="propertyResult">
        <include refid="getHistoryPropertyFragment"/>
        WHERE
        property.referenceType = #{param1}
        AND
        property.referenceGuid = #{param2}
        AND
        currentRevision.revisionId = #{param3}
    </select>

    <select id="getAllHistoryPropertyIdsByParentUId"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple" resultType="string">
        SELECT DISTINCT propertyGuid
        FROM ${prefix}property
        WHERE referenceGuid = #{param1}
    </select>

    <select id="getPropertyByUidAndRevisionId"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple" resultMap="propertyResult">
        <include refid="getHistoryPropertyFragment"/>
        WHERE
        property.propertyGuid = #{param1}
        AND
        currentRevision.revisionId = #{param2}
    </select>

    <select id="getEntryStateUIdByPropertyUId"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter" resultMap="Common.uidResult">
        SELECT entryStateGuid AS uidKey
        FROM ${prefix}property prop
        WHERE prop.propertyGuid = #{param1}
    </select>

    <select id="getPropertyByUid" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter"
            resultMap="propertyResult">
        <include refid="getPropertyFragment"/>
        WHERE
        property.propertyGuid = #{param1}
    </select>

    <delete id="deleteCodingSchemePropertiesByCodingSchemeUId"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple">
        DELETE
        FROM ${prefix}property
        WHERE referenceType = #{param1}
          AND referenceGuid = #{param2}
    </delete>

    <delete id="deleteCodingSchemePropertiesByCodingSchemeUIdUseInnerJoin"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple">
        DELETE
            ${prefix}property
        FROM ${prefix}property
                 INNER JOIN
             ${prefix}codingScheme
        WHERE referenceType = #{param1}
          AND referenceGuid = codingSchemeGuid
          AND codingSchemeGuid = #{param2}
    </delete>

    <delete id="deleteEntityPropertiesByCodingSchemeUId"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple">
        DELETE
        FROM ${prefix}property
        WHERE referenceType = #{param1}
          AND referenceGuid
            IN (
                  SELECT entityGuid
                  FROM ${prefix}entity
                  WHERE codingSchemeGuid = #{param2}
              )
    </delete>

    <delete id="deleteEntityPropertiesByCodingSchemeUIdUseInnerJoin"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple">
        DELETE
            ${prefix}property
        FROM ${prefix}property
                 INNER JOIN
             ${prefix}entity entity
             ON
                 referenceGuid = entity.entityGuid
                 INNER JOIN
             ${prefix}codingScheme cs
             ON
                 entity.codingSchemeGuid = cs.codingSchemeGuid
        WHERE referenceType = #{param1}
          AND cs.codingSchemeGuid = #{param2}
    </delete>

    <delete id="deleteRelationPropertiesByCodingSchemeUId"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple">
        DELETE
        FROM ${prefix}property
        WHERE referenceType = #{param1}
          AND referenceGuid
            IN (
                  SELECT relationGuid
                  FROM ${prefix}relation
                  WHERE codingSchemeGuid = #{param2}
              )
    </delete>

    <delete id="deleteRelationPropertiesByCodingSchemeUIdUseInnerJoin"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple">
        DELETE
            ${prefix}property
        FROM ${prefix}property
                 INNER JOIN
             ${prefix}relation rel
             ON
                 referenceGuid = rel.relationGuid
        WHERE referenceType = #{param1}
          AND rel.codingSchemeGuid = #{param2}
    </delete>

    <delete id="deletePropertiesByParentUIdAndParentType"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple">
        DELETE
        FROM ${prefix}property
        WHERE referenceType = #{param1}
          AND referenceGuid = #{param2}
    </delete>

    <insert id="insertProperty"
            parameterType="org.lexevs.dao.database.ibatis.property.parameter.InsertOrUpdatePropertyBean">
        INSERT INTO ${prefix}property (propertyGuid,
                                       referenceGuid,
                                       referenceType,
                                       propertyId,
                                       propertyType,
                                       propertyName,
                                       language,
                                       format,
                                       isPreferred,
                                       matchIfNoContext,
                                       degreeOfFidelity,
                                       representationalForm,
                                       propertyValue,
                                       isActive,
                                       owner,
                                       status,
                                       effectiveDate,
                                       expirationDate,
                                       entryStateGuid)
        VALUES (#{uid},
                #{parentUId},
                #{parentType},
                #{propertyId,jdbcType=VARCHAR},
                #{propertyType,jdbcType=VARCHAR},
                #{propertyName},
                #{language,jdbcType=VARCHAR},
                #{format,jdbcType=VARCHAR},
                #{isPreferred},
                #{matchIfNoContext},
                #{degreeOfFidelity,jdbcType=VARCHAR},
                #{representationalForm,jdbcType=VARCHAR},
                #{propertyValue,jdbcType=VARCHAR},
                #{isActive},
                #{owner,jdbcType=VARCHAR},
                #{status,jdbcType=VARCHAR},
                #{effectiveDate,jdbcType=TIMESTAMP},
                #{expirationDate,jdbcType=TIMESTAMP},
                #{entryStateUId})
    </insert>

    <update id="updatePropertyByUId"
            parameterType="org.lexevs.dao.database.ibatis.property.parameter.InsertOrUpdatePropertyBean">
        UPDATE
        ${prefix}property
        <set>
            <if test="property.propertyType != null">
                propertyType = #{property.propertyType},
            </if>
            <if test="property.propertyName != null">
                propertyName = #{property.propertyName},
            </if>
            <if test="property.language != null">
                language = #{property.language},
            </if>
            <if test="property.value.dataType != null">
                format = #{property.value.dataType},
            </if>
            <if test="property.isPreferred != null">
                isPreferred = #{property.isPreferred},
            </if>
            <if test="property.matchIfNoContext != null">
                matchIfNoContext = #{property.matchIfNoContext},
            </if>
            <if test="property.degreeOfFidelity != null">
                degreeOfFidelity = #{property.degreeOfFidelity},
            </if>
            <if test="property.representationalForm != null">
                representationalForm = #{property.representationalForm},
            </if>
            <if test="property.value.content != null">
                propertyValue = #{property.value.content},
            </if>
            <if test="property.entryStateUId != null">
                entryStateGuid = #{entryStateUId}
            </if>

        </set>

        WHERE
        propertyGuid = #{uid}
    </update>

    <update id="updatePropertyVersionableAttribByUId"
            parameterType="org.lexevs.dao.database.ibatis.property.parameter.InsertOrUpdatePropertyBean">
        UPDATE
        ${prefix}property
        <set>
            <if test="property.isActive != null">
                isActive = #{property.isActive},
            </if>
            <if test="property.owner != null">
                owner = #{property.owner},
            </if>
            <if test="property.status != null">
                status = #{property.status},
            </if>
            <if test="property.effectiveDate != null">
                effectiveDate = #{property.effectiveDate},
            </if>
            <if test="property.expirationDate != null">
                expirationDate = #{property.expirationDate},
            </if>
            <if test="property.entryStateUId != null">
                entryStateGuid = #{entryStateUId},
            </if>
        </set>

        WHERE
        propertyGuid = #{uid}
    </update>

    <delete id="deletePropertyByUId" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter">
        DELETE
        FROM ${prefix}property
        WHERE propertyGuid = #{param1}
    </delete>

    <select id="getLatestPropertyRevisionIdByUId"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter" resultType="string">
        SELECT rev.revisionId
        FROM ${prefix}property prop,
             ${prefix}entryState es,
             ${defaultPrefix}revision rev
        WHERE prop.propertyGuid = #{param1}
          AND prop.entryStateGuid = es.entryStateGuid
          AND es.revisionGuid = rev.revisionGuid
    </select>

</mapper>