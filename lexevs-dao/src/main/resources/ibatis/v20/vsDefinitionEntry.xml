<?xml version="1.0" encoding="UTF-8"?><!--Converted at: Mon Apr 18 08:46:17 EDT 2022-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="vsDefinitionEntry">


    <resultMap id="definitionEntryResult" type="definitionEntry">
        <result property="ruleOrder" column="ruleOrder"/>
        <result property="operator" column="operator"/>
        <result property="isActive" column="isActive" />
        <result property="owner" column="owner"/>
        <result property="status" column="status"/>
        <result property="effectiveDate" column="effectiveDate"/>
        <result property="expirationDate" column="expirationDate"/>
        <collection property="codingSchemeReference" resultMap="ValueSetDefinition.codingSchemeReferenceResult"/>
        <collection property="valueSetDefinitionReference"
                    resultMap="ValueSetDefinition.valueSetDefinitionReferenceResult"/>
        <collection property="entityReference" resultMap="ValueSetDefinition.entityReferenceResult"/>
        <collection property="propertyReference" resultMap="ValueSetDefinition.propertyReferenceResult"/>
    </resultMap>

    <resultMap id="definitionEntry" type="insertOrUpdateDefinitionEntryBean">
        <result property="uid" column="vsdEntryGuid" />
        <result property="valueSetDefUId" column="valueSetDefGuid" />
        <result property="definitionEntry.ruleOrder" column="ruleOrder"/>
        <result property="definitionEntry.operator" column="operator"/>
        <result property="definitionEntry.codingSchemeReference.codingScheme" column="codingSchemeReference"/>
        <result property="codingSchemeReference" column="codingSchemeReference"/>
        <result property="definitionEntry.valueSetDefinitionReference.valueSetDefinitionURI"
                column="valueSetDefReference"/>
        <result property="valueSetDefReference" column="valueSetDefReference"/>
        <result property="definitionEntry.entityReference.entityCode" column="entityCode"/>
        <result property="entityCode" column="entityCode"/>
        <result property="definitionEntry.entityReference.entityCodeNamespace" column="entityCodeNamespace"/>
        <result property="entityCodeNamespace" column="entityCodeNamespace"/>
        <result property="leafOnly" column="leafOnly" />
        <result property="referenceAssociation" column="referenceAssociation"/>
        <result property="targetToSource" column="targetToSource" />
        <result property="transitiveClosure" column="transitiveClosure" />
        <result property="propertyRefCodingScheme" column="propertyRefCodingScheme"/>
        <result property="propertyName" column="propertyName"/>
        <result property="propertyMatchValue" column="propertyMatchValue"/>
        <result property="matchAlgorithm" column="matchAlgorithm"/>
        <result property="format" column="format"/>
        <result property="definitionEntry.isActive" column="isActive"/>
        <result property="definitionEntry.owner" column="owner"/>
        <result property="definitionEntry.status" column="status"/>
        <result property="definitionEntry.effectiveDate" column="effectiveDate"/>
        <result property="definitionEntry.expirationDate" column="expirationDate"/>
        <result property="entryStateUId" column="entryStateGuid" />
    </resultMap>

    <insert id="insertDefinitionEntry"
            parameterType="org.lexevs.dao.database.ibatis.valuesets.parameter.InsertOrUpdateDefinitionEntryBean">
        INSERT INTO ${prefix}vsdEntry
        (
        vsdEntryGuid,
        valueSetDefGuid,
        ruleOrder,
        operator,
        codingSchemeReference,
        valueSetDefReference,
        entityCode,
        entityCodeNamespace,
        leafOnly,
        referenceAssociation,
        targetToSource,
        transitiveClosure,
        propertyRefCodingScheme,
        propertyName,
        propertyMatchValue,
        matchAlgorithm,
        format,
        isActive,
        owner,
        status,
        effectiveDate,
        expirationDate,
        entryStateGuid
        ) VALUES (
        #{uid},
        #{valueSetDefUId},
        #{definitionEntry.ruleOrder},
        #{definitionEntry.operator},
        #{codingSchemeReference},
        #{valueSetDefReference},
        #{entityCode},
        #{entityCodeNamespace},


        <if test="leafOnly !=null">
            #{leafOnly,handler=numericBooleanTypeHandler},
        </if>
        <if test="leafOnly ==null">
            null,
        </if>

        #{referenceAssociation},

        <if test="targetToSource !=null">
            #{targetToSource,handler=numericBooleanTypeHandler},
        </if>
        <if test="targetToSource ==null">
            null,
        </if>

        <if test="transitiveClosure !=null">
            #{leafOnly,handler=numericBooleanTypeHandler},
        </if>
        <if test="transitiveClosure ==null">
            null,
        </if>

        #{propertyRefCodingScheme,jdbcType=VARCHAR},
        #{propertyName,jdbcType=VARCHAR},
        #{propertyMatchValue,jdbcType=VARCHAR},
        #{matchAlgorithm,jdbcType=VARCHAR},
        #{format,jdbcType=VARCHAR},
        #{definitionEntry.isActive,handler=numericBooleanTypeHandler},
        #{definitionEntry.owner,jdbcType=VARCHAR},
        #{definitionEntry.status,jdbcType=VARCHAR},
        #{definitionEntry.effectiveDate,jdbcType=TIMESTAMP},
        #{definitionEntry.expirationDate,jdbcType=TIMESTAMP},
        #{entryStateUId}
        )
    </insert>

    <update id="updateDefinitionEntryByUId"
            parameterType="org.lexevs.dao.database.ibatis.valuesets.parameter.InsertOrUpdateDefinitionEntryBean">
        UPDATE
        ${prefix}vsdEntry
        <set>
            <if test="definitionEntry.operator != null">
                operator = #{definitionEntry.operator},
            </if>
            <if test="definitionEntry.entityReference !=null">
                <if test="definitionEntry.entityReference.entityCode !=null">
                    entityCode = #{definitionEntry.entityReference.entityCode},
                </if>
                <if test="definitionEntry.entityReference.entityCodeNamespace !=null">
                    entityCodeNamespace = #{definitionEntry.entityReference.entityCodeNamespace},
                </if>
                <if test="definitionEntry.entityReference.leafOnly !=null">
                    leafOnly = #{definitionEntry.entityReference.leafOnly,handler=numericBooleanTypeHandler},
                </if>
                <if test="definitionEntry.entityReference.referenceAssociation !=null">
                    referenceAssociation = #{definitionEntry.entityReference.referenceAssociation},
                </if>
                <if test="definitionEntry.entityReference.targetToSource !=null">
                    targetToSource =
                    #{definitionEntry.entityReference.targetToSource,handler=numericBooleanTypeHandler},
                </if>
                <if test="definitionEntry.entityReference.transitiveClosure !=null">
                    transitiveClosure =
                    #{definitionEntry.entityReference.transitiveClosure,handler=numericBooleanTypeHandler},
                </if>
            </if>
            <if test="definitionEntry.propertyReference !=null">
                <if test="definitionEntry.propertyReference.propertyMatchValue.content !=null">
                    propertyMatchValue=#{definitionEntry.propertyReference.propertyMatchValue.content},
                </if>
                <if test="definitionEntry.propertyReference.propertyMatchValue.propertyName !=null">
                    propertyName=#{definitionEntry.propertyReference.propertyName},
                </if>
            </if>
            <if test="entryStateUId !=null">
                entryStateGuid=#{entryStateUId}
            </if>

        </set>

        WHERE
        vsdEntryGuid = #{uid}
    </update>

    <update id="updateDefinitionEntryVerAttribByUId"
            parameterType="org.lexevs.dao.database.ibatis.valuesets.parameter.InsertOrUpdateDefinitionEntryBean">
        UPDATE
        ${prefix}vsdEntry vsdEntry
        <set>
			<if test="definitionEntry.isActive !=null">
				isActive = #{definitionEntry.isActive,handler=numericBooleanTypeHandler},
			</if>
			<if test="definitionEntry.status !=null">
				status = #{definitionEntry.status},
			</if>
			<if test="definitionEntry.owner !=null">
				owner = #{definitionEntry.owner},
			</if>
			<if test="definitionEntry.effectiveDate !=null">
				effectiveDate = #{definitionEntry.effectiveDate},
			</if>
			<if test="definitionEntry.expirationDate !=null">
				expirationDate = #{definitionEntry.expirationDate},
			</if>
			<if test="definitionEntry.entryStateUId !=null">
				entryStateGuid = #{entryStateUId}
			</if>
		</set>

        WHERE
        vsdEntry.vsdEntryGuid = #{uid}
    </update>

    <delete id="deleteDefinitionEntryByUId" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter">
        DELETE
        FROM ${prefix}vsdEntry
        WHERE vsdEntryGuid = #{param1}
    </delete>

    <select id="getDefinitionEntryUId" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple"
            resultMap="Common.uidResult">
        SELECT vsdEntryGuid AS uidKey
        FROM ${prefix}vsdEntry vsdEntry,
             ${prefix}valueSetDefinition vsDef
        WHERE vsDef.valueSetDefURI = #{param1}
          AND vsDef.valueSetDefGuid = vsdEntry.valueSetDefGuid
          AND vsdEntry.ruleOrder = #{param2}
    </select>

    <select id="getDefinitionEntryAttribByUId"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter" resultMap="definitionEntry">
        SELECT *
        FROM ${prefix}vsdEntry vsdEntry
        WHERE vsdEntry.vsdEntryGuid = #{param1}
    </select>

    <select id="getDefinitionEntryLatestRevisionIdByUId"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter" resultType="string">
        SELECT rev.revisionId
        FROM ${prefix}vsdEntry vsdEntry,
             ${prefix}vsEntryState es,
             ${defaultPrefix}revision rev
        WHERE vsdEntry.vsdEntryGuid = #{param1}
          AND vsdEntry.entryStateGuid = es.entryStateGuid
          AND es.revisionGuid = rev.revisionGuid
    </select>

    <select id="getDefinitionEntryByUId" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter"
            resultMap="definitionEntryResult">
        SELECT vsdEntry.ruleOrder,
               vsdEntry.operator,
               vsdEntry.codingSchemeReference,
               vsdEntry.valueSetDefReference,
               vsdEntry.entityCode,
               vsdEntry.entityCodeNamespace,
               vsdEntry.leafOnly,
               vsdEntry.referenceAssociation,
               vsdEntry.targetToSource,
               vsdEntry.transitiveClosure,
               vsdEntry.propertyRefCodingScheme,
               vsdEntry.propertyName,
               vsdEntry.propertyMatchValue,
               vsdEntry.matchAlgorithm,
               vsdEntry.format,
               vsdEntry.isActive,
               vsdEntry.owner,
               vsdEntry.status,
               vsdEntry.effectiveDate,
               vsdEntry.expirationDate,
               vsdEntry.entryStateGuid,
               entryState.changeType,
               entryState.relativeOrder,
               entryState.relativeOrder,

               currentRevision.revisionId  currentRevisionId,
               previousRevision.revisionId previousRevisionId
        FROM ${prefix}vsdEntry vsdEntry
                 LEFT JOIN
             ${prefix}vsentryState entryState
             ON
                     vsdEntry.entryStateGuid =
                     entryState.entryStateGuid
                 LEFT JOIN
             ${defaultPrefix}revision currentRevision
             ON
                     entryState.revisionGuid =
                     currentRevision.revisionGuid
                 LEFT JOIN
             ${defaultPrefix}revision previousRevision
             ON
                     entryState.prevRevisionGuid =
                     previousRevision.revisionGuid
        WHERE vsdEntry.vsdEntryGuid = #{param1}
    </select>

    <select id="getPrevRevIdFromGivenRevIdForDefinitionEntry"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple"
            resultType="java.util.TreeMap">

        SELECT DISTINCT r1.revisionId     AS revId,
                        r1.revAppliedDate AS revAppliedDate
        FROM ${prefix}vsdEntry vsdEntry,
             ${prefix}vsEntryState es,
             ${defaultPrefix}revision r1,
             ${defaultPrefix}revision r2
        WHERE vsdEntry.vsdEntryGuid = #{param1}
          AND (
                NOT EXISTS
                    (
                        SELECT es1.entryStateGuid
                        FROM ${prefix}vsEntryState es1
                        WHERE vsdEntry.entryStateGuid = es1.entryStateGuid
                    )
                OR
                (
                            vsdEntry.vsdEntryGuid = es.entryGuid AND
                            es.revisionGuid = r1.revisionGuid AND
                            r1.revAppliedDate &lt;= r2.revAppliedDate AND
                            r2.revisionID = #{param2}
                    )
            )
        ORDER BY revAppliedDate DESC

    </select>

    <select id="getDefinitionEntryByRevision"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple"
            resultMap="definitionEntryResult">

        SELECT vsdEntry.ruleOrder,
               vsdEntry.operator,
               vsdEntry.codingSchemeReference,
               vsdEntry.valueSetDefReference,
               vsdEntry.entityCode,
               vsdEntry.entityCodeNamespace,
               vsdEntry.leafOnly,
               vsdEntry.referenceAssociation,
               vsdEntry.targetToSource,
               vsdEntry.transitiveClosure,
               vsdEntry.propertyRefCodingScheme,
               vsdEntry.propertyName,
               vsdEntry.propertyMatchValue,
               vsdEntry.matchAlgorithm,
               vsdEntry.format,
               vsdEntry.isActive,
               vsdEntry.owner,
               vsdEntry.status,
               vsdEntry.effectiveDate,
               vsdEntry.expirationDate,
               vsdEntry.entryStateGuid,
               r1.revAppliedDate AS revAppliedDate
        FROM ${prefix}vsdEntry vsdEntry,
             ${prefix}vsEntryState es,
             ${defaultPrefix}revision r1,
             ${defaultPrefix}revision r2
        WHERE vsdEntry.vsdEntryGuid = #{param1}
          AND vsdEntry.entryStateGuid = es.entryStateGuid
          AND (
                (
                            es.revisionGuid = r1.revisionGuid AND
                            r1.revAppliedDate &lt;= r2.revAppliedDate AND
                            r2.revisionID = #{param2}
                    )
                OR
                (
                    es.revisionGuid IS NULL
                    )
            )

        ORDER BY revAppliedDate DESC

    </select>
    <select id="getDefinitionEntryHistoryByRevision"
            parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple"
            resultMap="definitionEntryResult">

        SELECT vsdEntry.ruleOrder,
               vsdEntry.operator,
               vsdEntry.codingSchemeReference,
               vsdEntry.valueSetDefReference,
               vsdEntry.entityCode,
               vsdEntry.entityCodeNamespace,
               vsdEntry.leafOnly,
               vsdEntry.referenceAssociation,
               vsdEntry.targetToSource,
               vsdEntry.transitiveClosure,
               vsdEntry.propertyRefCodingScheme,
               vsdEntry.propertyName,
               vsdEntry.propertyMatchValue,
               vsdEntry.matchAlgorithm,
               vsdEntry.format,
               vsdEntry.isActive,
               vsdEntry.owner,
               vsdEntry.status,
               vsdEntry.effectiveDate,
               vsdEntry.expirationDate,
               vsdEntry.entryStateGuid,
               r1.revAppliedDate AS revAppliedDate
        FROM ${prefix}h_vsdEntry vsdEntry,
             ${prefix}vsEntryState es,
             ${defaultPrefix}revision r1,
             ${defaultPrefix}revision r2
        WHERE vsdEntry.vsdEntryGuid = #{param1}
          AND vsdEntry.entryStateGuid = es.entryStateGuid
          AND (
                (
                            es.revisionGuid = r1.revisionGuid AND
                            r1.revAppliedDate &lt;= r2.revAppliedDate AND
                            r2.revisionID = #{param2}
                    )
                OR
                (
                    es.revisionGuid IS NULL
                    )
            )

        ORDER BY revAppliedDate DESC

    </select>
</mapper>