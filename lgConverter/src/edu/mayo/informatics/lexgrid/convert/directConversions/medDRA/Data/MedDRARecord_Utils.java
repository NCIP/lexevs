package edu.mayo.informatics.lexgrid.convert.directConversions.medDRA.Data;import java.lang.reflect.Field;import org.LexGrid.commonTypes.Property;import org.LexGrid.commonTypes.PropertyQualifier;import org.LexGrid.commonTypes.Text;import org.LexGrid.concepts.Comment;import org.LexGrid.concepts.Definition;import org.LexGrid.concepts.Presentation;import edu.mayo.informatics.lexgrid.convert.directConversions.medDRA.MedDRA2LGConstants;public class MedDRARecord_Utils {        public static String fieldString(String prefix, String field, String value){        return prefix + field + ": " + value + "\n";    }        public static Presentation createPresentation(String propertyID, String presentationValue, String representation, boolean preferred){        Presentation presentation = new Presentation();        Text txt = new Text();        txt.setContent(presentationValue);                presentation.setIsPreferred(preferred);        presentation.setIsActive(true);        presentation.setValue(txt);        presentation.setPropertyName(propertyID);    //    presentation.setPropertyName(presentationName);        presentation.setRepresentationalForm(representation);                return presentation;    }    public static Definition createDefinition(String propertyID, String definitionValue){        Definition definition = new Definition();        Text txt = new Text();                txt.setContent(definitionValue);        definition.setValue(txt);        definition.setPropertyName(propertyID);        definition.setIsActive(true);        return definition;    }    public static Comment createComment(String propertyID, String commentValue){        Comment comment = new Comment();        Text txt = new Text();                txt.setContent(commentValue);        comment.setValue(txt);        comment.setPropertyName(propertyID);        comment.setIsActive(true);                return comment;    }    public static Property createProperty(String propertyID, String propertyValue){        Property property = new Property();        Text txt = new Text();                txt.setContent(propertyValue);        property.setValue(txt);        property.setPropertyName(propertyID);        property.setIsActive(true);        return property;    }        public static Property createSMQProperty(String propertyID, MedDRARecord_smq_content smqRecord) {        Property property = new Property();        property.setPropertyName(propertyID);        property.setIsActive(true);        Text txt = new Text();        txt.setContent(smqRecord.getSmq_code());        property.setValue(txt);                // Set all the qualifiers   //     property.addPropertyQualifier(createSMQPropertyQualifier("term_code", smqRecord.getTerm_code()));        property.addPropertyQualifier(createSMQPropertyQualifier("term_level", smqRecord.getTerm_level()));        property.addPropertyQualifier(createSMQPropertyQualifier("term_scope", smqRecord.getTerm_scope()));        property.addPropertyQualifier(createSMQPropertyQualifier("term_category", smqRecord.getTerm_category()));        property.addPropertyQualifier(createSMQPropertyQualifier("term_weight", smqRecord.getTerm_weight()));        property.addPropertyQualifier(createSMQPropertyQualifier("term_status", smqRecord.getTerm_status()));        property.addPropertyQualifier(createSMQPropertyQualifier("term_addition_version", smqRecord.getTerm_addition_version()));        property.addPropertyQualifier(createSMQPropertyQualifier("term_last_modified_version", smqRecord.getTerm_last_modified_version()));                return property;    }    private static PropertyQualifier createSMQPropertyQualifier(String name, String value) {        PropertyQualifier qualifier = new PropertyQualifier();        qualifier.setPropertyQualifierName(name);        Text t1 = new Text();        t1.setContent(value);        qualifier.setValue(t1);        return qualifier;    }    public static String FieldsAsString(String prefix, Field[] fields, DatabaseRecord record, int [] indices) {        String values = "";                if(indices == null){            return values;        }                for(int i=0; i < indices.length; i++){            int index = indices[i];            fields[index].setAccessible(true);            try {                String value = getField(fields[index], record);                values += MedDRARecord_Utils.fieldString(prefix, fields[index].getName(), value);            } catch (IllegalArgumentException e) {                // TODO Auto-generated catch block                e.printStackTrace();            }        }        return values;    }    public static String getField(Field field, DatabaseRecord record){        Object value = null;        try {            Field localField = record.getClass().getField(field.getName());            localField.setAccessible(true);            value = localField.get(record);        } catch (IllegalArgumentException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (IllegalAccessException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (NoSuchFieldException e){            e.printStackTrace();        }        return (String) value;    }    public static boolean fieldsValid(DatabaseRecord record, int[] validFieldIndices) throws IllegalArgumentException, IllegalAccessException {        if(validFieldIndices == null){            return true;        }                Field[] fields = record.getClass().getDeclaredFields();                                for(int i=0; i < validFieldIndices.length; i++){            int index = validFieldIndices[i];            fields[index].setAccessible(true);            if(fields[index].get(record) == null){                return false;            }        }        return true;    }    public static String recordToString(DatabaseRecord record, int[] validFieldIndices, int[] invalidFieldIndices) {        Field[] fields = record.getClass().getDeclaredFields();                        String required = MedDRA2LGConstants.REQUIRED_STRING;        String ignored = MedDRA2LGConstants.IGNORED_STRING;        String values = "";                if(validFieldIndices != null){            values += MedDRARecord_Utils.FieldsAsString(required, fields, record, validFieldIndices);        }                if(invalidFieldIndices != null){            values += MedDRARecord_Utils.FieldsAsString(ignored, fields, record, invalidFieldIndices);        }                return values;    }}