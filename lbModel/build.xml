<project name="LexBIG Model" default="all" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
	<description>
		Buildfile for the Castor Rendering of the LexBIG data model
	</description>

	<!-- set global properties for this build -->
	<property name="generated" 	location="Castor/src"/>
	<property name="dist"		location="target"/>
	<property name="util.lib"   location="util.lib"/>
	<property name="classes"	location="Castor/classes"/>
	<property name="docs"  		location="Castor/JavaDocs"/>
	<property name="core"       location="Castor/src/org/LexGrid/LexBIG/DataModel/Core"/>
	<property name="collections"   location="Castor/src/org/LexGrid/LexBIG/DataModel/Collections"/>
	<property name="loaderXSDs"	   location="master.preferences"/>
	<property name="lib.dir" value="lib"/>

	<!-- bda related properties -->
	<property name="bda.build.dir" location="../../lexevs_bda/lbPackager"/>
	<property file="bda.properties" location="${bda.build.dir}"/>
	<property name="lgSharedLibs.dir" location="../lgSharedLibraries"/>	
	<property name="lgModel.project.dir" location="../lgModel"/>
	<property name="lbPackager.dir" value="../lbPackager"/>
	<property file="build.properties" location="${lbPackager.dir}"/>
	
	<!--*******************************************************************-->
		<!--** IVY TARGETS AND DEPENDENCY PATHS **-->
		<!--*******************************************************************-->
		<property name="ivy.settings.file" location="${lbPackager.dir}/ivysettings.xml" />
		<property name="ivy.def.file" location="ivy.xml" />

		<property name="ivy.jar.dir" value="${lbPackager.dir}/ivy/lib" />
		<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy-2.1.0-rc1.jar" />

		<target name="ivy:init" depends="ivy:clean">
			<path id="ivy.lib.path">
					<fileset dir="${ivy.jar.dir}" includes="*.jar" />
				</path>
				<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant"
					classpathref="ivy.lib.path" />
			<ivy:settings file="${ivy.settings.file}" />
		</target>

		<target name="ivy:clean" depends="clean:dependencies"
			description="Clean">
			<delete dir="${lib.dir}" />
		</target>

		<target name="clean:dependencies">
			<delete dir="${genepattern-service.jar.compile.lib.dir}" />
		</target>

		<target name="ivy:setup" depends="ivy:setup-compile"
			description="Updates the local ivy repository for all build and test dependencies." />

		<target name="ivy:setup-compile" depends="ivy:init">	
			<ivy:resolve refresh="true" conf="default"/>
			<ivy:cachepath pathid="classpath" conf="default"/>
			<ivy:retrieve pattern="${lib.dir}/[conf]/[type]/[artifact]-[revision].[ext]" conf="default" />
		</target>
		<!--*******************************************************************-->
		<!--** END IVY TARGETS AND DEPENDENCY PATHS **-->
		<!--*******************************************************************-->
	
	<target name="init" depends="ivy:setup"/>

	<target name="clean"  description="clean up" >
		<!-- Delete the ${generated} and ${docs} directory trees -->
		<delete dir="${docs}"/>
		<delete dir="${generated}"/>
		<delete dir="${classes}"/>
		<delete dir="${dist}"/>
	</target>
	
	<target name="genCastorFromXSD" depends="init" description="generate the Castor representation of the schema">
		<echo>Generate Castor Java</echo>
		<delete dir="${generated}"/>
		<mkdir dir="${generated}"/>
		<antcall target="genCastorJava">
   			<param name="xsdFile" value="Core"/>
  		</antcall>
  		<antcall target="genCastorJava">
   			<param name="xsdFile" value="Collections"/>
  		</antcall>
  		<antcall target="genCastorJava">
   			<param name="xsdFile" value="InterfaceElements"/>
  		</antcall>
  		<antcall target="genCastorJava">
   			<param name="xsdFile" value="NCIHistory"/>
  		</antcall>
		<antcall target="genCastorJava">
			<param name="xsdFile" value="enums"/>
		</antcall>
		<antcall target="genLoaderPreferencesCastorJava">
			<param name="xsdFile" value="LoadPreferences"/>
		</antcall>
		<antcall target="genLoaderPreferencesCastorJava">
			<param name="xsdFile" value="HL7LoadPreferences"/>
		</antcall>
		<antcall target="genLoaderPreferencesCastorJava">
			<param name="xsdFile" value="MetaLoadPreferences"/>
		</antcall>
		<antcall target="genLoaderPreferencesCastorJava">
			<param name="xsdFile" value="OBOLoadPreferences"/>
		</antcall>
		<antcall target="genLoaderPreferencesCastorJava">
		   	<param name="xsdFile" value="OWLLoadPreferences"/>
		</antcall>
		<antcall target="genLoaderPreferencesCastorJava">
			<param name="xsdFile" value="SemNetLoadPreferences"/>
		</antcall>
		<antcall target="genLoaderPreferencesCastorJava">
			<param name="xsdFile" value="UMLSLoadPreferences"/>
		</antcall>
		<antcall target="genLoaderPreferencesCastorJava">
			<param name="xsdFile" value="XMLLoadPreferences"/>
		</antcall>
  	</target>
  	
	<target name="genLoaderPreferencesCastorJava" depends="ivy:setup-compile">
		<echo>Generating Castor Java from Schema ${xsdFile}</echo>
		
		<java classname="org.exolab.castor.builder.SourceGenerator" fork="true">
			<classpath refid="classpath"/>
			<!--arg line="-f"/-->
			<arg line="-i '${loaderXSDs}/${xsdFile}.xsd'"/>
			<arg line="-package org.LexGrid.LexBIG.Preferences.loader.${xsdFile}"/>
			<arg line="-dest '${generated}'"/>
			<arg line="-nomarshall"/>
			<!--<arg line="-nodesc"/>-->
			<arg line="-types j2"/>
			<arg line="-verbose"/>
		</java>
	</target>
	
	<target name="genCastorJava" depends="ivy:setup-compile">
		<echo>Generating Castor Java from Schema ${xsdFile}</echo>
		
		<java classname="org.exolab.castor.builder.SourceGenerator" fork="true">
			<classpath refid="classpath"/>
			<!--arg line="-f"/-->
			<arg line="-i master/${xsdFile}.xsd"/>
			<arg line="-package org.LexGrid.LexBIG.DataModel.${xsdFile}"/>
			<arg line="-dest '${generated}'"/>
			<arg line="-nomarshall"/>
			<!--<arg line="-nodesc"/>-->
			<arg line="-types j2"/>
			<arg line="-verbose"/>
		</java>
	</target>

	<target name="compile" depends="genCastorFromXSD, annotate.class, core.aliases" description="compile the source ">
		<mkdir dir="${classes}"/>
		<javac source="1.5" target="1.5" srcdir="${generated}" destdir="${classes}" debug="yes">
			<classpath refid="classpath"/>
		</javac>
	</target>

	<target name="jar" depends="compile, copyXSDs" description="generate the jar file" >
		<!-- Create the distribution directory -->
		<mkdir dir="${dist}"/> 
			
		<!-- Put everything in ${build} into .jar file -->
		<jar jarfile="${dist}/${ivy.module}-${ivy.revision}.jar" basedir="${classes}"/>
		<jar jarfile="${dist}/${ivy.module}-${ivy.revision}-sources.jar" basedir="${generated}"/>

	</target>
	
	<target name="copyXSDs" depends="init, compile" description="Copies Loader Preferences XSDs to jar." >
		<!-- Copy the Loader XSDS -->
		<copy todir="${classes}/PreferencesLoaderXSDS">
			<fileset dir="${loaderXSDs}"/>
		</copy>  
	</target>

	<target name="docs" depends="jar" description="Generate the javadocs">
		<mkdir dir="${docs}"/>
		<!--Create the javadocs-->
		<javadoc destdir="${docs}" windowtitle="LexBIG" additionalparam="-breakiterator">
			<package name="*"/>
			<classpath>
			      <path refid="classpath"/>
			      <pathelement location="${dist}/${ivy.module}-${ivy.revision}.jar"/>
			</classpath>

			<sourcepath location="${generated}"/>
		</javadoc>
	</target>

	<target name="annotate.class" description="annotate for remote classes" >
		<replace dir="${collections}" token="package org.LexGrid.LexBIG.DataModel.Collections;">
			<replacevalue><![CDATA[package org.LexGrid.LexBIG.DataModel.Collections; 
import org.LexGrid.annotations.LgClientSideSafe;]]></replacevalue>
		</replace>
		<replace dir="${collections}" token="public class">
			<include name="*.java*"/>
			<replacevalue><![CDATA[@LgClientSideSafe 
public class]]></replacevalue>
		</replace>
		
		<replace dir="${core}" token="package org.LexGrid.LexBIG.DataModel.Core;">
				<replacevalue><![CDATA[package org.LexGrid.LexBIG.DataModel.Core; 
	import org.LexGrid.annotations.LgClientSideSafe;]]></replacevalue>
			</replace>
			<replace dir="${core}" token="public class">
				<include name="*.java*"/>
				<replacevalue><![CDATA[@LgClientSideSafe 
	public class]]></replacevalue>
			</replace>
	</target>
	
	<target name="genModelAndAnnotate" depends="genCastorFromXSD, core.aliases, annotate.class" description="generate Castor model and annotate"/>			

	<!-- Used to preserve backward compatibility between older
	     ConceptReference/ResolvedConceptReference and new
	     CodedNodeReference/ResolvedCodedNodeReference classes -->
	<target name="core.aliases" description="override select methods on core items to behave as aliases" >
		<replace dir="${core}" token="this._conceptCode;">
			<replacevalue>this.getCode();</replacevalue>
		</replace>
		<replace dir="${core}" token="this._conceptCode = conceptCode;">
			<replacevalue>this.setCode(conceptCode);</replacevalue>
		</replace>
		<replace dir="${core}" token="this._referencedEntry;">
			<replacevalue>this.getEntity() instanceof org.LexGrid.concepts.Entity ? (org.LexGrid.concepts.Entity) this.getEntity() : null;</replacevalue>
		</replace>
		<replace dir="${core}" token="this._referencedEntry = referencedEntry;">
			<replacevalue>this.setEntity(referencedEntry);</replacevalue>
		</replace>
	</target>
	
	<target name="all" depends="publish" description="all - init, clean, genCastorXML, compile, jar, docs"/>

	<target name="publish" depends="jar" unless="publish.skip">
	   	<ivy:makepom ivyfile="ivy.xml" pomfile="${build.dir}/${ivy.module}-${ivy.revision}.pom">
	   		<mapping conf="master" scope="compile"/>
	   		<mapping conf="default" scope="compile"/>
	   		<mapping conf="compile" scope="compile"/>
	   		<mapping conf="test" scope="test"/>
	   		<mapping conf="runtime" scope="runtime"/>
	   		<mapping conf="provided" scope="provided"/>
	   		<mapping conf="system" scope="system"/>
	   	</ivy:makepom>
		<ivy:publish resolver="user-local-repo" forcedeliver="true" overwrite="true">
		   <artifacts pattern="${build.dir}/[artifact]-[revision](-[classifier]).[ext]" />
		</ivy:publish>
		<ivy:publish resolver="local-m2-repo" forcedeliver="true" overwrite="true">
		   <artifacts pattern="${build.dir}/[artifact]-[revision](-[classifier]).[ext]" />
		</ivy:publish>
	</target>
	
	<target name="deploy" depends="publish" unless="publish.skip">
	   	<ivy:makepom ivyfile="ivy.xml" pomfile="${build.dir}/${ivy.module}-${ivy.revision}.pom">
	   		<mapping conf="master" scope="compile"/>
	   		<mapping conf="default" scope="compile"/>
	   		<mapping conf="compile" scope="compile"/>
	   		<mapping conf="test" scope="test"/>
	   		<mapping conf="runtime" scope="runtime"/>
	   		<mapping conf="provided" scope="provided"/>
	   		<mapping conf="system" scope="system"/>
	   	</ivy:makepom>

		<ivy:publish resolver="ncimvn" forcedeliver="true" overwrite="true">
		   <artifacts pattern="${build.dir}/[artifact]-[revision](-[classifier]).[ext]" />
		</ivy:publish>
	</target>
	
</project>
